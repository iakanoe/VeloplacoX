

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jul 29 14:49:57 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F2550 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	smallconst
    86  000800                     __psmallconst:
    87                           	opt stack 0
    88  000800  00                 	db	0
    89  000801                     _channels:
    90                           	opt stack 0
    91  000801  04                 	db	4
    92  000802  03                 	db	3
    93  000803  02                 	db	2
    94  000804  01                 	db	1
    95  000805  00                 	db	0
    96  000806                     __end_of_channels:
    97                           	opt stack 0
    98  000806                     _kd:
    99                           	opt stack 0
   100  000806  00                 	db	0
   101  000807  80                 	db	128
   102  000808  3F                 	db	63
   103  000809                     __end_of_kd:
   104                           	opt stack 0
   105  000809                     _ki:
   106                           	opt stack 0
   107  000809  00                 	db	0
   108  00080A  80                 	db	128
   109  00080B  3F                 	db	63
   110  00080C                     __end_of_ki:
   111                           	opt stack 0
   112  00080C                     _kp:
   113                           	opt stack 0
   114  00080C  00                 	db	0
   115  00080D  80                 	db	128
   116  00080E  3F                 	db	63
   117  00080F                     __end_of_kp:
   118                           	opt stack 0
   119  00080F                     _maxSpeed:
   120                           	opt stack 0
   121  00080F  01F4               	dw	500
   122  000811                     __end_of_maxSpeed:
   123                           	opt stack 0
   124  0000                     _PORTBbits	set	3969
   125  0000                     _LATBbits	set	3978
   126  0000                     _TRISBbits	set	3987
   127  0000                     _T2CON	set	4042
   128  0000                     _CCP2CONbits	set	4026
   129  0000                     _CCP1CONbits	set	4029
   130  0000                     _CCPR2L	set	4027
   131  0000                     _CCPR1L	set	4030
   132  0000                     _PR2	set	4043
   133  0000                     _LATCbits	set	3979
   134  0000                     _TRISCbits	set	3988
   135  0000                     _ADRESL	set	4035
   136  0000                     _ADRESH	set	4036
   137  0000                     _ADCON0bits	set	4034
   138  0000                     _ADCON2	set	4032
   139  0000                     _ADCON1	set	4033
   140  0000                     _TRISAbits	set	3986
   141  0000                     _T0CON	set	4053
   142  0000                     _INTCONbits	set	4082
   143                           
   144                           ; #config settings
   145  000811  00                 	db	0	; dummy byte at the end
   146  0000                     
   147                           	psect	cinit
   148  001744                     __pcinit:
   149                           	opt stack 0
   150  001744                     start_initialization:
   151                           	opt stack 0
   152  001744                     __initialization:
   153                           	opt stack 0
   154                           
   155                           ; Clear objects allocated to BANK0 (17 bytes)
   156  001744  EE00  F097         	lfsr	0,__pbssBANK0
   157  001748  0E11               	movlw	17
   158  00174A                     clear_0:
   159  00174A  6AEE               	clrf	postinc0,c
   160  00174C  06E8               	decf	wreg,f,c
   161  00174E  E1FD               	bnz	clear_0
   162                           
   163                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   164  001750  6A4C               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   165                           
   166                           ; Clear objects allocated to COMRAM (16 bytes)
   167  001752  EE00  F03C         	lfsr	0,__pbssCOMRAM
   168  001756  0E10               	movlw	16
   169  001758                     clear_1:
   170  001758  6AEE               	clrf	postinc0,c
   171  00175A  06E8               	decf	wreg,f,c
   172  00175C  E1FD               	bnz	clear_1
   173  00175E                     end_of_initialization:
   174                           	opt stack 0
   175  00175E                     __end_of__initialization:
   176                           	opt stack 0
   177  00175E  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   178  001760  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   179  001762  0E00               	movlw	low (__Lmediumconst shr (0+16))
   180  001764  6EF8               	movwf	tblptru,c
   181  001766  0100               	movlb	0
   182  001768  EFC9  F00B         	goto	_main	;jump to C main() function
   183                           tblptru	equ	0xFF8
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           
   187                           	psect	bitbssCOMRAM
   188  000260                     __pbitbssCOMRAM:
   189                           	opt stack 0
   190  000260                     loop@cal:
   191                           	opt stack 0
   192  000260                     	ds	1
   193                           tblptru	equ	0xFF8
   194                           postinc0	equ	0xFEE
   195                           wreg	equ	0xFE8
   196                           
   197                           	psect	bssCOMRAM
   198  00003C                     __pbssCOMRAM:
   199                           	opt stack 0
   200  00003C                     _mins:
   201                           	opt stack 0
   202  00003C                     	ds	10
   203  000046                     _millisCounter:
   204                           	opt stack 0
   205  000046                     	ds	4
   206  00004A                     _fractionCounter:
   207                           	opt stack 0
   208  00004A                     	ds	2
   209                           tblptru	equ	0xFF8
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           
   213                           	psect	bssBANK0
   214  000097                     __pbssBANK0:
   215                           	opt stack 0
   216  000097                     _maxs:
   217                           	opt stack 0
   218  000097                     	ds	10
   219  0000A1                     calcPID@err:
   220                           	opt stack 0
   221  0000A1                     	ds	2
   222  0000A3                     calcPID@integral:
   223                           	opt stack 0
   224  0000A3                     	ds	2
   225  0000A5                     calcPID@prevErr:
   226                           	opt stack 0
   227  0000A5                     	ds	2
   228  0000A7                     loop@status:
   229                           	opt stack 0
   230  0000A7                     	ds	1
   231                           tblptru	equ	0xFF8
   232                           postinc0	equ	0xFEE
   233                           wreg	equ	0xFE8
   234                           
   235                           	psect	cstackBANK0
   236  000060                     __pcstackBANK0:
   237                           	opt stack 0
   238  000060                     ___fttol@sign1:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0x0
   242  000060                     	ds	1
   243  000061                     ___fttol@lval:
   244                           	opt stack 0
   245                           
   246                           ; 4 bytes @ 0x1
   247  000061                     	ds	4
   248  000065                     ___fttol@exp1:
   249                           	opt stack 0
   250                           
   251                           ; 1 bytes @ 0x5
   252  000065                     	ds	1
   253  000066                     ?___ftadd:
   254                           	opt stack 0
   255  000066                     ___ftadd@f1:
   256                           	opt stack 0
   257                           
   258                           ; 3 bytes @ 0x6
   259  000066                     	ds	3
   260  000069                     ___ftadd@f2:
   261                           	opt stack 0
   262                           
   263                           ; 3 bytes @ 0x9
   264  000069                     	ds	3
   265  00006C                     ___ftadd@sign:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0xC
   269  00006C                     	ds	1
   270  00006D                     ___ftadd@exp2:
   271                           	opt stack 0
   272                           
   273                           ; 1 bytes @ 0xD
   274  00006D                     	ds	1
   275  00006E                     ___ftadd@exp1:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0xE
   279  00006E                     	ds	1
   280  00006F                     ?_calcPID:
   281                           	opt stack 0
   282  00006F                     calcPID@Kp:
   283                           	opt stack 0
   284                           
   285                           ; 3 bytes @ 0xF
   286  00006F                     	ds	3
   287  000072                     calcPID@Ki:
   288                           	opt stack 0
   289                           
   290                           ; 3 bytes @ 0x12
   291  000072                     	ds	3
   292  000075                     calcPID@Kd:
   293                           	opt stack 0
   294                           
   295                           ; 3 bytes @ 0x15
   296  000075                     	ds	3
   297  000078                     _calcPID$1249:
   298                           	opt stack 0
   299                           
   300                           ; 3 bytes @ 0x18
   301  000078                     	ds	3
   302  00007B                     calcPID@pos:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x1B
   306  00007B                     	ds	2
   307  00007D                     _calcPID$1247:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x1D
   311  00007D                     	ds	2
   312  00007F                     _calcPID$1248:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x1F
   316  00007F                     	ds	2
   317  000081                     calcPID@s1:
   318                           	opt stack 0
   319                           
   320                           ; 4 bytes @ 0x21
   321  000081                     	ds	4
   322  000085                     calcPID@s2:
   323                           	opt stack 0
   324                           
   325                           ; 4 bytes @ 0x25
   326  000085                     	ds	4
   327  000089                     calcPID@val:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x29
   331  000089                     	ds	2
   332  00008B                     calcPID@i:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x2B
   336  00008B                     	ds	2
   337  00008D                     ??_loop:
   338                           
   339                           ; 1 bytes @ 0x2D
   340  00008D                     	ds	4
   341  000091                     loop@pid:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x31
   345  000091                     	ds	2
   346  000093                     loop@i:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x33
   350  000093                     	ds	2
   351  000095                     loop@i_451:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x35
   355  000095                     	ds	2
   356                           tblptru	equ	0xFF8
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           
   360                           	psect	cstackCOMRAM
   361  000001                     __pcstackCOMRAM:
   362                           	opt stack 0
   363  000001                     ??_ISR:
   364                           
   365                           ; 1 bytes @ 0x0
   366  000001                     	ds	18
   367  000013                     ?_getCNY:
   368                           	opt stack 0
   369  000013                     ?___awmod:
   370                           	opt stack 0
   371  000013                     ?___lwdiv:
   372                           	opt stack 0
   373  000013                     ?___ftpack:
   374                           	opt stack 0
   375  000013                     ?___lldiv:
   376                           	opt stack 0
   377  000013                     setLEDR@v:
   378                           	opt stack 0
   379  000013                     setLEDY@v:
   380                           	opt stack 0
   381  000013                     setLEDG@v:
   382                           	opt stack 0
   383  000013                     setLMotor@speed:
   384                           	opt stack 0
   385  000013                     setRMotor@speed:
   386                           	opt stack 0
   387  000013                     initCal@i:
   388                           	opt stack 0
   389  000013                     ___awmod@dividend:
   390                           	opt stack 0
   391  000013                     ___lwdiv@dividend:
   392                           	opt stack 0
   393  000013                     ___ftpack@arg:
   394                           	opt stack 0
   395  000013                     ___lldiv@dividend:
   396                           	opt stack 0
   397                           
   398                           ; 4 bytes @ 0x12
   399  000013                     	ds	1
   400  000014                     setLEDs@y:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x13
   404  000014                     	ds	1
   405  000015                     ??_setLMotor:
   406  000015                     ??_setRMotor:
   407  000015                     ??_getCNY:
   408  000015                     setLEDs@g:
   409                           	opt stack 0
   410  000015                     ___awmod@divisor:
   411                           	opt stack 0
   412  000015                     ___lwdiv@divisor:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x14
   416  000015                     	ds	1
   417  000016                     setLEDs@r:
   418                           	opt stack 0
   419  000016                     ___ftpack@exp:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x15
   423  000016                     	ds	1
   424  000017                     getCNY@channel:
   425                           	opt stack 0
   426  000017                     ___awmod@counter:
   427                           	opt stack 0
   428  000017                     ___ftpack@sign:
   429                           	opt stack 0
   430  000017                     setMotors@left:
   431                           	opt stack 0
   432  000017                     ___lwdiv@quotient:
   433                           	opt stack 0
   434  000017                     ___lldiv@divisor:
   435                           	opt stack 0
   436                           
   437                           ; 4 bytes @ 0x16
   438  000017                     	ds	1
   439  000018                     ??___ftpack:
   440  000018                     ___awmod@sign:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x17
   444  000018                     	ds	1
   445  000019                     ___lwdiv@counter:
   446                           	opt stack 0
   447  000019                     setMotors@right:
   448                           	opt stack 0
   449  000019                     calibrateCNY@channel:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x18
   453  000019                     	ds	1
   454  00001A                     ?___wmul:
   455                           	opt stack 0
   456  00001A                     ___wmul@multiplier:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x19
   460  00001A                     	ds	1
   461  00001B                     ?___awtoft:
   462                           	opt stack 0
   463  00001B                     ___awtoft@c:
   464                           	opt stack 0
   465  00001B                     ___lldiv@quotient:
   466                           	opt stack 0
   467                           
   468                           ; 4 bytes @ 0x1A
   469  00001B                     	ds	1
   470  00001C                     ___wmul@multiplicand:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x1B
   474  00001C                     	ds	1
   475  00001D                     _calibrateCNY$671:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x1C
   479  00001D                     	ds	1
   480  00001E                     ___awtoft@sign:
   481                           	opt stack 0
   482  00001E                     ___wmul@product:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x1D
   486  00001E                     	ds	1
   487  00001F                     ?___ftmul:
   488                           	opt stack 0
   489  00001F                     ___lldiv@counter:
   490                           	opt stack 0
   491  00001F                     _calibrateCNY$672:
   492                           	opt stack 0
   493  00001F                     ___ftmul@f1:
   494                           	opt stack 0
   495                           
   496                           ; 3 bytes @ 0x1E
   497  00001F                     	ds	1
   498  000020                     ?_getCalCNY:
   499                           	opt stack 0
   500  000020                     getCalCNY@channel:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x1F
   504  000020                     	ds	1
   505  000021                     calibrateCNY@val:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x20
   509  000021                     	ds	1
   510  000022                     ??_getCalCNY:
   511  000022                     ___ftmul@f2:
   512                           	opt stack 0
   513                           
   514                           ; 3 bytes @ 0x21
   515  000022                     	ds	3
   516  000025                     ??___ftmul:
   517                           
   518                           ; 1 bytes @ 0x24
   519  000025                     	ds	3
   520  000028                     ___ftmul@exp:
   521                           	opt stack 0
   522  000028                     _getCalCNY$676:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x27
   526  000028                     	ds	1
   527  000029                     ___ftmul@f3_as_product:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x28
   531  000029                     	ds	1
   532  00002A                     _getCalCNY$677:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x29
   536  00002A                     	ds	2
   537  00002C                     ___ftmul@cntr:
   538                           	opt stack 0
   539  00002C                     getCalCNY@val:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x2B
   543  00002C                     	ds	1
   544  00002D                     ___ftmul@sign:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x2C
   548  00002D                     	ds	1
   549  00002E                     ?___fttol:
   550                           	opt stack 0
   551  00002E                     ___fttol@f1:
   552                           	opt stack 0
   553                           
   554                           ; 3 bytes @ 0x2D
   555  00002E                     	ds	4
   556  000032                     ??___fttol:
   557                           
   558                           ; 1 bytes @ 0x31
   559  000032                     	ds	5
   560  000037                     ??___ftadd:
   561                           
   562                           ; 1 bytes @ 0x36
   563  000037                     	ds	3
   564  00003A                     ??_calcPID:
   565                           
   566                           ; 1 bytes @ 0x39
   567  00003A                     	ds	2
   568  00003C                     tblptru	equ	0xFF8
   569                           postinc0	equ	0xFEE
   570                           wreg	equ	0xFE8
   571                           
   572                           ; 1 bytes @ 0x3B
   573 ;;
   574 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   575 ;;
   576 ;; *************** function _main *****************
   577 ;; Defined at:
   578 ;;		line 86 in file "main.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;		None
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   592 ;;      Params:         0       0       0       0       0       0       0       0       0
   593 ;;      Locals:         0       0       0       0       0       0       0       0       0
   594 ;;      Temps:          0       0       0       0       0       0       0       0       0
   595 ;;      Totals:         0       0       0       0       0       0       0       0       0
   596 ;;Total ram usage:        0 bytes
   597 ;; Hardware stack levels required when called:    6
   598 ;; This function calls:
   599 ;;		_initCNY
   600 ;;		_initCal
   601 ;;		_initInterrupts
   602 ;;		_initMotors
   603 ;;		_initTimer
   604 ;;		_initUI
   605 ;;		_loop
   606 ;; This function is called by:
   607 ;;		Startup code after reset
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           	psect	text0
   612  001792                     __ptext0:
   613                           	opt stack 0
   614  001792                     _main:
   615                           	opt stack 25
   616                           
   617                           ;main.c: 87: initInterrupts();
   618                           
   619                           ;incstack = 0
   620  001792  EC29  F00C         	call	_initInterrupts	;wreg free
   621                           
   622                           ;main.c: 88: initTimer();
   623  001796  EC24  F00C         	call	_initTimer	;wreg free
   624                           
   625                           ;main.c: 89: initUI();
   626  00179A  ECFA  F00B         	call	_initUI	;wreg free
   627                           
   628                           ;main.c: 90: initMotors();
   629  00179E  EC6F  F00B         	call	_initMotors	;wreg free
   630                           
   631                           ;main.c: 91: initCNY();
   632  0017A2  ECF0  F00B         	call	_initCNY	;wreg free
   633                           
   634                           ;main.c: 92: initCal();
   635  0017A6  EC00  F00B         	call	_initCal	;wreg free
   636  0017AA  EC09  F004         	call	_loop	;wreg free
   637  0017AE  D7FD               	goto	l167
   638  0017B0                     __end_of_main:
   639                           	opt stack 0
   640                           tblptru	equ	0xFF8
   641                           postinc0	equ	0xFEE
   642                           wreg	equ	0xFE8
   643                           
   644 ;; *************** function _loop *****************
   645 ;; Defined at:
   646 ;;		line 36 in file "main.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;		None
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  i               2   53[BANK0 ] int 
   651 ;;  i               2   51[BANK0 ] int 
   652 ;;  pid             2   49[BANK0 ] int 
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   662 ;;      Params:         0       0       0       0       0       0       0       0       0
   663 ;;      Locals:         0       6       0       0       0       0       0       0       0
   664 ;;      Temps:          0       4       0       0       0       0       0       0       0
   665 ;;      Totals:         0      10       0       0       0       0       0       0       0
   666 ;;Total ram usage:       10 bytes
   667 ;; Hardware stack levels used:    1
   668 ;; Hardware stack levels required when called:    5
   669 ;; This function calls:
   670 ;;		___awmod
   671 ;;		_calcPID
   672 ;;		_calibrateCNY
   673 ;;		_getBTN1
   674 ;;		_getBTN2
   675 ;;		_setLEDs
   676 ;;		_setMotors
   677 ;; This function is called by:
   678 ;;		_main
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text1
   683  000812                     __ptext1:
   684                           	opt stack 0
   685  000812                     _loop:
   686                           	opt stack 25
   687                           
   688                           ;main.c: 37: static char status = MENU;
   689                           ;main.c: 38: static bit cal = 0;
   690                           ;main.c: 39: int pid;
   691                           ;main.c: 40: switch(status){
   692                           
   693                           ;incstack = 0
   694  000812  D12D               	goto	l138
   695  000814                     
   696                           ;main.c: 42: setMotors(-50, 50);
   697  000814  0EFF               	movlw	255
   698  000816  6E18               	movwf	setMotors@left+1,c
   699  000818  0ECE               	movlw	206
   700  00081A  6E17               	movwf	setMotors@left,c
   701  00081C  0E00               	movlw	0
   702  00081E  6E1A               	movwf	setMotors@right+1,c
   703  000820  0E32               	movlw	50
   704  000822  6E19               	movwf	setMotors@right,c
   705  000824  ECD8  F00B         	call	_setMotors	;wreg free
   706                           
   707                           ;main.c: 43: setLEDs(1, cal, 0);
   708  000828  0E00               	movlw	0
   709  00082A  B04C               	btfsc	loop@cal/(0+8),loop@cal& (0+7),c
   710  00082C  0E01               	movlw	1
   711  00082E  6E14               	movwf	setLEDs@y,c
   712  000830  0E00               	movlw	0
   713  000832  6E15               	movwf	setLEDs@g,c
   714  000834  0E01               	movlw	1
   715  000836  ECE5  F00B         	call	_setLEDs
   716                           
   717                           ;main.c: 46: if(getBTN1()){
   718  00083A  EC1E  F00C         	call	_getBTN1	;wreg free
   719  00083E  A0D8               	btfss	status,0,c
   720  000840  D009               	goto	l140
   721  000842                     u2350:
   722                           
   723                           ;main.c: 47: while(getBTN1()) continue;
   724  000842  EC1E  F00C         	call	_getBTN1	;wreg free
   725  000846  B0D8               	btfsc	status,0,c
   726  000848  D7FC               	goto	u2350
   727                           
   728                           ;main.c: 48: cal = 1;
   729  00084A  804C               	bsf	loop@cal/(0+8),loop@cal& (0+7),c
   730                           
   731                           ;main.c: 49: status = CALIB;
   732  00084C  0E01               	movlw	1
   733  00084E  0100               	movlb	0	; () banked
   734  000850  6FA7               	movwf	loop@status& (0+255),b
   735                           
   736                           ;main.c: 50: break;
   737  000852  0012               	return	
   738  000854                     l140:
   739                           
   740                           ;main.c: 51: }
   741                           ;main.c: 52: if(getBTN2()){
   742                           
   743                           ; BSR set to: 0
   744  000854  EC18  F00C         	call	_getBTN2	;wreg free
   745  000858  A0D8               	btfss	status,0,c
   746  00085A  0012               	return	
   747                           
   748                           ;main.c: 53: if(cal) status = RUN;
   749  00085C  A04C               	btfss	loop@cal/(0+8),loop@cal& (0+7),c
   750  00085E  D004               	goto	l146
   751  000860  0E02               	movlw	2
   752  000862  0100               	movlb	0	; () banked
   753  000864  6FA7               	movwf	loop@status& (0+255),b
   754  000866  D011               	goto	l147
   755  000868                     l146:
   756                           
   757                           ;main.c: 54: else {
   758                           ;main.c: 55: setMotors(1000, 1000);
   759                           
   760                           ; BSR set to: 0
   761  000868  0E03               	movlw	3
   762  00086A  6E18               	movwf	setMotors@left+1,c
   763  00086C  0EE8               	movlw	232
   764  00086E  6E17               	movwf	setMotors@left,c
   765  000870  0E03               	movlw	3
   766  000872  6E1A               	movwf	setMotors@right+1,c
   767  000874  0EE8               	movlw	232
   768  000876  6E19               	movwf	setMotors@right,c
   769  000878  ECD8  F00B         	call	_setMotors	;wreg free
   770                           
   771                           ;main.c: 56: setLEDs(1, 1, 1);
   772  00087C  0E01               	movlw	1
   773  00087E  6E14               	movwf	setLEDs@y,c
   774  000880  0E01               	movlw	1
   775  000882  6E15               	movwf	setLEDs@g,c
   776  000884  0E01               	movlw	1
   777  000886  ECE5  F00B         	call	_setLEDs
   778  00088A                     l147:
   779                           
   780                           ;main.c: 57: }
   781                           ;main.c: 58: while(getBTN2()) continue;
   782  00088A  EC18  F00C         	call	_getBTN2	;wreg free
   783  00088E  A0D8               	btfss	status,0,c
   784  000890  0012               	return	
   785  000892  D7FB               	goto	l147
   786  000894                     
   787                           ;main.c: 64: setLEDs(0, 1, 0);
   788  000894  0E01               	movlw	1
   789  000896  6E14               	movwf	setLEDs@y,c
   790  000898  0E00               	movlw	0
   791  00089A  6E15               	movwf	setLEDs@g,c
   792  00089C  0E00               	movlw	0
   793  00089E  ECE5  F00B         	call	_setLEDs
   794                           
   795                           ;main.c: 65: setMotors(-50, 50);
   796  0008A2  0EFF               	movlw	255
   797  0008A4  6E18               	movwf	setMotors@left+1,c
   798  0008A6  0ECE               	movlw	206
   799  0008A8  6E17               	movwf	setMotors@left,c
   800  0008AA  0E00               	movlw	0
   801  0008AC  6E1A               	movwf	setMotors@right+1,c
   802  0008AE  0E32               	movlw	50
   803  0008B0  6E19               	movwf	setMotors@right,c
   804  0008B2  ECD8  F00B         	call	_setMotors	;wreg free
   805                           
   806                           ;main.c: 66: for(int i = 0; i < 5000; i++) calibrateCNY(i % 5);
   807  0008B6  0E00               	movlw	0
   808  0008B8  0100               	movlb	0	; () banked
   809  0008BA  6F94               	movwf	(loop@i+1)& (0+255),b
   810  0008BC  0E00               	movlw	0
   811  0008BE  6F93               	movwf	loop@i& (0+255),b
   812  0008C0  BF94               	btfsc	(loop@i+1)& (0+255),7,b
   813  0008C2  D006               	goto	l152
   814  0008C4  0E88               	movlw	136
   815  0008C6  5D93               	subwf	loop@i& (0+255),w,b
   816  0008C8  0E13               	movlw	19
   817  0008CA  5994               	subwfb	(loop@i+1)& (0+255),w,b
   818  0008CC  B0D8               	btfsc	status,0,c
   819  0008CE  D014               	goto	u2410
   820  0008D0                     l152:
   821                           
   822                           ; BSR set to: 0
   823                           
   824                           ; BSR set to: 0
   825  0008D0  C093  F013         	movff	loop@i,___awmod@dividend
   826  0008D4  C094  F014         	movff	loop@i+1,___awmod@dividend+1
   827  0008D8  0E00               	movlw	0
   828  0008DA  6E16               	movwf	___awmod@divisor+1,c
   829  0008DC  0E05               	movlw	5
   830  0008DE  6E15               	movwf	___awmod@divisor,c
   831  0008E0  EC9C  F00A         	call	___awmod	;wreg free
   832  0008E4  C013  F019         	movff	?___awmod,calibrateCNY@channel
   833  0008E8  C014  F01A         	movff	?___awmod+1,calibrateCNY@channel+1
   834  0008EC  ECCE  F008         	call	_calibrateCNY	;wreg free
   835  0008F0  0100               	movlb	0	; () banked
   836  0008F2  4B93               	infsnz	loop@i& (0+255),f,b
   837  0008F4  2B94               	incf	(loop@i+1)& (0+255),f,b
   838  0008F6  D7E4               	goto	L1
   839  0008F8                     u2410:
   840                           
   841                           ; BSR set to: 0
   842                           ;main.c: 67: setMotors(50, -50);
   843                           
   844                           ; BSR set to: 0
   845  0008F8  0E00               	movlw	0
   846  0008FA  6E18               	movwf	setMotors@left+1,c
   847  0008FC  0E32               	movlw	50
   848  0008FE  6E17               	movwf	setMotors@left,c
   849  000900  0EFF               	movlw	255
   850  000902  6E1A               	movwf	setMotors@right+1,c
   851  000904  0ECE               	movlw	206
   852  000906  6E19               	movwf	setMotors@right,c
   853  000908  ECD8  F00B         	call	_setMotors	;wreg free
   854                           
   855                           ;main.c: 68: for(int i = 0; i < 5000; i++) calibrateCNY(i % 5);
   856  00090C  0E00               	movlw	0
   857  00090E  0100               	movlb	0	; () banked
   858  000910  6F96               	movwf	(loop@i_451+1)& (0+255),b
   859  000912  0E00               	movlw	0
   860  000914  6F95               	movwf	loop@i_451& (0+255),b
   861  000916                     l2347:
   862                           
   863                           ; BSR set to: 0
   864  000916  BF96               	btfsc	(loop@i_451+1)& (0+255),7,b
   865  000918  D006               	goto	l154
   866  00091A  0E88               	movlw	136
   867  00091C  5D95               	subwf	loop@i_451& (0+255),w,b
   868  00091E  0E13               	movlw	19
   869  000920  5996               	subwfb	(loop@i_451+1)& (0+255),w,b
   870  000922  B0D8               	btfsc	status,0,c
   871  000924  D014               	goto	u2430
   872  000926                     l154:
   873                           
   874                           ; BSR set to: 0
   875                           
   876                           ; BSR set to: 0
   877  000926  C095  F013         	movff	loop@i_451,___awmod@dividend
   878  00092A  C096  F014         	movff	loop@i_451+1,___awmod@dividend+1
   879  00092E  0E00               	movlw	0
   880  000930  6E16               	movwf	___awmod@divisor+1,c
   881  000932  0E05               	movlw	5
   882  000934  6E15               	movwf	___awmod@divisor,c
   883  000936  EC9C  F00A         	call	___awmod	;wreg free
   884  00093A  C013  F019         	movff	?___awmod,calibrateCNY@channel
   885  00093E  C014  F01A         	movff	?___awmod+1,calibrateCNY@channel+1
   886  000942  ECCE  F008         	call	_calibrateCNY	;wreg free
   887  000946  0100               	movlb	0	; () banked
   888  000948  4B95               	infsnz	loop@i_451& (0+255),f,b
   889  00094A  2B96               	incf	(loop@i_451+1)& (0+255),f,b
   890  00094C  D7E4               	goto	l2347
   891  00094E                     u2430:
   892                           
   893                           ; BSR set to: 0
   894                           ;main.c: 69: setMotors(0, 0);
   895                           
   896                           ; BSR set to: 0
   897  00094E  0E00               	movlw	0
   898  000950  6E18               	movwf	setMotors@left+1,c
   899  000952  0E00               	movlw	0
   900  000954  6E17               	movwf	setMotors@left,c
   901  000956  0E00               	movlw	0
   902  000958  6E1A               	movwf	setMotors@right+1,c
   903  00095A  0E00               	movlw	0
   904  00095C  6E19               	movwf	setMotors@right,c
   905  00095E  ECD8  F00B         	call	_setMotors	;wreg free
   906                           
   907                           ;main.c: 70: status = MENU;
   908  000962  0E00               	movlw	0
   909  000964  0100               	movlb	0	; () banked
   910  000966  6FA7               	movwf	loop@status& (0+255),b
   911                           
   912                           ;main.c: 71: break;
   913  000968  0012               	return	
   914  00096A                     
   915                           ; BSR set to: 0
   916                           ;main.c: 74: setLEDs(0, 0, 1);
   917                           
   918                           ; BSR set to: 0
   919  00096A  0E00               	movlw	0
   920  00096C  6E14               	movwf	setLEDs@y,c
   921  00096E  0E01               	movlw	1
   922  000970  6E15               	movwf	setLEDs@g,c
   923  000972  0E00               	movlw	0
   924  000974  ECE5  F00B         	call	_setLEDs
   925                           
   926                           ;main.c: 75: pid = calcPID(kp, ki, kd);
   927  000978  0E0C               	movlw	low _kp
   928  00097A  6EF6               	movwf	tblptrl,c
   929  00097C                     	if	1	;There is more than 1 active tblptr byte
   930  00097C  0E08               	movlw	high _kp
   931  00097E  6EF7               	movwf	tblptrh,c
   932  000980                     	endif
   933  000980                     	if	0	;There are less than 3 active tblptr bytes
   934  000980                     	endif
   935  000980  0009               	tblrd		*+
   936  000982  CFF5 F06F          	movff	tablat,calcPID@Kp
   937  000986  0009               	tblrd		*+
   938  000988  CFF5 F070          	movff	tablat,calcPID@Kp+1
   939  00098C  000A               	tblrd		*-
   940  00098E  CFF5 F071          	movff	tablat,calcPID@Kp+2
   941  000992  0E09               	movlw	low _ki
   942  000994  6EF6               	movwf	tblptrl,c
   943  000996                     	if	1	;There is more than 1 active tblptr byte
   944  000996  0E08               	movlw	high _ki
   945  000998  6EF7               	movwf	tblptrh,c
   946  00099A                     	endif
   947  00099A                     	if	0	;There are less than 3 active tblptr bytes
   948  00099A                     	endif
   949  00099A  0009               	tblrd		*+
   950  00099C  CFF5 F072          	movff	tablat,calcPID@Ki
   951  0009A0  0009               	tblrd		*+
   952  0009A2  CFF5 F073          	movff	tablat,calcPID@Ki+1
   953  0009A6  000A               	tblrd		*-
   954  0009A8  CFF5 F074          	movff	tablat,calcPID@Ki+2
   955  0009AC  0E06               	movlw	low _kd
   956  0009AE  6EF6               	movwf	tblptrl,c
   957  0009B0                     	if	1	;There is more than 1 active tblptr byte
   958  0009B0  0E08               	movlw	high _kd
   959  0009B2  6EF7               	movwf	tblptrh,c
   960  0009B4                     	endif
   961  0009B4                     	if	0	;There are less than 3 active tblptr bytes
   962  0009B4                     	endif
   963  0009B4  0009               	tblrd		*+
   964  0009B6  CFF5 F075          	movff	tablat,calcPID@Kd
   965  0009BA  0009               	tblrd		*+
   966  0009BC  CFF5 F076          	movff	tablat,calcPID@Kd+1
   967  0009C0  000A               	tblrd		*-
   968  0009C2  CFF5 F077          	movff	tablat,calcPID@Kd+2
   969  0009C6  EC43  F005         	call	_calcPID	;wreg free
   970  0009CA  C06F  F091         	movff	?_calcPID,loop@pid
   971  0009CE  C070  F092         	movff	?_calcPID+1,loop@pid+1
   972                           
   973                           ;main.c: 76: if(pid < 0) setMotors((maxSpeed - pid), maxSpeed);
   974  0009D2  0100               	movlb	0	; () banked
   975  0009D4  AF92               	btfss	(loop@pid+1)& (0+255),7,b
   976  0009D6  D025               	goto	l157
   977                           
   978                           ; BSR set to: 0
   979  0009D8  0E0F               	movlw	low _maxSpeed
   980  0009DA  6EF6               	movwf	tblptrl,c
   981  0009DC                     	if	1	;There is more than 1 active tblptr byte
   982  0009DC  0E08               	movlw	high _maxSpeed
   983  0009DE  6EF7               	movwf	tblptrh,c
   984  0009E0                     	endif
   985  0009E0                     	if	0	;There are less than 3 active tblptr bytes
   986  0009E0                     	endif
   987  0009E0  0009               	tblrd		*+
   988  0009E2  CFF5 F08D          	movff	tablat,??_loop
   989  0009E6  0009               	tblrd		*+
   990  0009E8  CFF5 F08E          	movff	tablat,??_loop+1
   991  0009EC  C091  F08F         	movff	loop@pid,??_loop+2
   992  0009F0  C092  F090         	movff	loop@pid+1,??_loop+3
   993  0009F4  1F8F               	comf	(??_loop+2)& (0+255),f,b
   994  0009F6  1F90               	comf	(??_loop+3)& (0+255),f,b
   995  0009F8  4B8F               	infsnz	(??_loop+2)& (0+255),f,b
   996  0009FA  2B90               	incf	(??_loop+3)& (0+255),f,b
   997  0009FC  518D               	movf	??_loop& (0+255),w,b
   998  0009FE  258F               	addwf	(??_loop+2)& (0+255),w,b
   999  000A00  6E17               	movwf	setMotors@left,c
  1000  000A02  518E               	movf	(??_loop+1)& (0+255),w,b
  1001  000A04  2190               	addwfc	(??_loop+3)& (0+255),w,b
  1002  000A06  6E18               	movwf	setMotors@left+1,c
  1003  000A08  0E0F               	movlw	low _maxSpeed
  1004  000A0A  6EF6               	movwf	tblptrl,c
  1005  000A0C                     	if	1	;There is more than 1 active tblptr byte
  1006  000A0C  0E08               	movlw	high _maxSpeed
  1007  000A0E  6EF7               	movwf	tblptrh,c
  1008  000A10                     	endif
  1009  000A10                     	if	0	;There are less than 3 active tblptr bytes
  1010  000A10                     	endif
  1011  000A10  0009               	tblrd		*+
  1012  000A12  CFF5 F019          	movff	tablat,setMotors@right
  1013  000A16  000A               	tblrd		*-
  1014  000A18  CFF5 F01A          	movff	tablat,setMotors@right+1
  1015  000A1C  ECD8  F00B         	call	_setMotors	;wreg free
  1016  000A20  0012               	return	
  1017  000A22                     l157:
  1018                           
  1019                           ;main.c: 77: else setMotors(maxSpeed, (maxSpeed - pid));
  1020  000A22  0E0F               	movlw	low _maxSpeed
  1021  000A24  6EF6               	movwf	tblptrl,c
  1022  000A26                     	if	1	;There is more than 1 active tblptr byte
  1023  000A26  0E08               	movlw	high _maxSpeed
  1024  000A28  6EF7               	movwf	tblptrh,c
  1025  000A2A                     	endif
  1026  000A2A                     	if	0	;There are less than 3 active tblptr bytes
  1027  000A2A                     	endif
  1028  000A2A  0009               	tblrd		*+
  1029  000A2C  CFF5 F017          	movff	tablat,setMotors@left
  1030  000A30  000A               	tblrd		*-
  1031  000A32  CFF5 F018          	movff	tablat,setMotors@left+1
  1032  000A36  0E0F               	movlw	low _maxSpeed
  1033  000A38  6EF6               	movwf	tblptrl,c
  1034  000A3A                     	if	1	;There is more than 1 active tblptr byte
  1035  000A3A  0E08               	movlw	high _maxSpeed
  1036  000A3C  6EF7               	movwf	tblptrh,c
  1037  000A3E                     	endif
  1038  000A3E                     	if	0	;There are less than 3 active tblptr bytes
  1039  000A3E                     	endif
  1040  000A3E  0009               	tblrd		*+
  1041  000A40  CFF5 F08D          	movff	tablat,??_loop
  1042  000A44  0009               	tblrd		*+
  1043  000A46  CFF5 F08E          	movff	tablat,??_loop+1
  1044  000A4A  C091  F08F         	movff	loop@pid,??_loop+2
  1045  000A4E  C092  F090         	movff	loop@pid+1,??_loop+3
  1046  000A52  0100               	movlb	0	; () banked
  1047  000A54  1F8F               	comf	(??_loop+2)& (0+255),f,b
  1048  000A56  1F90               	comf	(??_loop+3)& (0+255),f,b
  1049  000A58  4B8F               	infsnz	(??_loop+2)& (0+255),f,b
  1050  000A5A  2B90               	incf	(??_loop+3)& (0+255),f,b
  1051  000A5C  518D               	movf	??_loop& (0+255),w,b
  1052  000A5E  258F               	addwf	(??_loop+2)& (0+255),w,b
  1053  000A60  6E19               	movwf	setMotors@right,c
  1054  000A62  518E               	movf	(??_loop+1)& (0+255),w,b
  1055  000A64  2190               	addwfc	(??_loop+3)& (0+255),w,b
  1056  000A66  6E1A               	movwf	setMotors@right+1,c
  1057  000A68  ECD8  F00B         	call	_setMotors	;wreg free
  1058                           
  1059                           ;main.c: 79: }
  1060                           
  1061                           ;main.c: 78: break;
  1062  000A6C  0012               	return	
  1063  000A6E                     l138:
  1064  000A6E  0100               	movlb	0	; () banked
  1065  000A70  51A7               	movf	loop@status& (0+255),w,b
  1066                           
  1067                           ; Switch size 1, requested type "space"
  1068                           ; Number of cases is 3, Range of values is 0 to 2
  1069                           ; switch strategies available:
  1070                           ; Name         Instructions Cycles
  1071                           ; simple_byte           10     6 (average)
  1072                           ;	Chosen strategy is simple_byte
  1073  000A72  0A00               	xorlw	0	; case 0
  1074  000A74  B4D8               	btfsc	status,2,c
  1075  000A76  D6CE               	goto	l139
  1076  000A78  0A01               	xorlw	1	; case 1
  1077  000A7A  B4D8               	btfsc	status,2,c
  1078  000A7C  D70B               	goto	l151
  1079  000A7E  0A03               	xorlw	3	; case 2
  1080  000A80  A4D8               	btfss	status,2,c
  1081  000A82  0012               	return	
  1082  000A84  D772               	goto	l156
  1083  000A86                     __end_of_loop:
  1084                           	opt stack 0
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           status	equ	0xFD8
  1092                           
  1093 ;; *************** function _setMotors *****************
  1094 ;; Defined at:
  1095 ;;		line 34 in file "motors.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  left            2   22[COMRAM] int 
  1098 ;;  right           2   24[COMRAM] int 
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;		None
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  1    wreg      void 
  1103 ;; Registers used:
  1104 ;;		wreg, status,2, status,0, cstack
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1110 ;;      Params:         4       0       0       0       0       0       0       0       0
  1111 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1112 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1113 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1114 ;;Total ram usage:        4 bytes
  1115 ;; Hardware stack levels used:    1
  1116 ;; Hardware stack levels required when called:    3
  1117 ;; This function calls:
  1118 ;;		_setLMotor
  1119 ;;		_setRMotor
  1120 ;; This function is called by:
  1121 ;;		_loop
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           	psect	text2
  1126  0017B0                     __ptext2:
  1127                           	opt stack 0
  1128  0017B0                     _setMotors:
  1129                           	opt stack 26
  1130                           
  1131                           ;motors.c: 35: setLMotor(left);
  1132                           
  1133                           ;incstack = 0
  1134  0017B0  C017  F013         	movff	setMotors@left,setLMotor@speed
  1135  0017B4  C018  F014         	movff	setMotors@left+1,setLMotor@speed+1
  1136  0017B8  EC5C  F00A         	call	_setLMotor	;wreg free
  1137                           
  1138                           ;motors.c: 36: setRMotor(right);
  1139  0017BC  C019  F013         	movff	setMotors@right,setRMotor@speed
  1140  0017C0  C01A  F014         	movff	setMotors@right+1,setRMotor@speed+1
  1141  0017C4  ECD8  F009         	call	_setRMotor	;wreg free
  1142  0017C8  0012               	return		;funcret
  1143  0017CA                     __end_of_setMotors:
  1144                           	opt stack 0
  1145                           tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           postinc0	equ	0xFEE
  1150                           wreg	equ	0xFE8
  1151                           status	equ	0xFD8
  1152                           
  1153 ;; *************** function _setRMotor *****************
  1154 ;; Defined at:
  1155 ;;		line 49 in file "motors.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;  speed           2   18[COMRAM] int 
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, status,2, status,0
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1169 ;;      Params:         2       0       0       0       0       0       0       0       0
  1170 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1171 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1172 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1173 ;;Total ram usage:        4 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    2
  1176 ;; This function calls:
  1177 ;;		Nothing
  1178 ;; This function is called by:
  1179 ;;		_setMotors
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           	psect	text3
  1184  0013B0                     __ptext3:
  1185                           	opt stack 0
  1186  0013B0                     _setRMotor:
  1187                           	opt stack 26
  1188                           
  1189                           ;motors.c: 50: LATCbits.LATC6 = speed < 0;
  1190                           
  1191                           ;incstack = 0
  1192  0013B0  AE14               	btfss	setRMotor@speed+1,7,c
  1193  0013B2  D003               	goto	u1140
  1194  0013B4  6A15               	clrf	??_setRMotor& (0+255),c
  1195  0013B6  2A15               	incf	??_setRMotor& (0+255),f,c
  1196  0013B8  D001               	goto	u1158
  1197  0013BA                     u1140:
  1198  0013BA  6A15               	clrf	??_setRMotor& (0+255),c
  1199  0013BC                     u1158:
  1200  0013BC  3A15               	swapf	??_setRMotor,f,c
  1201  0013BE  4615               	rlncf	??_setRMotor,f,c
  1202  0013C0  4615               	rlncf	??_setRMotor,f,c
  1203  0013C2  508B               	movf	3979,w,c	;volatile
  1204  0013C4  1815               	xorwf	??_setRMotor,w,c
  1205  0013C6  0BBF               	andlw	-65
  1206  0013C8  1815               	xorwf	??_setRMotor,w,c
  1207  0013CA  6E8B               	movwf	3979,c	;volatile
  1208                           
  1209                           ;motors.c: 51: if(speed < -1000) speed = -1000;
  1210  0013CC  AE14               	btfss	setRMotor@speed+1,7,c
  1211  0013CE  D00A               	goto	l62
  1212  0013D0  0E18               	movlw	24
  1213  0013D2  5C13               	subwf	setRMotor@speed,w,c
  1214  0013D4  0EFC               	movlw	252
  1215  0013D6  5814               	subwfb	setRMotor@speed+1,w,c
  1216  0013D8  B0D8               	btfsc	status,0,c
  1217  0013DA  D004               	goto	l62
  1218  0013DC  0EFC               	movlw	252
  1219  0013DE  6E14               	movwf	setRMotor@speed+1,c
  1220  0013E0  0E18               	movlw	24
  1221  0013E2  6E13               	movwf	setRMotor@speed,c
  1222  0013E4                     l62:
  1223                           
  1224                           ;motors.c: 52: if(speed > 1000) speed = 1000;
  1225  0013E4  BE14               	btfsc	setRMotor@speed+1,7,c
  1226  0013E6  D00A               	goto	l63
  1227  0013E8  0EE9               	movlw	233
  1228  0013EA  5C13               	subwf	setRMotor@speed,w,c
  1229  0013EC  0E03               	movlw	3
  1230  0013EE  5814               	subwfb	setRMotor@speed+1,w,c
  1231  0013F0  A0D8               	btfss	status,0,c
  1232  0013F2  D004               	goto	l63
  1233  0013F4  0E03               	movlw	3
  1234  0013F6  6E14               	movwf	setRMotor@speed+1,c
  1235  0013F8  0EE8               	movlw	232
  1236  0013FA  6E13               	movwf	setRMotor@speed,c
  1237  0013FC                     l63:
  1238                           
  1239                           ;motors.c: 53: if(speed < 0) speed += 1000;
  1240  0013FC  AE14               	btfss	setRMotor@speed+1,7,c
  1241  0013FE  D004               	goto	l64
  1242  001400  0EE8               	movlw	232
  1243  001402  2613               	addwf	setRMotor@speed,f,c
  1244  001404  0E03               	movlw	3
  1245  001406  2214               	addwfc	setRMotor@speed+1,f,c
  1246  001408                     l64:
  1247                           
  1248                           ;motors.c: 55: CCP2CONbits.DC2B = speed & 3;
  1249  001408  C013  F015         	movff	setRMotor@speed,??_setRMotor
  1250  00140C  0E03               	movlw	3
  1251  00140E  1615               	andwf	??_setRMotor,f,c
  1252  001410  3A15               	swapf	??_setRMotor,f,c
  1253  001412  50BA               	movf	4026,w,c	;volatile
  1254  001414  1815               	xorwf	??_setRMotor,w,c
  1255  001416  0BCF               	andlw	-49
  1256  001418  1815               	xorwf	??_setRMotor,w,c
  1257  00141A  6EBA               	movwf	4026,c	;volatile
  1258                           
  1259                           ;motors.c: 56: CCPR2L = speed >> 2;
  1260  00141C  C013  F015         	movff	setRMotor@speed,??_setRMotor
  1261  001420  C014  F016         	movff	setRMotor@speed+1,??_setRMotor+1
  1262  001424  3416               	rlcf	??_setRMotor+1,w,c
  1263  001426  3216               	rrcf	??_setRMotor+1,f,c
  1264  001428  3215               	rrcf	??_setRMotor,f,c
  1265  00142A  3416               	rlcf	??_setRMotor+1,w,c
  1266  00142C  3216               	rrcf	??_setRMotor+1,f,c
  1267  00142E  3215               	rrcf	??_setRMotor,f,c
  1268  001430  5015               	movf	??_setRMotor,w,c
  1269  001432  6EBB               	movwf	4027,c	;volatile
  1270  001434  0012               	return		;funcret
  1271  001436                     __end_of_setRMotor:
  1272                           	opt stack 0
  1273                           tblptru	equ	0xFF8
  1274                           tblptrh	equ	0xFF7
  1275                           tblptrl	equ	0xFF6
  1276                           tablat	equ	0xFF5
  1277                           postinc0	equ	0xFEE
  1278                           wreg	equ	0xFE8
  1279                           status	equ	0xFD8
  1280                           
  1281 ;; *************** function _setLMotor *****************
  1282 ;; Defined at:
  1283 ;;		line 39 in file "motors.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  speed           2   18[COMRAM] int 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;		None
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  1    wreg      void 
  1290 ;; Registers used:
  1291 ;;		wreg, status,2, status,0
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1297 ;;      Params:         2       0       0       0       0       0       0       0       0
  1298 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1299 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1300 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1301 ;;Total ram usage:        4 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:    2
  1304 ;; This function calls:
  1305 ;;		Nothing
  1306 ;; This function is called by:
  1307 ;;		_setMotors
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text4
  1312  0014B8                     __ptext4:
  1313                           	opt stack 0
  1314  0014B8                     _setLMotor:
  1315                           	opt stack 26
  1316                           
  1317                           ;motors.c: 40: LATCbits.LATC0 = speed < 0;
  1318                           
  1319                           ;incstack = 0
  1320  0014B8  AE14               	btfss	setLMotor@speed+1,7,c
  1321  0014BA  D003               	goto	u1090
  1322  0014BC  6A15               	clrf	??_setLMotor& (0+255),c
  1323  0014BE  2A15               	incf	??_setLMotor& (0+255),f,c
  1324  0014C0  D001               	goto	u1108
  1325  0014C2                     u1090:
  1326  0014C2  6A15               	clrf	??_setLMotor& (0+255),c
  1327  0014C4                     u1108:
  1328  0014C4  508B               	movf	3979,w,c	;volatile
  1329  0014C6  1815               	xorwf	??_setLMotor,w,c
  1330  0014C8  0BFE               	andlw	-2
  1331  0014CA  1815               	xorwf	??_setLMotor,w,c
  1332  0014CC  6E8B               	movwf	3979,c	;volatile
  1333                           
  1334                           ;motors.c: 41: if(speed < -1000) speed = -1000;
  1335  0014CE  AE14               	btfss	setLMotor@speed+1,7,c
  1336  0014D0  D00A               	goto	l56
  1337  0014D2  0E18               	movlw	24
  1338  0014D4  5C13               	subwf	setLMotor@speed,w,c
  1339  0014D6  0EFC               	movlw	252
  1340  0014D8  5814               	subwfb	setLMotor@speed+1,w,c
  1341  0014DA  B0D8               	btfsc	status,0,c
  1342  0014DC  D004               	goto	l56
  1343  0014DE  0EFC               	movlw	252
  1344  0014E0  6E14               	movwf	setLMotor@speed+1,c
  1345  0014E2  0E18               	movlw	24
  1346  0014E4  6E13               	movwf	setLMotor@speed,c
  1347  0014E6                     l56:
  1348                           
  1349                           ;motors.c: 42: if(speed > 1000) speed = 1000;
  1350  0014E6  BE14               	btfsc	setLMotor@speed+1,7,c
  1351  0014E8  D00A               	goto	l57
  1352  0014EA  0EE9               	movlw	233
  1353  0014EC  5C13               	subwf	setLMotor@speed,w,c
  1354  0014EE  0E03               	movlw	3
  1355  0014F0  5814               	subwfb	setLMotor@speed+1,w,c
  1356  0014F2  A0D8               	btfss	status,0,c
  1357  0014F4  D004               	goto	l57
  1358  0014F6  0E03               	movlw	3
  1359  0014F8  6E14               	movwf	setLMotor@speed+1,c
  1360  0014FA  0EE8               	movlw	232
  1361  0014FC  6E13               	movwf	setLMotor@speed,c
  1362  0014FE                     l57:
  1363                           
  1364                           ;motors.c: 43: if(speed < 0) speed += 1000;
  1365  0014FE  AE14               	btfss	setLMotor@speed+1,7,c
  1366  001500  D004               	goto	l58
  1367  001502  0EE8               	movlw	232
  1368  001504  2613               	addwf	setLMotor@speed,f,c
  1369  001506  0E03               	movlw	3
  1370  001508  2214               	addwfc	setLMotor@speed+1,f,c
  1371  00150A                     l58:
  1372                           
  1373                           ;motors.c: 45: CCP1CONbits.DC1B = speed & 3;
  1374  00150A  C013  F015         	movff	setLMotor@speed,??_setLMotor
  1375  00150E  0E03               	movlw	3
  1376  001510  1615               	andwf	??_setLMotor,f,c
  1377  001512  3A15               	swapf	??_setLMotor,f,c
  1378  001514  50BD               	movf	4029,w,c	;volatile
  1379  001516  1815               	xorwf	??_setLMotor,w,c
  1380  001518  0BCF               	andlw	-49
  1381  00151A  1815               	xorwf	??_setLMotor,w,c
  1382  00151C  6EBD               	movwf	4029,c	;volatile
  1383                           
  1384                           ;motors.c: 46: CCPR1L = speed >> 2;
  1385  00151E  C013  F015         	movff	setLMotor@speed,??_setLMotor
  1386  001522  C014  F016         	movff	setLMotor@speed+1,??_setLMotor+1
  1387  001526  3416               	rlcf	??_setLMotor+1,w,c
  1388  001528  3216               	rrcf	??_setLMotor+1,f,c
  1389  00152A  3215               	rrcf	??_setLMotor,f,c
  1390  00152C  3416               	rlcf	??_setLMotor+1,w,c
  1391  00152E  3216               	rrcf	??_setLMotor+1,f,c
  1392  001530  3215               	rrcf	??_setLMotor,f,c
  1393  001532  5015               	movf	??_setLMotor,w,c
  1394  001534  6EBE               	movwf	4030,c	;volatile
  1395  001536  0012               	return		;funcret
  1396  001538                     __end_of_setLMotor:
  1397                           	opt stack 0
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           postinc0	equ	0xFEE
  1403                           wreg	equ	0xFE8
  1404                           status	equ	0xFD8
  1405                           
  1406 ;; *************** function _setLEDs *****************
  1407 ;; Defined at:
  1408 ;;		line 32 in file "ui.c"
  1409 ;; Parameters:    Size  Location     Type
  1410 ;;  r               1    wreg     unsigned char 
  1411 ;;  y               1   19[COMRAM] unsigned char 
  1412 ;;  g               1   20[COMRAM] unsigned char 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;  r               1   21[COMRAM] unsigned char 
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  1    wreg      void 
  1417 ;; Registers used:
  1418 ;;		wreg, status,2, cstack
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1424 ;;      Params:         2       0       0       0       0       0       0       0       0
  1425 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1426 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1427 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1428 ;;Total ram usage:        3 bytes
  1429 ;; Hardware stack levels used:    1
  1430 ;; Hardware stack levels required when called:    3
  1431 ;; This function calls:
  1432 ;;		_setLEDG
  1433 ;;		_setLEDR
  1434 ;;		_setLEDY
  1435 ;; This function is called by:
  1436 ;;		_loop
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text5
  1441  0017CA                     __ptext5:
  1442                           	opt stack 0
  1443  0017CA                     _setLEDs:
  1444                           	opt stack 26
  1445                           
  1446                           ;incstack = 0
  1447                           ;setLEDs@r stored from wreg
  1448  0017CA  6E16               	movwf	setLEDs@r,c
  1449                           
  1450                           ;ui.c: 33: setLEDR(r);
  1451  0017CC  5016               	movf	setLEDs@r,w,c
  1452  0017CE  EC0A  F00C         	call	_setLEDR
  1453                           
  1454                           ;ui.c: 34: setLEDY(y);
  1455  0017D2  5014               	movf	setLEDs@y,w,c
  1456  0017D4  EC03  F00C         	call	_setLEDY
  1457                           
  1458                           ;ui.c: 35: setLEDG(g);
  1459  0017D8  5015               	movf	setLEDs@g,w,c
  1460  0017DA  EC11  F00C         	call	_setLEDG
  1461  0017DE  0012               	return		;funcret
  1462  0017E0                     __end_of_setLEDs:
  1463                           	opt stack 0
  1464                           tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           postinc0	equ	0xFEE
  1469                           wreg	equ	0xFE8
  1470                           status	equ	0xFD8
  1471                           
  1472 ;; *************** function _setLEDY *****************
  1473 ;; Defined at:
  1474 ;;		line 54 in file "ui.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;  v               1    wreg     unsigned char 
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;  v               1   18[COMRAM] unsigned char 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1488 ;;      Params:         0       0       0       0       0       0       0       0       0
  1489 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1490 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1491 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1492 ;;Total ram usage:        1 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    2
  1495 ;; This function calls:
  1496 ;;		Nothing
  1497 ;; This function is called by:
  1498 ;;		_setLEDs
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text6
  1503  001806                     __ptext6:
  1504                           	opt stack 0
  1505  001806                     _setLEDY:
  1506                           	opt stack 26
  1507                           
  1508                           ;incstack = 0
  1509                           ;setLEDY@v stored from wreg
  1510  001806  6E13               	movwf	setLEDY@v,c
  1511                           
  1512                           ;ui.c: 55: LATBbits.LB2 = v;
  1513  001808  B013               	btfsc	setLEDY@v,0,c
  1514  00180A  D002               	bra	u1225
  1515  00180C  948A               	bcf	3978,2,c	;volatile
  1516  00180E  D001               	bra	u1226
  1517  001810                     u1225:
  1518  001810  848A               	bsf	3978,2,c	;volatile
  1519  001812                     u1226:
  1520  001812  0012               	return		;funcret
  1521  001814                     __end_of_setLEDY:
  1522                           	opt stack 0
  1523                           tblptru	equ	0xFF8
  1524                           tblptrh	equ	0xFF7
  1525                           tblptrl	equ	0xFF6
  1526                           tablat	equ	0xFF5
  1527                           postinc0	equ	0xFEE
  1528                           wreg	equ	0xFE8
  1529                           status	equ	0xFD8
  1530                           
  1531 ;; *************** function _setLEDR *****************
  1532 ;; Defined at:
  1533 ;;		line 50 in file "ui.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  v               1    wreg     unsigned char 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  v               1   18[COMRAM] unsigned char 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1547 ;;      Params:         0       0       0       0       0       0       0       0       0
  1548 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1549 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1550 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1551 ;;Total ram usage:        1 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    2
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_setLEDs
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text7
  1562  001814                     __ptext7:
  1563                           	opt stack 0
  1564  001814                     _setLEDR:
  1565                           	opt stack 26
  1566                           
  1567                           ;incstack = 0
  1568                           ;setLEDR@v stored from wreg
  1569  001814  6E13               	movwf	setLEDR@v,c
  1570                           
  1571                           ;ui.c: 51: LATBbits.LB1 = v;
  1572  001816  B013               	btfsc	setLEDR@v,0,c
  1573  001818  D002               	bra	u1215
  1574  00181A  928A               	bcf	3978,1,c	;volatile
  1575  00181C  D001               	bra	u1216
  1576  00181E                     u1215:
  1577  00181E  828A               	bsf	3978,1,c	;volatile
  1578  001820                     u1216:
  1579  001820  0012               	return		;funcret
  1580  001822                     __end_of_setLEDR:
  1581                           	opt stack 0
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           status	equ	0xFD8
  1589                           
  1590 ;; *************** function _setLEDG *****************
  1591 ;; Defined at:
  1592 ;;		line 58 in file "ui.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  v               1    wreg     unsigned char 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  v               1   18[COMRAM] unsigned char 
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1606 ;;      Params:         0       0       0       0       0       0       0       0       0
  1607 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1609 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1610 ;;Total ram usage:        1 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    2
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_setLEDs
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text8
  1621  001822                     __ptext8:
  1622                           	opt stack 0
  1623  001822                     _setLEDG:
  1624                           	opt stack 26
  1625                           
  1626                           ;incstack = 0
  1627                           ;setLEDG@v stored from wreg
  1628  001822  6E13               	movwf	setLEDG@v,c
  1629                           
  1630                           ;ui.c: 59: LATBbits.LB3 = v;
  1631  001824  B013               	btfsc	setLEDG@v,0,c
  1632  001826  D002               	bra	u1235
  1633  001828  968A               	bcf	3978,3,c	;volatile
  1634  00182A  D001               	bra	u1236
  1635  00182C                     u1235:
  1636  00182C  868A               	bsf	3978,3,c	;volatile
  1637  00182E                     u1236:
  1638  00182E  0012               	return		;funcret
  1639  001830                     __end_of_setLEDG:
  1640                           	opt stack 0
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           status	equ	0xFD8
  1648                           
  1649 ;; *************** function _getBTN2 *****************
  1650 ;; Defined at:
  1651 ;;		line 42 in file "ui.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;		None
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;		None
  1656 ;; Return value:  Size  Location     Type
  1657 ;;		None               void
  1658 ;; Registers used:
  1659 ;;		status,0
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1665 ;;      Params:         0       0       0       0       0       0       0       0       0
  1666 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1667 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1668 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1669 ;;Total ram usage:        0 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    2
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_loop
  1676 ;;		_getBTNs
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text9
  1681  001830                     __ptext9:
  1682                           	opt stack 0
  1683  001830                     _getBTN2:
  1684                           	opt stack 27
  1685                           
  1686                           ;ui.c: 43: return !PORTBbits.RB5;
  1687                           
  1688                           ;incstack = 0
  1689  001830  AA81               	btfss	3969,5,c	;volatile
  1690  001832  D002               	goto	l1531
  1691  001834  90D8               	bcf	status,0,c
  1692  001836  0012               	return	
  1693  001838                     l1531:
  1694  001838  80D8               	bsf	status,0,c
  1695  00183A  0012               	return	
  1696  00183C                     __end_of_getBTN2:
  1697                           	opt stack 0
  1698                           tblptru	equ	0xFF8
  1699                           tblptrh	equ	0xFF7
  1700                           tblptrl	equ	0xFF6
  1701                           tablat	equ	0xFF5
  1702                           postinc0	equ	0xFEE
  1703                           wreg	equ	0xFE8
  1704                           status	equ	0xFD8
  1705                           
  1706 ;; *************** function _getBTN1 *****************
  1707 ;; Defined at:
  1708 ;;		line 38 in file "ui.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;		None
  1713 ;; Return value:  Size  Location     Type
  1714 ;;		None               void
  1715 ;; Registers used:
  1716 ;;		status,0
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1722 ;;      Params:         0       0       0       0       0       0       0       0       0
  1723 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1724 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1725 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1726 ;;Total ram usage:        0 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    2
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_loop
  1733 ;;		_getBTNs
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text10
  1738  00183C                     __ptext10:
  1739                           	opt stack 0
  1740  00183C                     _getBTN1:
  1741                           	opt stack 27
  1742                           
  1743                           ;ui.c: 39: return !PORTBbits.RB0;
  1744                           
  1745                           ;incstack = 0
  1746  00183C  A081               	btfss	3969,0,c	;volatile
  1747  00183E  D002               	goto	l1535
  1748  001840  90D8               	bcf	status,0,c
  1749  001842  0012               	return	
  1750  001844                     l1535:
  1751  001844  80D8               	bsf	status,0,c
  1752  001846  0012               	return	
  1753  001848                     __end_of_getBTN1:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           postinc0	equ	0xFEE
  1760                           wreg	equ	0xFE8
  1761                           status	equ	0xFD8
  1762                           
  1763 ;; *************** function _calibrateCNY *****************
  1764 ;; Defined at:
  1765 ;;		line 18 in file "calibration.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;  channel         2   24[COMRAM] unsigned int 
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;  val             2   32[COMRAM] unsigned int 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1779 ;;      Params:         2       0       0       0       0       0       0       0       0
  1780 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1781 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1782 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1783 ;;Total ram usage:       10 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    3
  1786 ;; This function calls:
  1787 ;;		_getCNY
  1788 ;; This function is called by:
  1789 ;;		_loop
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text11
  1794  00119C                     __ptext11:
  1795                           	opt stack 0
  1796  00119C                     _calibrateCNY:
  1797                           	opt stack 26
  1798                           
  1799                           ;calibration.c: 19: unsigned int val = getCNY(channel);
  1800                           
  1801                           ;incstack = 0
  1802  00119C  5019               	movf	calibrateCNY@channel,w,c
  1803  00119E  ECD4  F00A         	call	_getCNY
  1804  0011A2  C013  F021         	movff	?_getCNY,calibrateCNY@val
  1805  0011A6  C014  F022         	movff	?_getCNY+1,calibrateCNY@val+1
  1806                           
  1807                           ;calibration.c: 20: mins[channel] = ((val) < (mins[channel]) ? (val) : (mins[channel]));
  1808  0011AA  90D8               	bcf	status,0,c
  1809  0011AC  3419               	rlcf	calibrateCNY@channel,w,c
  1810  0011AE  6ED9               	movwf	fsr2l,c
  1811  0011B0  341A               	rlcf	calibrateCNY@channel+1,w,c
  1812  0011B2  6EDA               	movwf	fsr2h,c
  1813  0011B4  0E3C               	movlw	low _mins
  1814  0011B6  26D9               	addwf	fsr2l,f,c
  1815  0011B8  0E00               	movlw	high _mins
  1816  0011BA  22DA               	addwfc	fsr2h,f,c
  1817  0011BC  50DE               	movf	postinc2,w,c
  1818  0011BE  5C21               	subwf	calibrateCNY@val,w,c
  1819  0011C0  50DE               	movf	postinc2,w,c
  1820  0011C2  5822               	subwfb	calibrateCNY@val+1,w,c
  1821  0011C4  A0D8               	btfss	status,0,c
  1822  0011C6  D00E               	goto	l237
  1823  0011C8  90D8               	bcf	status,0,c
  1824  0011CA  3419               	rlcf	calibrateCNY@channel,w,c
  1825  0011CC  6ED9               	movwf	fsr2l,c
  1826  0011CE  341A               	rlcf	calibrateCNY@channel+1,w,c
  1827  0011D0  6EDA               	movwf	fsr2h,c
  1828  0011D2  0E3C               	movlw	low _mins
  1829  0011D4  26D9               	addwf	fsr2l,f,c
  1830  0011D6  0E00               	movlw	high _mins
  1831  0011D8  22DA               	addwfc	fsr2h,f,c
  1832  0011DA  CFDE F01D          	movff	postinc2,_calibrateCNY$671
  1833  0011DE  CFDD F01E          	movff	postdec2,_calibrateCNY$671+1
  1834  0011E2  D004               	goto	l239
  1835  0011E4                     l237:
  1836  0011E4  C021  F01D         	movff	calibrateCNY@val,_calibrateCNY$671
  1837  0011E8  C022  F01E         	movff	calibrateCNY@val+1,_calibrateCNY$671+1
  1838  0011EC                     l239:
  1839  0011EC  90D8               	bcf	status,0,c
  1840  0011EE  3419               	rlcf	calibrateCNY@channel,w,c
  1841  0011F0  6ED9               	movwf	fsr2l,c
  1842  0011F2  341A               	rlcf	calibrateCNY@channel+1,w,c
  1843  0011F4  6EDA               	movwf	fsr2h,c
  1844  0011F6  0E3C               	movlw	low _mins
  1845  0011F8  26D9               	addwf	fsr2l,f,c
  1846  0011FA  0E00               	movlw	high _mins
  1847  0011FC  22DA               	addwfc	fsr2h,f,c
  1848  0011FE  C01D  FFDE         	movff	_calibrateCNY$671,postinc2
  1849  001202  C01E  FFDD         	movff	_calibrateCNY$671+1,postdec2
  1850                           
  1851                           ;calibration.c: 21: maxs[channel] = ((val) > (maxs[channel]) ? (val) : (maxs[channel]));
  1852  001206  90D8               	bcf	status,0,c
  1853  001208  3419               	rlcf	calibrateCNY@channel,w,c
  1854  00120A  6ED9               	movwf	fsr2l,c
  1855  00120C  341A               	rlcf	calibrateCNY@channel+1,w,c
  1856  00120E  6EDA               	movwf	fsr2h,c
  1857  001210  0E97               	movlw	low _maxs
  1858  001212  26D9               	addwf	fsr2l,f,c
  1859  001214  0E00               	movlw	high _maxs
  1860  001216  22DA               	addwfc	fsr2h,f,c
  1861  001218  5021               	movf	calibrateCNY@val,w,c
  1862  00121A  5CDE               	subwf	postinc2,w,c
  1863  00121C  5022               	movf	calibrateCNY@val+1,w,c
  1864  00121E  58DE               	subwfb	postinc2,w,c
  1865  001220  A0D8               	btfss	status,0,c
  1866  001222  D00E               	goto	l241
  1867  001224  90D8               	bcf	status,0,c
  1868  001226  3419               	rlcf	calibrateCNY@channel,w,c
  1869  001228  6ED9               	movwf	fsr2l,c
  1870  00122A  341A               	rlcf	calibrateCNY@channel+1,w,c
  1871  00122C  6EDA               	movwf	fsr2h,c
  1872  00122E  0E97               	movlw	low _maxs
  1873  001230  26D9               	addwf	fsr2l,f,c
  1874  001232  0E00               	movlw	high _maxs
  1875  001234  22DA               	addwfc	fsr2h,f,c
  1876  001236  CFDE F01F          	movff	postinc2,_calibrateCNY$672
  1877  00123A  CFDD F020          	movff	postdec2,_calibrateCNY$672+1
  1878  00123E  D004               	goto	l243
  1879  001240                     l241:
  1880  001240  C021  F01F         	movff	calibrateCNY@val,_calibrateCNY$672
  1881  001244  C022  F020         	movff	calibrateCNY@val+1,_calibrateCNY$672+1
  1882  001248                     l243:
  1883  001248  90D8               	bcf	status,0,c
  1884  00124A  3419               	rlcf	calibrateCNY@channel,w,c
  1885  00124C  6ED9               	movwf	fsr2l,c
  1886  00124E  341A               	rlcf	calibrateCNY@channel+1,w,c
  1887  001250  6EDA               	movwf	fsr2h,c
  1888  001252  0E97               	movlw	low _maxs
  1889  001254  26D9               	addwf	fsr2l,f,c
  1890  001256  0E00               	movlw	high _maxs
  1891  001258  22DA               	addwfc	fsr2h,f,c
  1892  00125A  C01F  FFDE         	movff	_calibrateCNY$672,postinc2
  1893  00125E  C020  FFDD         	movff	_calibrateCNY$672+1,postdec2
  1894  001262  0012               	return		;funcret
  1895  001264                     __end_of_calibrateCNY:
  1896                           	opt stack 0
  1897                           tblptru	equ	0xFF8
  1898                           tblptrh	equ	0xFF7
  1899                           tblptrl	equ	0xFF6
  1900                           tablat	equ	0xFF5
  1901                           postinc0	equ	0xFEE
  1902                           wreg	equ	0xFE8
  1903                           postinc2	equ	0xFDE
  1904                           postdec2	equ	0xFDD
  1905                           fsr2h	equ	0xFDA
  1906                           fsr2l	equ	0xFD9
  1907                           status	equ	0xFD8
  1908                           
  1909 ;; *************** function _calcPID *****************
  1910 ;; Defined at:
  1911 ;;		line 20 in file "main.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;  Kp              3   15[BANK0 ] const float 
  1914 ;;  Ki              3   18[BANK0 ] const float 
  1915 ;;  Kd              3   21[BANK0 ] const float 
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;  val             2   41[BANK0 ] const unsigned int 
  1918 ;;  i               2   43[BANK0 ] int 
  1919 ;;  s2              4   37[BANK0 ] unsigned long 
  1920 ;;  s1              4   33[BANK0 ] unsigned long 
  1921 ;;  pos             2   27[BANK0 ] const int 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  2   15[BANK0 ] int 
  1924 ;; Registers used:
  1925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1931 ;;      Params:         0       9       0       0       0       0       0       0       0
  1932 ;;      Locals:         0      21       0       0       0       0       0       0       0
  1933 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1934 ;;      Totals:         2      30       0       0       0       0       0       0       0
  1935 ;;Total ram usage:       32 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    4
  1938 ;; This function calls:
  1939 ;;		___awtoft
  1940 ;;		___ftadd
  1941 ;;		___ftmul
  1942 ;;		___fttol
  1943 ;;		___lldiv
  1944 ;;		___wmul
  1945 ;;		_getCalCNY
  1946 ;; This function is called by:
  1947 ;;		_loop
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text12
  1952  000A86                     __ptext12:
  1953                           	opt stack 0
  1954  000A86                     _calcPID:
  1955                           	opt stack 25
  1956                           
  1957                           ;main.c: 21: static int prevErr = 0, integral = 0, err;
  1958                           ;main.c: 22: unsigned long long s1 = 0, s2 = 0;
  1959                           
  1960                           ;incstack = 0
  1961  000A86  0E00               	movlw	0
  1962  000A88  0100               	movlb	0	; () banked
  1963  000A8A  6F81               	movwf	calcPID@s1& (0+255),b
  1964  000A8C  0E00               	movlw	0
  1965  000A8E  6F82               	movwf	(calcPID@s1+1)& (0+255),b
  1966  000A90  0E00               	movlw	0
  1967  000A92  6F83               	movwf	(calcPID@s1+2)& (0+255),b
  1968  000A94  0E00               	movlw	0
  1969  000A96  6F84               	movwf	(calcPID@s1+3)& (0+255),b
  1970  000A98  0E00               	movlw	0
  1971  000A9A  6F85               	movwf	calcPID@s2& (0+255),b
  1972  000A9C  0E00               	movlw	0
  1973  000A9E  6F86               	movwf	(calcPID@s2+1)& (0+255),b
  1974  000AA0  0E00               	movlw	0
  1975  000AA2  6F87               	movwf	(calcPID@s2+2)& (0+255),b
  1976  000AA4  0E00               	movlw	0
  1977  000AA6  6F88               	movwf	(calcPID@s2+3)& (0+255),b
  1978                           
  1979                           ;main.c: 23: for(int i = 0; i < 5; i++){
  1980  000AA8  0E00               	movlw	0
  1981  000AAA  6F8C               	movwf	(calcPID@i+1)& (0+255),b
  1982  000AAC  0E00               	movlw	0
  1983  000AAE  6F8B               	movwf	calcPID@i& (0+255),b
  1984  000AB0                     l2277:
  1985                           
  1986                           ; BSR set to: 0
  1987  000AB0  BF8C               	btfsc	(calcPID@i+1)& (0+255),7,b
  1988  000AB2  D006               	goto	l129
  1989  000AB4  518C               	movf	(calcPID@i+1)& (0+255),w,b
  1990  000AB6  E13D               	bnz	l2293
  1991  000AB8  0E05               	movlw	5
  1992  000ABA  5D8B               	subwf	calcPID@i& (0+255),w,b
  1993  000ABC  B0D8               	btfsc	status,0,c
  1994  000ABE  D039               	goto	u2340
  1995  000AC0                     l129:
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;main.c: 24: const unsigned int val = getCalCNY(i);
  1999                           
  2000                           ; BSR set to: 0
  2001  000AC0  C08B  F020         	movff	calcPID@i,getCalCNY@channel
  2002  000AC4  C08C  F021         	movff	calcPID@i+1,getCalCNY@channel+1
  2003  000AC8  EC25  F007         	call	_getCalCNY	;wreg free
  2004  000ACC  C020  F089         	movff	?_getCalCNY,calcPID@val
  2005  000AD0  C021  F08A         	movff	?_getCalCNY+1,calcPID@val+1
  2006                           
  2007                           ;main.c: 25: s1 += val * (i + 1) * 100;
  2008  000AD4  0E01               	movlw	1
  2009  000AD6  0100               	movlb	0	; () banked
  2010  000AD8  258B               	addwf	calcPID@i& (0+255),w,b
  2011  000ADA  6E1A               	movwf	___wmul@multiplier,c
  2012  000ADC  0E00               	movlw	0
  2013  000ADE  218C               	addwfc	(calcPID@i+1)& (0+255),w,b
  2014  000AE0  6E1B               	movwf	___wmul@multiplier+1,c
  2015  000AE2  C089  F01C         	movff	calcPID@val,___wmul@multiplicand
  2016  000AE6  C08A  F01D         	movff	calcPID@val+1,___wmul@multiplicand+1
  2017  000AEA  ECB6  F00B         	call	___wmul	;wreg free
  2018  000AEE  C01A  F07D         	movff	?___wmul,_calcPID$1247
  2019  000AF2  C01B  F07E         	movff	?___wmul+1,_calcPID$1247+1
  2020                           
  2021                           ;main.c: 25: s1 += val * (i + 1) * 100;
  2022  000AF6  C07D  F01A         	movff	_calcPID$1247,___wmul@multiplier
  2023  000AFA  C07E  F01B         	movff	_calcPID$1247+1,___wmul@multiplier+1
  2024  000AFE  0E00               	movlw	0
  2025  000B00  6E1D               	movwf	___wmul@multiplicand+1,c
  2026  000B02  0E64               	movlw	100
  2027  000B04  6E1C               	movwf	___wmul@multiplicand,c
  2028  000B06  ECB6  F00B         	call	___wmul	;wreg free
  2029  000B0A  501A               	movf	?___wmul,w,c
  2030  000B0C  0100               	movlb	0	; () banked
  2031  000B0E  2781               	addwf	calcPID@s1& (0+255),f,b
  2032  000B10  501B               	movf	?___wmul+1,w,c
  2033  000B12  2382               	addwfc	(calcPID@s1+1)& (0+255),f,b
  2034  000B14  0E00               	movlw	0
  2035  000B16  2383               	addwfc	(calcPID@s1+2)& (0+255),f,b
  2036  000B18  0E00               	movlw	0
  2037  000B1A  2384               	addwfc	(calcPID@s1+3)& (0+255),f,b
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;main.c: 26: s2 += val;
  2041  000B1C  5189               	movf	calcPID@val& (0+255),w,b
  2042  000B1E  2785               	addwf	calcPID@s2& (0+255),f,b
  2043  000B20  518A               	movf	(calcPID@val+1)& (0+255),w,b
  2044  000B22  2386               	addwfc	(calcPID@s2+1)& (0+255),f,b
  2045  000B24  0E00               	movlw	0
  2046  000B26  2387               	addwfc	(calcPID@s2+2)& (0+255),f,b
  2047  000B28  0E00               	movlw	0
  2048  000B2A  2388               	addwfc	(calcPID@s2+3)& (0+255),f,b
  2049                           
  2050                           ; BSR set to: 0
  2051  000B2C  4B8B               	infsnz	calcPID@i& (0+255),f,b
  2052  000B2E  2B8C               	incf	(calcPID@i+1)& (0+255),f,b
  2053  000B30  D7BF               	goto	l2277
  2054  000B32                     u2340:
  2055  000B32                     l2293:
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;main.c: 27: }
  2059                           ;main.c: 28: const int pos = s1 / s2;
  2060  000B32  C081  F013         	movff	calcPID@s1,___lldiv@dividend
  2061  000B36  C082  F014         	movff	calcPID@s1+1,___lldiv@dividend+1
  2062  000B3A  C083  F015         	movff	calcPID@s1+2,___lldiv@dividend+2
  2063  000B3E  C084  F016         	movff	calcPID@s1+3,___lldiv@dividend+3
  2064  000B42  C085  F017         	movff	calcPID@s2,___lldiv@divisor
  2065  000B46  C086  F018         	movff	calcPID@s2+1,___lldiv@divisor+1
  2066  000B4A  C087  F019         	movff	calcPID@s2+2,___lldiv@divisor+2
  2067  000B4E  C088  F01A         	movff	calcPID@s2+3,___lldiv@divisor+3
  2068  000B52  EC1B  F00A         	call	___lldiv	;wreg free
  2069  000B56  C013  F07B         	movff	?___lldiv,calcPID@pos
  2070  000B5A  C014  F07C         	movff	?___lldiv+1,calcPID@pos+1
  2071                           
  2072                           ;main.c: 29: prevErr = err;
  2073  000B5E  C0A1  F0A5         	movff	calcPID@err,calcPID@prevErr
  2074  000B62  C0A2  F0A6         	movff	calcPID@err+1,calcPID@prevErr+1
  2075                           
  2076                           ;main.c: 30: err = 300 - pos;
  2077  000B66  C07B  F03A         	movff	calcPID@pos,??_calcPID
  2078  000B6A  C07C  F03B         	movff	calcPID@pos+1,??_calcPID+1
  2079  000B6E  1E3A               	comf	??_calcPID,f,c
  2080  000B70  1E3B               	comf	??_calcPID+1,f,c
  2081  000B72  4A3A               	infsnz	??_calcPID,f,c
  2082  000B74  2A3B               	incf	??_calcPID+1,f,c
  2083  000B76  0E2C               	movlw	44
  2084  000B78  243A               	addwf	??_calcPID,w,c
  2085  000B7A  0100               	movlb	0	; () banked
  2086  000B7C  6FA1               	movwf	calcPID@err& (0+255),b
  2087  000B7E  0E01               	movlw	1
  2088  000B80  203B               	addwfc	??_calcPID+1,w,c
  2089  000B82  6FA2               	movwf	(calcPID@err+1)& (0+255),b
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;main.c: 31: integral += err;
  2093  000B84  51A1               	movf	calcPID@err& (0+255),w,b
  2094  000B86  27A3               	addwf	calcPID@integral& (0+255),f,b
  2095  000B88  51A2               	movf	(calcPID@err+1)& (0+255),w,b
  2096  000B8A  23A4               	addwfc	(calcPID@integral+1)& (0+255),f,b
  2097                           
  2098                           ;main.c: 32: return ((int) (Kp * (float) err) + (Ki * (float) integral) + (Kd * (float) 
      +                          (err - prevErr)));
  2099  000B8C  C06F  F022         	movff	calcPID@Kp,___ftmul@f2
  2100  000B90  C070  F023         	movff	calcPID@Kp+1,___ftmul@f2+1
  2101  000B94  C071  F024         	movff	calcPID@Kp+2,___ftmul@f2+2
  2102  000B98  C0A1  F01B         	movff	calcPID@err,___awtoft@c
  2103  000B9C  C0A2  F01C         	movff	calcPID@err+1,___awtoft@c+1
  2104  000BA0  EC53  F00B         	call	___awtoft	;wreg free
  2105  000BA4  C01B  F01F         	movff	?___awtoft,___ftmul@f1
  2106  000BA8  C01C  F020         	movff	?___awtoft+1,___ftmul@f1+1
  2107  000BAC  C01D  F021         	movff	?___awtoft+2,___ftmul@f1+2
  2108  000BB0  EC54  F008         	call	___ftmul	;wreg free
  2109  000BB4  C01F  F02E         	movff	?___ftmul,___fttol@f1
  2110  000BB8  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  2111  000BBC  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  2112  000BC0  ECD8  F007         	call	___fttol	;wreg free
  2113  000BC4  C02E  F07F         	movff	?___fttol,_calcPID$1248
  2114  000BC8  C02F  F080         	movff	?___fttol+1,_calcPID$1248+1
  2115                           
  2116                           ;main.c: 32: return ((int) (Kp * (float) err) + (Ki * (float) integral) + (Kd * (float) 
      +                          (err - prevErr)));
  2117  000BCC  C072  F022         	movff	calcPID@Ki,___ftmul@f2
  2118  000BD0  C073  F023         	movff	calcPID@Ki+1,___ftmul@f2+1
  2119  000BD4  C074  F024         	movff	calcPID@Ki+2,___ftmul@f2+2
  2120  000BD8  C0A3  F01B         	movff	calcPID@integral,___awtoft@c
  2121  000BDC  C0A4  F01C         	movff	calcPID@integral+1,___awtoft@c+1
  2122  000BE0  EC53  F00B         	call	___awtoft	;wreg free
  2123  000BE4  C01B  F01F         	movff	?___awtoft,___ftmul@f1
  2124  000BE8  C01C  F020         	movff	?___awtoft+1,___ftmul@f1+1
  2125  000BEC  C01D  F021         	movff	?___awtoft+2,___ftmul@f1+2
  2126  000BF0  EC54  F008         	call	___ftmul	;wreg free
  2127  000BF4  C01F  F069         	movff	?___ftmul,___ftadd@f2
  2128  000BF8  C020  F06A         	movff	?___ftmul+1,___ftadd@f2+1
  2129  000BFC  C021  F06B         	movff	?___ftmul+2,___ftadd@f2+2
  2130  000C00  C07F  F01B         	movff	_calcPID$1248,___awtoft@c
  2131  000C04  C080  F01C         	movff	_calcPID$1248+1,___awtoft@c+1
  2132  000C08  EC53  F00B         	call	___awtoft	;wreg free
  2133  000C0C  C01B  F066         	movff	?___awtoft,___ftadd@f1
  2134  000C10  C01C  F067         	movff	?___awtoft+1,___ftadd@f1+1
  2135  000C14  C01D  F068         	movff	?___awtoft+2,___ftadd@f1+2
  2136  000C18  EC4E  F006         	call	___ftadd	;wreg free
  2137  000C1C  C066  F078         	movff	?___ftadd,_calcPID$1249
  2138  000C20  C067  F079         	movff	?___ftadd+1,_calcPID$1249+1
  2139  000C24  C068  F07A         	movff	?___ftadd+2,_calcPID$1249+2
  2140                           
  2141                           ;main.c: 32: return ((int) (Kp * (float) err) + (Ki * (float) integral) + (Kd * (float) 
      +                          (err - prevErr)));
  2142  000C28  C075  F022         	movff	calcPID@Kd,___ftmul@f2
  2143  000C2C  C076  F023         	movff	calcPID@Kd+1,___ftmul@f2+1
  2144  000C30  C077  F024         	movff	calcPID@Kd+2,___ftmul@f2+2
  2145  000C34  C0A5  F03A         	movff	calcPID@prevErr,??_calcPID
  2146  000C38  C0A6  F03B         	movff	calcPID@prevErr+1,??_calcPID+1
  2147  000C3C  1E3A               	comf	??_calcPID,f,c
  2148  000C3E  1E3B               	comf	??_calcPID+1,f,c
  2149  000C40  4A3A               	infsnz	??_calcPID,f,c
  2150  000C42  2A3B               	incf	??_calcPID+1,f,c
  2151  000C44  0100               	movlb	0	; () banked
  2152  000C46  51A1               	movf	calcPID@err& (0+255),w,b
  2153  000C48  243A               	addwf	??_calcPID,w,c
  2154  000C4A  6E1B               	movwf	___awtoft@c,c
  2155  000C4C  51A2               	movf	(calcPID@err+1)& (0+255),w,b
  2156  000C4E  203B               	addwfc	??_calcPID+1,w,c
  2157  000C50  6E1C               	movwf	___awtoft@c+1,c
  2158  000C52  EC53  F00B         	call	___awtoft	;wreg free
  2159  000C56  C01B  F01F         	movff	?___awtoft,___ftmul@f1
  2160  000C5A  C01C  F020         	movff	?___awtoft+1,___ftmul@f1+1
  2161  000C5E  C01D  F021         	movff	?___awtoft+2,___ftmul@f1+2
  2162  000C62  EC54  F008         	call	___ftmul	;wreg free
  2163  000C66  C01F  F069         	movff	?___ftmul,___ftadd@f2
  2164  000C6A  C020  F06A         	movff	?___ftmul+1,___ftadd@f2+1
  2165  000C6E  C021  F06B         	movff	?___ftmul+2,___ftadd@f2+2
  2166  000C72  C078  F066         	movff	_calcPID$1249,___ftadd@f1
  2167  000C76  C079  F067         	movff	_calcPID$1249+1,___ftadd@f1+1
  2168  000C7A  C07A  F068         	movff	_calcPID$1249+2,___ftadd@f1+2
  2169  000C7E  EC4E  F006         	call	___ftadd	;wreg free
  2170  000C82  C066  F02E         	movff	?___ftadd,___fttol@f1
  2171  000C86  C067  F02F         	movff	?___ftadd+1,___fttol@f1+1
  2172  000C8A  C068  F030         	movff	?___ftadd+2,___fttol@f1+2
  2173  000C8E  ECD8  F007         	call	___fttol	;wreg free
  2174  000C92  C02E  F06F         	movff	?___fttol,?_calcPID
  2175  000C96  C02F  F070         	movff	?___fttol+1,?_calcPID+1
  2176  000C9A  0012               	return	
  2177  000C9C                     __end_of_calcPID:
  2178                           	opt stack 0
  2179                           tblptru	equ	0xFF8
  2180                           tblptrh	equ	0xFF7
  2181                           tblptrl	equ	0xFF6
  2182                           tablat	equ	0xFF5
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           postinc2	equ	0xFDE
  2186                           postdec2	equ	0xFDD
  2187                           fsr2h	equ	0xFDA
  2188                           fsr2l	equ	0xFD9
  2189                           status	equ	0xFD8
  2190                           
  2191 ;; *************** function _getCalCNY *****************
  2192 ;; Defined at:
  2193 ;;		line 24 in file "calibration.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;  channel         2   31[COMRAM] unsigned int 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  val             2   43[COMRAM] unsigned int 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  2   31[COMRAM] unsigned int 
  2200 ;; Registers used:
  2201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2207 ;;      Params:         2       0       0       0       0       0       0       0       0
  2208 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2209 ;;      Temps:          6       0       0       0       0       0       0       0       0
  2210 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2211 ;;Total ram usage:       14 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    3
  2214 ;; This function calls:
  2215 ;;		___lwdiv
  2216 ;;		___wmul
  2217 ;;		_getCNY
  2218 ;; This function is called by:
  2219 ;;		_calcPID
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text13
  2224  000E4A                     __ptext13:
  2225                           	opt stack 0
  2226  000E4A                     _getCalCNY:
  2227                           	opt stack 25
  2228                           
  2229                           ;calibration.c: 25: unsigned int val = getCNY(channel);
  2230                           
  2231                           ;incstack = 0
  2232  000E4A  5020               	movf	getCalCNY@channel,w,c
  2233  000E4C  ECD4  F00A         	call	_getCNY
  2234  000E50  C013  F02C         	movff	?_getCNY,getCalCNY@val
  2235  000E54  C014  F02D         	movff	?_getCNY+1,getCalCNY@val+1
  2236                           
  2237                           ;calibration.c: 26: mins[channel] = ((val) < (mins[channel]) ? (val) : (mins[channel]));
  2238  000E58  90D8               	bcf	status,0,c
  2239  000E5A  3420               	rlcf	getCalCNY@channel,w,c
  2240  000E5C  6ED9               	movwf	fsr2l,c
  2241  000E5E  3421               	rlcf	getCalCNY@channel+1,w,c
  2242  000E60  6EDA               	movwf	fsr2h,c
  2243  000E62  0E3C               	movlw	low _mins
  2244  000E64  26D9               	addwf	fsr2l,f,c
  2245  000E66  0E00               	movlw	high _mins
  2246  000E68  22DA               	addwfc	fsr2h,f,c
  2247  000E6A  50DE               	movf	postinc2,w,c
  2248  000E6C  5C2C               	subwf	getCalCNY@val,w,c
  2249  000E6E  50DE               	movf	postinc2,w,c
  2250  000E70  582D               	subwfb	getCalCNY@val+1,w,c
  2251  000E72  A0D8               	btfss	status,0,c
  2252  000E74  D00E               	goto	l248
  2253  000E76  90D8               	bcf	status,0,c
  2254  000E78  3420               	rlcf	getCalCNY@channel,w,c
  2255  000E7A  6ED9               	movwf	fsr2l,c
  2256  000E7C  3421               	rlcf	getCalCNY@channel+1,w,c
  2257  000E7E  6EDA               	movwf	fsr2h,c
  2258  000E80  0E3C               	movlw	low _mins
  2259  000E82  26D9               	addwf	fsr2l,f,c
  2260  000E84  0E00               	movlw	high _mins
  2261  000E86  22DA               	addwfc	fsr2h,f,c
  2262  000E88  CFDE F028          	movff	postinc2,_getCalCNY$676
  2263  000E8C  CFDD F029          	movff	postdec2,_getCalCNY$676+1
  2264  000E90  D004               	goto	l250
  2265  000E92                     l248:
  2266  000E92  C02C  F028         	movff	getCalCNY@val,_getCalCNY$676
  2267  000E96  C02D  F029         	movff	getCalCNY@val+1,_getCalCNY$676+1
  2268  000E9A                     l250:
  2269  000E9A  90D8               	bcf	status,0,c
  2270  000E9C  3420               	rlcf	getCalCNY@channel,w,c
  2271  000E9E  6ED9               	movwf	fsr2l,c
  2272  000EA0  3421               	rlcf	getCalCNY@channel+1,w,c
  2273  000EA2  6EDA               	movwf	fsr2h,c
  2274  000EA4  0E3C               	movlw	low _mins
  2275  000EA6  26D9               	addwf	fsr2l,f,c
  2276  000EA8  0E00               	movlw	high _mins
  2277  000EAA  22DA               	addwfc	fsr2h,f,c
  2278  000EAC  C028  FFDE         	movff	_getCalCNY$676,postinc2
  2279  000EB0  C029  FFDD         	movff	_getCalCNY$676+1,postdec2
  2280                           
  2281                           ;calibration.c: 27: maxs[channel] = ((val) > (maxs[channel]) ? (val) : (maxs[channel]));
  2282  000EB4  90D8               	bcf	status,0,c
  2283  000EB6  3420               	rlcf	getCalCNY@channel,w,c
  2284  000EB8  6ED9               	movwf	fsr2l,c
  2285  000EBA  3421               	rlcf	getCalCNY@channel+1,w,c
  2286  000EBC  6EDA               	movwf	fsr2h,c
  2287  000EBE  0E97               	movlw	low _maxs
  2288  000EC0  26D9               	addwf	fsr2l,f,c
  2289  000EC2  0E00               	movlw	high _maxs
  2290  000EC4  22DA               	addwfc	fsr2h,f,c
  2291  000EC6  502C               	movf	getCalCNY@val,w,c
  2292  000EC8  5CDE               	subwf	postinc2,w,c
  2293  000ECA  502D               	movf	getCalCNY@val+1,w,c
  2294  000ECC  58DE               	subwfb	postinc2,w,c
  2295  000ECE  A0D8               	btfss	status,0,c
  2296  000ED0  D00E               	goto	l252
  2297  000ED2  90D8               	bcf	status,0,c
  2298  000ED4  3420               	rlcf	getCalCNY@channel,w,c
  2299  000ED6  6ED9               	movwf	fsr2l,c
  2300  000ED8  3421               	rlcf	getCalCNY@channel+1,w,c
  2301  000EDA  6EDA               	movwf	fsr2h,c
  2302  000EDC  0E97               	movlw	low _maxs
  2303  000EDE  26D9               	addwf	fsr2l,f,c
  2304  000EE0  0E00               	movlw	high _maxs
  2305  000EE2  22DA               	addwfc	fsr2h,f,c
  2306  000EE4  CFDE F02A          	movff	postinc2,_getCalCNY$677
  2307  000EE8  CFDD F02B          	movff	postdec2,_getCalCNY$677+1
  2308  000EEC  D004               	goto	l254
  2309  000EEE                     l252:
  2310  000EEE  C02C  F02A         	movff	getCalCNY@val,_getCalCNY$677
  2311  000EF2  C02D  F02B         	movff	getCalCNY@val+1,_getCalCNY$677+1
  2312  000EF6                     l254:
  2313  000EF6  90D8               	bcf	status,0,c
  2314  000EF8  3420               	rlcf	getCalCNY@channel,w,c
  2315  000EFA  6ED9               	movwf	fsr2l,c
  2316  000EFC  3421               	rlcf	getCalCNY@channel+1,w,c
  2317  000EFE  6EDA               	movwf	fsr2h,c
  2318  000F00  0E97               	movlw	low _maxs
  2319  000F02  26D9               	addwf	fsr2l,f,c
  2320  000F04  0E00               	movlw	high _maxs
  2321  000F06  22DA               	addwfc	fsr2h,f,c
  2322  000F08  C02A  FFDE         	movff	_getCalCNY$677,postinc2
  2323  000F0C  C02B  FFDD         	movff	_getCalCNY$677+1,postdec2
  2324                           
  2325                           ;calibration.c: 28: val = (0 + ((1000 - 0) / (maxs[channel] - mins[channel])) * (val - m
      +                          ins[channel]));
  2326  000F10  90D8               	bcf	status,0,c
  2327  000F12  3420               	rlcf	getCalCNY@channel,w,c
  2328  000F14  6ED9               	movwf	fsr2l,c
  2329  000F16  3421               	rlcf	getCalCNY@channel+1,w,c
  2330  000F18  6EDA               	movwf	fsr2h,c
  2331  000F1A  0E3C               	movlw	low _mins
  2332  000F1C  26D9               	addwf	fsr2l,f,c
  2333  000F1E  0E00               	movlw	high _mins
  2334  000F20  22DA               	addwfc	fsr2h,f,c
  2335  000F22  CFDE F022          	movff	postinc2,??_getCalCNY
  2336  000F26  CFDD F023          	movff	postdec2,??_getCalCNY+1
  2337  000F2A  1E22               	comf	??_getCalCNY,f,c
  2338  000F2C  1E23               	comf	??_getCalCNY+1,f,c
  2339  000F2E  4A22               	infsnz	??_getCalCNY,f,c
  2340  000F30  2A23               	incf	??_getCalCNY+1,f,c
  2341  000F32  502C               	movf	getCalCNY@val,w,c
  2342  000F34  2422               	addwf	??_getCalCNY,w,c
  2343  000F36  6E1A               	movwf	___wmul@multiplier,c
  2344  000F38  502D               	movf	getCalCNY@val+1,w,c
  2345  000F3A  2023               	addwfc	??_getCalCNY+1,w,c
  2346  000F3C  6E1B               	movwf	___wmul@multiplier+1,c
  2347  000F3E  90D8               	bcf	status,0,c
  2348  000F40  3420               	rlcf	getCalCNY@channel,w,c
  2349  000F42  6ED9               	movwf	fsr2l,c
  2350  000F44  3421               	rlcf	getCalCNY@channel+1,w,c
  2351  000F46  6EDA               	movwf	fsr2h,c
  2352  000F48  0E97               	movlw	low _maxs
  2353  000F4A  26D9               	addwf	fsr2l,f,c
  2354  000F4C  0E00               	movlw	high _maxs
  2355  000F4E  22DA               	addwfc	fsr2h,f,c
  2356  000F50  CFDE F024          	movff	postinc2,??_getCalCNY+2
  2357  000F54  CFDD F025          	movff	postdec2,??_getCalCNY+3
  2358  000F58  90D8               	bcf	status,0,c
  2359  000F5A  3420               	rlcf	getCalCNY@channel,w,c
  2360  000F5C  6ED9               	movwf	fsr2l,c
  2361  000F5E  3421               	rlcf	getCalCNY@channel+1,w,c
  2362  000F60  6EDA               	movwf	fsr2h,c
  2363  000F62  0E3C               	movlw	low _mins
  2364  000F64  26D9               	addwf	fsr2l,f,c
  2365  000F66  0E00               	movlw	high _mins
  2366  000F68  22DA               	addwfc	fsr2h,f,c
  2367  000F6A  CFDE F026          	movff	postinc2,??_getCalCNY+4
  2368  000F6E  CFDD F027          	movff	postdec2,??_getCalCNY+5
  2369  000F72  1E26               	comf	??_getCalCNY+4,f,c
  2370  000F74  1E27               	comf	??_getCalCNY+5,f,c
  2371  000F76  4A26               	infsnz	??_getCalCNY+4,f,c
  2372  000F78  2A27               	incf	??_getCalCNY+5,f,c
  2373  000F7A  5024               	movf	??_getCalCNY+2,w,c
  2374  000F7C  2426               	addwf	??_getCalCNY+4,w,c
  2375  000F7E  6E15               	movwf	___lwdiv@divisor,c
  2376  000F80  5025               	movf	??_getCalCNY+3,w,c
  2377  000F82  2027               	addwfc	??_getCalCNY+5,w,c
  2378  000F84  6E16               	movwf	___lwdiv@divisor+1,c
  2379  000F86  0E03               	movlw	3
  2380  000F88  6E14               	movwf	___lwdiv@dividend+1,c
  2381  000F8A  0EE8               	movlw	232
  2382  000F8C  6E13               	movwf	___lwdiv@dividend,c
  2383  000F8E  EC2A  F00B         	call	___lwdiv	;wreg free
  2384  000F92  C013  F01C         	movff	?___lwdiv,___wmul@multiplicand
  2385  000F96  C014  F01D         	movff	?___lwdiv+1,___wmul@multiplicand+1
  2386  000F9A  ECB6  F00B         	call	___wmul	;wreg free
  2387  000F9E  C01A  F02C         	movff	?___wmul,getCalCNY@val
  2388  000FA2  C01B  F02D         	movff	?___wmul+1,getCalCNY@val+1
  2389                           
  2390                           ;calibration.c: 29: return val;
  2391  000FA6  C02C  F020         	movff	getCalCNY@val,?_getCalCNY
  2392  000FAA  C02D  F021         	movff	getCalCNY@val+1,?_getCalCNY+1
  2393  000FAE  0012               	return	
  2394  000FB0                     __end_of_getCalCNY:
  2395                           	opt stack 0
  2396                           tblptru	equ	0xFF8
  2397                           tblptrh	equ	0xFF7
  2398                           tblptrl	equ	0xFF6
  2399                           tablat	equ	0xFF5
  2400                           postinc0	equ	0xFEE
  2401                           wreg	equ	0xFE8
  2402                           postinc2	equ	0xFDE
  2403                           postdec2	equ	0xFDD
  2404                           fsr2h	equ	0xFDA
  2405                           fsr2l	equ	0xFD9
  2406                           status	equ	0xFD8
  2407                           
  2408 ;; *************** function _getCNY *****************
  2409 ;; Defined at:
  2410 ;;		line 56 in file "CNY.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;  channel         1    wreg     unsigned char 
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;  channel         1   22[COMRAM] unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  2   18[COMRAM] unsigned int 
  2417 ;; Registers used:
  2418 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2424 ;;      Params:         2       0       0       0       0       0       0       0       0
  2425 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2426 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2427 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2428 ;;Total ram usage:        5 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    2
  2431 ;; This function calls:
  2432 ;;		Nothing
  2433 ;; This function is called by:
  2434 ;;		_calibrateCNY
  2435 ;;		_getCalCNY
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text14
  2440  0015A8                     __ptext14:
  2441                           	opt stack 0
  2442  0015A8                     _getCNY:
  2443                           	opt stack 26
  2444                           
  2445                           ;incstack = 0
  2446                           ;getCNY@channel stored from wreg
  2447  0015A8  6E17               	movwf	getCNY@channel,c
  2448                           
  2449                           ;CNY.c: 57: if(channel >= 5) return 0;
  2450  0015AA  0E04               	movlw	4
  2451  0015AC  6417               	cpfsgt	getCNY@channel,c
  2452  0015AE  D005               	goto	l23
  2453  0015B0  0E00               	movlw	0
  2454  0015B2  6E14               	movwf	?_getCNY+1,c
  2455  0015B4  0E00               	movlw	0
  2456  0015B6  6E13               	movwf	?_getCNY,c
  2457  0015B8  0012               	return	
  2458  0015BA                     l23:
  2459                           
  2460                           ;CNY.c: 58: ADCON0bits.CHS = channels[channel];
  2461  0015BA  5017               	movf	getCNY@channel,w,c
  2462  0015BC  0D01               	mullw	1
  2463  0015BE  0E01               	movlw	low _channels
  2464  0015C0  24F3               	addwf	prodl,w,c
  2465  0015C2  6EF6               	movwf	tblptrl,c
  2466  0015C4  0E08               	movlw	high _channels
  2467  0015C6  20F4               	addwfc	prodh,w,c
  2468  0015C8  6EF7               	movwf	tblptrh,c
  2469  0015CA                     	if	0	;There are less than 3 active tblptr bytes
  2470  0015CA                     	endif
  2471  0015CA  0008               	tblrd		*
  2472  0015CC  CFF5 F015          	movff	tablat,??_getCNY
  2473  0015D0  4615               	rlncf	??_getCNY,f,c
  2474  0015D2  4615               	rlncf	??_getCNY,f,c
  2475  0015D4  50C2               	movf	4034,w,c	;volatile
  2476  0015D6  1815               	xorwf	??_getCNY,w,c
  2477  0015D8  0BC3               	andlw	-61
  2478  0015DA  1815               	xorwf	??_getCNY,w,c
  2479  0015DC  6EC2               	movwf	4034,c	;volatile
  2480                           
  2481                           ;CNY.c: 59: ADCON0bits.ADON = 1;
  2482  0015DE  80C2               	bsf	4034,0,c	;volatile
  2483                           
  2484                           ;CNY.c: 60: ADCON0bits.GO = 1;
  2485  0015E0  82C2               	bsf	4034,1,c	;volatile
  2486  0015E2  B2C2               	btfsc	4034,1,c	;volatile
  2487  0015E4  D7FE               	goto	l26
  2488                           
  2489                           ;CNY.c: 62: ADCON0bits.ADON = 0;
  2490  0015E6  90C2               	bcf	4034,0,c	;volatile
  2491                           
  2492                           ;CNY.c: 63: return (unsigned int)((ADRESH << 8) | ADRESL);
  2493  0015E8  50C3               	movf	4035,w,c	;volatile
  2494  0015EA  CFC4 F015          	movff	4036,??_getCNY	;volatile
  2495  0015EE  6A16               	clrf	(??_getCNY+1)& (0+255),c
  2496  0015F0  C015  F016         	movff	??_getCNY,??_getCNY+1
  2497  0015F4  6A15               	clrf	??_getCNY,c
  2498  0015F6  1015               	iorwf	??_getCNY,w,c
  2499  0015F8  6E13               	movwf	?_getCNY,c
  2500  0015FA  5016               	movf	??_getCNY+1,w,c
  2501  0015FC  6E14               	movwf	?_getCNY+1,c
  2502  0015FE  0012               	return	
  2503  001600                     __end_of_getCNY:
  2504                           	opt stack 0
  2505                           tblptru	equ	0xFF8
  2506                           tblptrh	equ	0xFF7
  2507                           tblptrl	equ	0xFF6
  2508                           tablat	equ	0xFF5
  2509                           prodh	equ	0xFF4
  2510                           prodl	equ	0xFF3
  2511                           postinc0	equ	0xFEE
  2512                           wreg	equ	0xFE8
  2513                           postinc2	equ	0xFDE
  2514                           postdec2	equ	0xFDD
  2515                           fsr2h	equ	0xFDA
  2516                           fsr2l	equ	0xFD9
  2517                           status	equ	0xFD8
  2518                           
  2519 ;; *************** function ___wmul *****************
  2520 ;; Defined at:
  2521 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;  multiplier      2   25[COMRAM] unsigned int 
  2524 ;;  multiplicand    2   27[COMRAM] unsigned int 
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;  product         2   29[COMRAM] unsigned int 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  2   25[COMRAM] unsigned int 
  2529 ;; Registers used:
  2530 ;;		wreg, status,2, status,0, prodl, prodh
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2536 ;;      Params:         4       0       0       0       0       0       0       0       0
  2537 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2538 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2539 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2540 ;;Total ram usage:        6 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    2
  2543 ;; This function calls:
  2544 ;;		Nothing
  2545 ;; This function is called by:
  2546 ;;		_calcPID
  2547 ;;		_getCalCNY
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           	psect	text15
  2552  00176C                     __ptext15:
  2553                           	opt stack 0
  2554  00176C                     ___wmul:
  2555                           	opt stack 25
  2556                           
  2557                           ;incstack = 0
  2558  00176C  501A               	movf	___wmul@multiplier,w,c
  2559  00176E  021C               	mulwf	___wmul@multiplicand,c
  2560  001770  CFF3 F01E          	movff	prodl,___wmul@product
  2561  001774  CFF4 F01F          	movff	prodh,___wmul@product+1
  2562  001778  501A               	movf	___wmul@multiplier,w,c
  2563  00177A  021D               	mulwf	___wmul@multiplicand+1,c
  2564  00177C  50F3               	movf	prodl,w,c
  2565  00177E  261F               	addwf	___wmul@product+1,f,c
  2566  001780  501B               	movf	___wmul@multiplier+1,w,c
  2567  001782  021C               	mulwf	___wmul@multiplicand,c
  2568  001784  50F3               	movf	prodl,w,c
  2569  001786  261F               	addwf	___wmul@product+1,f,c
  2570  001788  C01E  F01A         	movff	___wmul@product,?___wmul
  2571  00178C  C01F  F01B         	movff	___wmul@product+1,?___wmul+1
  2572  001790  0012               	return	
  2573  001792                     __end_of___wmul:
  2574                           	opt stack 0
  2575                           tblptru	equ	0xFF8
  2576                           tblptrh	equ	0xFF7
  2577                           tblptrl	equ	0xFF6
  2578                           tablat	equ	0xFF5
  2579                           prodh	equ	0xFF4
  2580                           prodl	equ	0xFF3
  2581                           postinc0	equ	0xFEE
  2582                           wreg	equ	0xFE8
  2583                           postinc2	equ	0xFDE
  2584                           postdec2	equ	0xFDD
  2585                           fsr2h	equ	0xFDA
  2586                           fsr2l	equ	0xFD9
  2587                           status	equ	0xFD8
  2588                           
  2589 ;; *************** function ___lwdiv *****************
  2590 ;; Defined at:
  2591 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;  dividend        2   18[COMRAM] unsigned int 
  2594 ;;  divisor         2   20[COMRAM] unsigned int 
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  quotient        2   22[COMRAM] unsigned int 
  2597 ;;  counter         1   24[COMRAM] unsigned char 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  2   18[COMRAM] unsigned int 
  2600 ;; Registers used:
  2601 ;;		wreg, status,2, status,0
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2607 ;;      Params:         4       0       0       0       0       0       0       0       0
  2608 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2609 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2610 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2611 ;;Total ram usage:        7 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    2
  2614 ;; This function calls:
  2615 ;;		Nothing
  2616 ;; This function is called by:
  2617 ;;		_getCalCNY
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text16
  2622  001654                     __ptext16:
  2623                           	opt stack 0
  2624  001654                     ___lwdiv:
  2625                           	opt stack 25
  2626                           
  2627                           ;incstack = 0
  2628  001654  0E00               	movlw	0
  2629  001656  6E18               	movwf	___lwdiv@quotient+1,c
  2630  001658  0E00               	movlw	0
  2631  00165A  6E17               	movwf	___lwdiv@quotient,c
  2632  00165C  5015               	movf	___lwdiv@divisor,w,c
  2633  00165E  1016               	iorwf	___lwdiv@divisor+1,w,c
  2634  001660  B4D8               	btfsc	status,2,c
  2635  001662  D01C               	goto	l664
  2636  001664  0E01               	movlw	1
  2637  001666  6E19               	movwf	___lwdiv@counter,c
  2638  001668  D004               	goto	l659
  2639  00166A  90D8               	bcf	status,0,c
  2640  00166C  3615               	rlcf	___lwdiv@divisor,f,c
  2641  00166E  3616               	rlcf	___lwdiv@divisor+1,f,c
  2642  001670  2A19               	incf	___lwdiv@counter,f,c
  2643  001672                     l659:
  2644  001672  AE16               	btfss	___lwdiv@divisor+1,7,c
  2645  001674  D7FA               	goto	l660
  2646  001676                     u1070:
  2647  001676  90D8               	bcf	status,0,c
  2648  001678  3617               	rlcf	___lwdiv@quotient,f,c
  2649  00167A  3618               	rlcf	___lwdiv@quotient+1,f,c
  2650  00167C  5015               	movf	___lwdiv@divisor,w,c
  2651  00167E  5C13               	subwf	___lwdiv@dividend,w,c
  2652  001680  5016               	movf	___lwdiv@divisor+1,w,c
  2653  001682  5814               	subwfb	___lwdiv@dividend+1,w,c
  2654  001684  A0D8               	btfss	status,0,c
  2655  001686  D005               	goto	l663
  2656  001688  5015               	movf	___lwdiv@divisor,w,c
  2657  00168A  5E13               	subwf	___lwdiv@dividend,f,c
  2658  00168C  5016               	movf	___lwdiv@divisor+1,w,c
  2659  00168E  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2660  001690  8017               	bsf	___lwdiv@quotient,0,c
  2661  001692                     l663:
  2662  001692  90D8               	bcf	status,0,c
  2663  001694  3216               	rrcf	___lwdiv@divisor+1,f,c
  2664  001696  3215               	rrcf	___lwdiv@divisor,f,c
  2665  001698  2E19               	decfsz	___lwdiv@counter,f,c
  2666  00169A  D7ED               	goto	u1070
  2667  00169C                     l664:
  2668  00169C  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2669  0016A0  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2670  0016A4  0012               	return		;funcret
  2671  0016A6                     __end_of___lwdiv:
  2672                           	opt stack 0
  2673                           tblptru	equ	0xFF8
  2674                           tblptrh	equ	0xFF7
  2675                           tblptrl	equ	0xFF6
  2676                           tablat	equ	0xFF5
  2677                           prodh	equ	0xFF4
  2678                           prodl	equ	0xFF3
  2679                           postinc0	equ	0xFEE
  2680                           wreg	equ	0xFE8
  2681                           postinc2	equ	0xFDE
  2682                           postdec2	equ	0xFDD
  2683                           fsr2h	equ	0xFDA
  2684                           fsr2l	equ	0xFD9
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function ___lldiv *****************
  2688 ;; Defined at:
  2689 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  dividend        4   18[COMRAM] unsigned long 
  2692 ;;  divisor         4   22[COMRAM] unsigned long 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  quotient        4   26[COMRAM] unsigned long 
  2695 ;;  counter         1   30[COMRAM] unsigned char 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  4   18[COMRAM] unsigned long 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2, status,0
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2705 ;;      Params:         8       0       0       0       0       0       0       0       0
  2706 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2708 ;;      Totals:        13       0       0       0       0       0       0       0       0
  2709 ;;Total ram usage:       13 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    2
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_calcPID
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text17
  2720  001436                     __ptext17:
  2721                           	opt stack 0
  2722  001436                     ___lldiv:
  2723                           	opt stack 26
  2724                           
  2725                           ;incstack = 0
  2726  001436  0E00               	movlw	0
  2727  001438  6E1B               	movwf	___lldiv@quotient,c
  2728  00143A  0E00               	movlw	0
  2729  00143C  6E1C               	movwf	___lldiv@quotient+1,c
  2730  00143E  0E00               	movlw	0
  2731  001440  6E1D               	movwf	___lldiv@quotient+2,c
  2732  001442  0E00               	movlw	0
  2733  001444  6E1E               	movwf	___lldiv@quotient+3,c
  2734  001446  5017               	movf	___lldiv@divisor,w,c
  2735  001448  1018               	iorwf	___lldiv@divisor+1,w,c
  2736  00144A  1019               	iorwf	___lldiv@divisor+2,w,c
  2737  00144C  101A               	iorwf	___lldiv@divisor+3,w,c
  2738  00144E  B4D8               	btfsc	status,2,c
  2739  001450  D02A               	goto	l611
  2740  001452  0E01               	movlw	1
  2741  001454  6E1F               	movwf	___lldiv@counter,c
  2742  001456  D006               	goto	l606
  2743  001458  90D8               	bcf	status,0,c
  2744  00145A  3617               	rlcf	___lldiv@divisor,f,c
  2745  00145C  3618               	rlcf	___lldiv@divisor+1,f,c
  2746  00145E  3619               	rlcf	___lldiv@divisor+2,f,c
  2747  001460  361A               	rlcf	___lldiv@divisor+3,f,c
  2748  001462  2A1F               	incf	___lldiv@counter,f,c
  2749  001464                     l606:
  2750  001464  AE1A               	btfss	___lldiv@divisor+3,7,c
  2751  001466  D7F8               	goto	l607
  2752  001468                     u1610:
  2753  001468  90D8               	bcf	status,0,c
  2754  00146A  361B               	rlcf	___lldiv@quotient,f,c
  2755  00146C  361C               	rlcf	___lldiv@quotient+1,f,c
  2756  00146E  361D               	rlcf	___lldiv@quotient+2,f,c
  2757  001470  361E               	rlcf	___lldiv@quotient+3,f,c
  2758  001472  5017               	movf	___lldiv@divisor,w,c
  2759  001474  5C13               	subwf	___lldiv@dividend,w,c
  2760  001476  5018               	movf	___lldiv@divisor+1,w,c
  2761  001478  5814               	subwfb	___lldiv@dividend+1,w,c
  2762  00147A  5019               	movf	___lldiv@divisor+2,w,c
  2763  00147C  5815               	subwfb	___lldiv@dividend+2,w,c
  2764  00147E  501A               	movf	___lldiv@divisor+3,w,c
  2765  001480  5816               	subwfb	___lldiv@dividend+3,w,c
  2766  001482  A0D8               	btfss	status,0,c
  2767  001484  D009               	goto	l610
  2768  001486  5017               	movf	___lldiv@divisor,w,c
  2769  001488  5E13               	subwf	___lldiv@dividend,f,c
  2770  00148A  5018               	movf	___lldiv@divisor+1,w,c
  2771  00148C  5A14               	subwfb	___lldiv@dividend+1,f,c
  2772  00148E  5019               	movf	___lldiv@divisor+2,w,c
  2773  001490  5A15               	subwfb	___lldiv@dividend+2,f,c
  2774  001492  501A               	movf	___lldiv@divisor+3,w,c
  2775  001494  5A16               	subwfb	___lldiv@dividend+3,f,c
  2776  001496  801B               	bsf	___lldiv@quotient,0,c
  2777  001498                     l610:
  2778  001498  90D8               	bcf	status,0,c
  2779  00149A  321A               	rrcf	___lldiv@divisor+3,f,c
  2780  00149C  3219               	rrcf	___lldiv@divisor+2,f,c
  2781  00149E  3218               	rrcf	___lldiv@divisor+1,f,c
  2782  0014A0  3217               	rrcf	___lldiv@divisor,f,c
  2783  0014A2  2E1F               	decfsz	___lldiv@counter,f,c
  2784  0014A4  D7E1               	goto	u1610
  2785  0014A6                     l611:
  2786  0014A6  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  2787  0014AA  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  2788  0014AE  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  2789  0014B2  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  2790  0014B6  0012               	return		;funcret
  2791  0014B8                     __end_of___lldiv:
  2792                           	opt stack 0
  2793                           tblptru	equ	0xFF8
  2794                           tblptrh	equ	0xFF7
  2795                           tblptrl	equ	0xFF6
  2796                           tablat	equ	0xFF5
  2797                           prodh	equ	0xFF4
  2798                           prodl	equ	0xFF3
  2799                           postinc0	equ	0xFEE
  2800                           wreg	equ	0xFE8
  2801                           postinc2	equ	0xFDE
  2802                           postdec2	equ	0xFDD
  2803                           fsr2h	equ	0xFDA
  2804                           fsr2l	equ	0xFD9
  2805                           status	equ	0xFD8
  2806                           
  2807 ;; *************** function ___fttol *****************
  2808 ;; Defined at:
  2809 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;  f1              3   45[COMRAM] float 
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  lval            4    1[BANK0 ] unsigned long 
  2814 ;;  exp1            1    5[BANK0 ] unsigned char 
  2815 ;;  sign1           1    0[BANK0 ] unsigned char 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  4   45[COMRAM] long 
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2825 ;;      Params:         4       0       0       0       0       0       0       0       0
  2826 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2827 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2828 ;;      Totals:         9       6       0       0       0       0       0       0       0
  2829 ;;Total ram usage:       15 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    2
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		_calcPID
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text18
  2840  000FB0                     __ptext18:
  2841                           	opt stack 0
  2842  000FB0                     ___fttol:
  2843                           	opt stack 26
  2844                           
  2845                           ;incstack = 0
  2846  000FB0  C030  F032         	movff	___fttol@f1+2,??___fttol
  2847  000FB4  6A33               	clrf	(??___fttol+1)& (0+255),c
  2848  000FB6  6A34               	clrf	(??___fttol+2)& (0+255),c
  2849  000FB8  342F               	rlcf	___fttol@f1+1,w,c
  2850  000FBA  3632               	rlcf	??___fttol& (0+255),f,c
  2851  000FBC  E301               	bnc	u2251
  2852  000FBE  8033               	bsf	(??___fttol+1)& (0+255),0,c
  2853  000FC0                     u2251:
  2854  000FC0  5032               	movf	??___fttol,w,c
  2855  000FC2  0100               	movlb	0	; () banked
  2856  000FC4  6F65               	movwf	___fttol@exp1& (0+255),b
  2857  000FC6  5165               	movf	___fttol@exp1& (0+255),w,b
  2858  000FC8  A4D8               	btfss	status,2,c
  2859  000FCA  D009               	goto	l570
  2860                           
  2861                           ; BSR set to: 0
  2862  000FCC  0E00               	movlw	0
  2863  000FCE  6E2E               	movwf	?___fttol,c
  2864  000FD0  0E00               	movlw	0
  2865  000FD2  6E2F               	movwf	?___fttol+1,c
  2866  000FD4  0E00               	movlw	0
  2867  000FD6  6E30               	movwf	?___fttol+2,c
  2868  000FD8  0E00               	movlw	0
  2869  000FDA  6E31               	movwf	?___fttol+3,c
  2870                           
  2871                           ; BSR set to: 0
  2872  000FDC  0012               	return	
  2873  000FDE                     l570:
  2874                           
  2875                           ; BSR set to: 0
  2876                           
  2877                           ; BSR set to: 0
  2878  000FDE  0E17               	movlw	23
  2879  000FE0  6E32               	movwf	??___fttol& (0+255),c
  2880  000FE2  C02E  F033         	movff	___fttol@f1,??___fttol+1
  2881  000FE6  C02F  F034         	movff	___fttol@f1+1,??___fttol+2
  2882  000FEA  C030  F035         	movff	___fttol@f1+2,??___fttol+3
  2883  000FEE  2832               	incf	??___fttol,w,c
  2884  000FF0  6E36               	movwf	(??___fttol+4)& (0+255),c
  2885  000FF2  D004               	goto	u2270
  2886  000FF4                     u2275:
  2887  000FF4  90D8               	bcf	status,0,c
  2888  000FF6  3235               	rrcf	??___fttol+3,f,c
  2889  000FF8  3234               	rrcf	??___fttol+2,f,c
  2890  000FFA  3233               	rrcf	??___fttol+1,f,c
  2891  000FFC                     u2270:
  2892  000FFC  2E36               	decfsz	(??___fttol+4)& (0+255),f,c
  2893  000FFE  D7FA               	goto	u2275
  2894  001000  5033               	movf	??___fttol+1,w,c
  2895  001002  0100               	movlb	0	; () banked
  2896  001004  6F60               	movwf	___fttol@sign1& (0+255),b
  2897                           
  2898                           ; BSR set to: 0
  2899  001006  8E2F               	bsf	___fttol@f1+1,7,c
  2900                           
  2901                           ; BSR set to: 0
  2902  001008  0EFF               	movlw	255
  2903  00100A  162E               	andwf	___fttol@f1,f,c
  2904  00100C  0EFF               	movlw	255
  2905  00100E  162F               	andwf	___fttol@f1+1,f,c
  2906  001010  0E00               	movlw	0
  2907  001012  1630               	andwf	___fttol@f1+2,f,c
  2908                           
  2909                           ; BSR set to: 0
  2910  001014  502E               	movf	___fttol@f1,w,c
  2911  001016  6F61               	movwf	___fttol@lval& (0+255),b
  2912  001018  502F               	movf	___fttol@f1+1,w,c
  2913  00101A  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  2914  00101C  5030               	movf	___fttol@f1+2,w,c
  2915  00101E  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  2916  001020  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  2917                           
  2918                           ; BSR set to: 0
  2919  001022  0E8E               	movlw	142
  2920  001024  5F65               	subwf	___fttol@exp1& (0+255),f,b
  2921                           
  2922                           ; BSR set to: 0
  2923  001026  AF65               	btfss	___fttol@exp1& (0+255),7,b
  2924  001028  D016               	goto	l572
  2925                           
  2926                           ; BSR set to: 0
  2927  00102A  5165               	movf	___fttol@exp1& (0+255),w,b
  2928  00102C  0A80               	xorlw	128
  2929  00102E  0F8F               	addlw	143
  2930  001030  B0D8               	btfsc	status,0,c
  2931  001032  D009               	goto	l573
  2932                           
  2933                           ; BSR set to: 0
  2934  001034  0E00               	movlw	0
  2935  001036  6E2E               	movwf	?___fttol,c
  2936  001038  0E00               	movlw	0
  2937  00103A  6E2F               	movwf	?___fttol+1,c
  2938  00103C  0E00               	movlw	0
  2939  00103E  6E30               	movwf	?___fttol+2,c
  2940  001040  0E00               	movlw	0
  2941  001042  6E31               	movwf	?___fttol+3,c
  2942                           
  2943                           ; BSR set to: 0
  2944  001044  0012               	return	
  2945  001046                     l573:
  2946                           
  2947                           ; BSR set to: 0
  2948                           
  2949                           ; BSR set to: 0
  2950                           
  2951                           ; BSR set to: 0
  2952  001046  90D8               	bcf	status,0,c
  2953  001048  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2954  00104A  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2955  00104C  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2956  00104E  3361               	rrcf	___fttol@lval& (0+255),f,b
  2957                           
  2958                           ; BSR set to: 0
  2959  001050  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  2960  001052  D7F9               	goto	l573
  2961                           
  2962                           ; BSR set to: 0
  2963  001054  D015               	goto	u2310
  2964  001056                     l572:
  2965                           
  2966                           ; BSR set to: 0
  2967                           
  2968                           ; BSR set to: 0
  2969  001056  0E17               	movlw	23
  2970  001058  6565               	cpfsgt	___fttol@exp1& (0+255),b
  2971  00105A  D00F               	goto	l578
  2972                           
  2973                           ; BSR set to: 0
  2974  00105C  0E00               	movlw	0
  2975  00105E  6E2E               	movwf	?___fttol,c
  2976  001060  0E00               	movlw	0
  2977  001062  6E2F               	movwf	?___fttol+1,c
  2978  001064  0E00               	movlw	0
  2979  001066  6E30               	movwf	?___fttol+2,c
  2980  001068  0E00               	movlw	0
  2981  00106A  6E31               	movwf	?___fttol+3,c
  2982                           
  2983                           ; BSR set to: 0
  2984  00106C  0012               	return	
  2985  00106E                     
  2986                           ; BSR set to: 0
  2987                           
  2988                           ; BSR set to: 0
  2989  00106E  90D8               	bcf	status,0,c
  2990  001070  3761               	rlcf	___fttol@lval& (0+255),f,b
  2991  001072  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2992  001074  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2993  001076  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2994  001078  0765               	decf	___fttol@exp1& (0+255),f,b
  2995  00107A                     l578:
  2996                           
  2997                           ; BSR set to: 0
  2998                           
  2999                           ; BSR set to: 0
  3000  00107A  5165               	movf	___fttol@exp1& (0+255),w,b
  3001  00107C  A4D8               	btfss	status,2,c
  3002  00107E  D7F7               	goto	l579
  3003  001080                     u2310:
  3004                           
  3005                           ; BSR set to: 0
  3006                           
  3007                           ; BSR set to: 0
  3008                           
  3009                           ; BSR set to: 0
  3010  001080  5160               	movf	___fttol@sign1& (0+255),w,b
  3011  001082  B4D8               	btfsc	status,2,c
  3012  001084  D008               	goto	l581
  3013                           
  3014                           ; BSR set to: 0
  3015  001086  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  3016  001088  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  3017  00108A  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  3018  00108C  6D61               	negf	___fttol@lval& (0+255),b
  3019  00108E  0E00               	movlw	0
  3020  001090  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3021  001092  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3022  001094  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3023  001096                     l581:
  3024                           
  3025                           ; BSR set to: 0
  3026                           
  3027                           ; BSR set to: 0
  3028  001096  C061  F02E         	movff	___fttol@lval,?___fttol
  3029  00109A  C062  F02F         	movff	___fttol@lval+1,?___fttol+1
  3030  00109E  C063  F030         	movff	___fttol@lval+2,?___fttol+2
  3031  0010A2  C064  F031         	movff	___fttol@lval+3,?___fttol+3
  3032  0010A6  0012               	return	
  3033  0010A8                     __end_of___fttol:
  3034                           	opt stack 0
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           prodh	equ	0xFF4
  3040                           prodl	equ	0xFF3
  3041                           postinc0	equ	0xFEE
  3042                           wreg	equ	0xFE8
  3043                           postinc2	equ	0xFDE
  3044                           postdec2	equ	0xFDD
  3045                           fsr2h	equ	0xFDA
  3046                           fsr2l	equ	0xFD9
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function ___ftmul *****************
  3050 ;; Defined at:
  3051 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  f1              3   30[COMRAM] float 
  3054 ;;  f2              3   33[COMRAM] float 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  f3_as_produc    3   40[COMRAM] unsigned um
  3057 ;;  sign            1   44[COMRAM] unsigned char 
  3058 ;;  cntr            1   43[COMRAM] unsigned char 
  3059 ;;  exp             1   39[COMRAM] unsigned char 
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  3   30[COMRAM] float 
  3062 ;; Registers used:
  3063 ;;		wreg, status,2, status,0, cstack
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3069 ;;      Params:         6       0       0       0       0       0       0       0       0
  3070 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3071 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3072 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3073 ;;Total ram usage:       15 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    3
  3076 ;; This function calls:
  3077 ;;		___ftpack
  3078 ;; This function is called by:
  3079 ;;		_calcPID
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text19
  3084  0010A8                     __ptext19:
  3085                           	opt stack 0
  3086  0010A8                     ___ftmul:
  3087                           	opt stack 25
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;incstack = 0
  3091  0010A8  C021  F025         	movff	___ftmul@f1+2,??___ftmul
  3092  0010AC  6A26               	clrf	(??___ftmul+1)& (0+255),c
  3093  0010AE  6A27               	clrf	(??___ftmul+2)& (0+255),c
  3094  0010B0  3420               	rlcf	___ftmul@f1+1,w,c
  3095  0010B2  3625               	rlcf	??___ftmul& (0+255),f,c
  3096  0010B4  E301               	bnc	u2181
  3097  0010B6  8026               	bsf	(??___ftmul+1)& (0+255),0,c
  3098  0010B8                     u2181:
  3099  0010B8  5025               	movf	??___ftmul,w,c
  3100  0010BA  6E28               	movwf	___ftmul@exp,c
  3101  0010BC  5028               	movf	___ftmul@exp,w,c
  3102  0010BE  A4D8               	btfss	status,2,c
  3103  0010C0  D007               	goto	l549
  3104  0010C2  0E00               	movlw	0
  3105  0010C4  6E1F               	movwf	?___ftmul,c
  3106  0010C6  0E00               	movlw	0
  3107  0010C8  6E20               	movwf	?___ftmul+1,c
  3108  0010CA  0E00               	movlw	0
  3109  0010CC  6E21               	movwf	?___ftmul+2,c
  3110  0010CE  0012               	return	
  3111  0010D0                     l549:
  3112  0010D0  C024  F025         	movff	___ftmul@f2+2,??___ftmul
  3113  0010D4  6A26               	clrf	(??___ftmul+1)& (0+255),c
  3114  0010D6  6A27               	clrf	(??___ftmul+2)& (0+255),c
  3115  0010D8  3423               	rlcf	___ftmul@f2+1,w,c
  3116  0010DA  3625               	rlcf	??___ftmul& (0+255),f,c
  3117  0010DC  E301               	bnc	u2201
  3118  0010DE  8026               	bsf	(??___ftmul+1)& (0+255),0,c
  3119  0010E0                     u2201:
  3120  0010E0  5025               	movf	??___ftmul,w,c
  3121  0010E2  6E2D               	movwf	___ftmul@sign,c
  3122  0010E4  502D               	movf	___ftmul@sign,w,c
  3123  0010E6  A4D8               	btfss	status,2,c
  3124  0010E8  D007               	goto	l551
  3125  0010EA  0E00               	movlw	0
  3126  0010EC  6E1F               	movwf	?___ftmul,c
  3127  0010EE  0E00               	movlw	0
  3128  0010F0  6E20               	movwf	?___ftmul+1,c
  3129  0010F2  0E00               	movlw	0
  3130  0010F4  6E21               	movwf	?___ftmul+2,c
  3131  0010F6  0012               	return	
  3132  0010F8                     l551:
  3133  0010F8  502D               	movf	___ftmul@sign,w,c
  3134  0010FA  0F7B               	addlw	123
  3135  0010FC  2628               	addwf	___ftmul@exp,f,c
  3136  0010FE  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
  3137  001102  5024               	movf	___ftmul@f2+2,w,c
  3138  001104  1A2D               	xorwf	___ftmul@sign,f,c
  3139  001106  0E80               	movlw	128
  3140  001108  162D               	andwf	___ftmul@sign,f,c
  3141  00110A  8E20               	bsf	___ftmul@f1+1,7,c
  3142  00110C  8E23               	bsf	___ftmul@f2+1,7,c
  3143  00110E  0EFF               	movlw	255
  3144  001110  1622               	andwf	___ftmul@f2,f,c
  3145  001112  0EFF               	movlw	255
  3146  001114  1623               	andwf	___ftmul@f2+1,f,c
  3147  001116  0E00               	movlw	0
  3148  001118  1624               	andwf	___ftmul@f2+2,f,c
  3149  00111A  0E00               	movlw	0
  3150  00111C  6E29               	movwf	___ftmul@f3_as_product,c
  3151  00111E  0E00               	movlw	0
  3152  001120  6E2A               	movwf	___ftmul@f3_as_product+1,c
  3153  001122  0E00               	movlw	0
  3154  001124  6E2B               	movwf	___ftmul@f3_as_product+2,c
  3155  001126  0E07               	movlw	7
  3156  001128  6E2C               	movwf	___ftmul@cntr,c
  3157  00112A  A01F               	btfss	___ftmul@f1,0,c
  3158  00112C  D006               	goto	l553
  3159  00112E  5022               	movf	___ftmul@f2,w,c
  3160  001130  2629               	addwf	___ftmul@f3_as_product,f,c
  3161  001132  5023               	movf	___ftmul@f2+1,w,c
  3162  001134  222A               	addwfc	___ftmul@f3_as_product+1,f,c
  3163  001136  5024               	movf	___ftmul@f2+2,w,c
  3164  001138  222B               	addwfc	___ftmul@f3_as_product+2,f,c
  3165  00113A                     l553:
  3166  00113A  90D8               	bcf	status,0,c
  3167  00113C  3221               	rrcf	___ftmul@f1+2,f,c
  3168  00113E  3220               	rrcf	___ftmul@f1+1,f,c
  3169  001140  321F               	rrcf	___ftmul@f1,f,c
  3170  001142  90D8               	bcf	status,0,c
  3171  001144  3622               	rlcf	___ftmul@f2,f,c
  3172  001146  3623               	rlcf	___ftmul@f2+1,f,c
  3173  001148  3624               	rlcf	___ftmul@f2+2,f,c
  3174  00114A  2E2C               	decfsz	___ftmul@cntr,f,c
  3175  00114C  D7EE               	goto	l552
  3176  00114E  0E09               	movlw	9
  3177  001150  6E2C               	movwf	___ftmul@cntr,c
  3178  001152  A01F               	btfss	___ftmul@f1,0,c
  3179  001154  D006               	goto	l556
  3180  001156  5022               	movf	___ftmul@f2,w,c
  3181  001158  2629               	addwf	___ftmul@f3_as_product,f,c
  3182  00115A  5023               	movf	___ftmul@f2+1,w,c
  3183  00115C  222A               	addwfc	___ftmul@f3_as_product+1,f,c
  3184  00115E  5024               	movf	___ftmul@f2+2,w,c
  3185  001160  222B               	addwfc	___ftmul@f3_as_product+2,f,c
  3186  001162                     l556:
  3187  001162  90D8               	bcf	status,0,c
  3188  001164  3221               	rrcf	___ftmul@f1+2,f,c
  3189  001166  3220               	rrcf	___ftmul@f1+1,f,c
  3190  001168  321F               	rrcf	___ftmul@f1,f,c
  3191  00116A  90D8               	bcf	status,0,c
  3192  00116C  322B               	rrcf	___ftmul@f3_as_product+2,f,c
  3193  00116E  322A               	rrcf	___ftmul@f3_as_product+1,f,c
  3194  001170  3229               	rrcf	___ftmul@f3_as_product,f,c
  3195  001172  2E2C               	decfsz	___ftmul@cntr,f,c
  3196  001174  D7EE               	goto	l555
  3197  001176  C029  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  3198  00117A  C02A  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3199  00117E  C02B  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3200  001182  C028  F016         	movff	___ftmul@exp,___ftpack@exp
  3201  001186  C02D  F017         	movff	___ftmul@sign,___ftpack@sign
  3202  00118A  EC32  F009         	call	___ftpack	;wreg free
  3203  00118E  C013  F01F         	movff	?___ftpack,?___ftmul
  3204  001192  C014  F020         	movff	?___ftpack+1,?___ftmul+1
  3205  001196  C015  F021         	movff	?___ftpack+2,?___ftmul+2
  3206  00119A  0012               	return	
  3207  00119C                     __end_of___ftmul:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           prodh	equ	0xFF4
  3214                           prodl	equ	0xFF3
  3215                           postinc0	equ	0xFEE
  3216                           wreg	equ	0xFE8
  3217                           postinc2	equ	0xFDE
  3218                           postdec2	equ	0xFDD
  3219                           fsr2h	equ	0xFDA
  3220                           fsr2l	equ	0xFD9
  3221                           status	equ	0xFD8
  3222                           
  3223 ;; *************** function ___ftadd *****************
  3224 ;; Defined at:
  3225 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  f1              3    6[BANK0 ] float 
  3228 ;;  f2              3    9[BANK0 ] float 
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;  exp1            1   14[BANK0 ] unsigned char 
  3231 ;;  exp2            1   13[BANK0 ] unsigned char 
  3232 ;;  sign            1   12[BANK0 ] unsigned char 
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  3    6[BANK0 ] float 
  3235 ;; Registers used:
  3236 ;;		wreg, status,2, status,0, cstack
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3242 ;;      Params:         0       6       0       0       0       0       0       0       0
  3243 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3244 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3245 ;;      Totals:         3       9       0       0       0       0       0       0       0
  3246 ;;Total ram usage:       12 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    3
  3249 ;; This function calls:
  3250 ;;		___ftpack
  3251 ;; This function is called by:
  3252 ;;		_calcPID
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           	psect	text20
  3257  000C9C                     __ptext20:
  3258                           	opt stack 0
  3259  000C9C                     ___ftadd:
  3260                           	opt stack 25
  3261                           
  3262                           ;incstack = 0
  3263  000C9C  C068  F037         	movff	___ftadd@f1+2,??___ftadd
  3264  000CA0  6A38               	clrf	(??___ftadd+1)& (0+255),c
  3265  000CA2  6A39               	clrf	(??___ftadd+2)& (0+255),c
  3266  000CA4  0100               	movlb	0	; () banked
  3267  000CA6  3567               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  3268  000CA8  3637               	rlcf	??___ftadd& (0+255),f,c
  3269  000CAA  E301               	bnc	u1971
  3270  000CAC  8038               	bsf	(??___ftadd+1)& (0+255),0,c
  3271  000CAE                     u1971:
  3272  000CAE  5037               	movf	??___ftadd,w,c
  3273  000CB0  6F6E               	movwf	___ftadd@exp1& (0+255),b
  3274  000CB2  C06B  F037         	movff	___ftadd@f2+2,??___ftadd
  3275  000CB6  6A38               	clrf	(??___ftadd+1)& (0+255),c
  3276  000CB8  6A39               	clrf	(??___ftadd+2)& (0+255),c
  3277  000CBA  356A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  3278  000CBC  3637               	rlcf	??___ftadd& (0+255),f,c
  3279  000CBE  E301               	bnc	u1981
  3280  000CC0  8038               	bsf	(??___ftadd+1)& (0+255),0,c
  3281  000CC2                     u1981:
  3282  000CC2  5037               	movf	??___ftadd,w,c
  3283  000CC4  6F6D               	movwf	___ftadd@exp2& (0+255),b
  3284                           
  3285                           ; BSR set to: 0
  3286  000CC6  516E               	movf	___ftadd@exp1& (0+255),w,b
  3287  000CC8  B4D8               	btfsc	status,2,c
  3288  000CCA  D00B               	goto	u2010
  3289                           
  3290                           ; BSR set to: 0
  3291  000CCC  516D               	movf	___ftadd@exp2& (0+255),w,b
  3292  000CCE  5D6E               	subwf	___ftadd@exp1& (0+255),w,b
  3293  000CD0  B0D8               	btfsc	status,0,c
  3294  000CD2  D00E               	goto	l501
  3295                           
  3296                           ; BSR set to: 0
  3297  000CD4  516E               	movf	___ftadd@exp1& (0+255),w,b
  3298  000CD6  0800               	sublw	0
  3299  000CD8  256D               	addwf	___ftadd@exp2& (0+255),w,b
  3300  000CDA  6E37               	movwf	??___ftadd& (0+255),c
  3301  000CDC  0E18               	movlw	24
  3302  000CDE  6437               	cpfsgt	??___ftadd,c
  3303  000CE0  D007               	goto	l501
  3304  000CE2                     u2010:
  3305                           
  3306                           ; BSR set to: 0
  3307  000CE2  C069  F066         	movff	___ftadd@f2,?___ftadd
  3308  000CE6  C06A  F067         	movff	___ftadd@f2+1,?___ftadd+1
  3309  000CEA  C06B  F068         	movff	___ftadd@f2+2,?___ftadd+2
  3310  000CEE  0012               	return	
  3311  000CF0                     l501:
  3312                           
  3313                           ; BSR set to: 0
  3314                           
  3315                           ; BSR set to: 0
  3316  000CF0  516D               	movf	___ftadd@exp2& (0+255),w,b
  3317  000CF2  B4D8               	btfsc	status,2,c
  3318  000CF4  D00B               	goto	u2040
  3319                           
  3320                           ; BSR set to: 0
  3321  000CF6  516E               	movf	___ftadd@exp1& (0+255),w,b
  3322  000CF8  5D6D               	subwf	___ftadd@exp2& (0+255),w,b
  3323  000CFA  B0D8               	btfsc	status,0,c
  3324  000CFC  D00E               	goto	l505
  3325                           
  3326                           ; BSR set to: 0
  3327  000CFE  516D               	movf	___ftadd@exp2& (0+255),w,b
  3328  000D00  0800               	sublw	0
  3329  000D02  256E               	addwf	___ftadd@exp1& (0+255),w,b
  3330  000D04  6E37               	movwf	??___ftadd& (0+255),c
  3331  000D06  0E18               	movlw	24
  3332  000D08  6437               	cpfsgt	??___ftadd,c
  3333  000D0A  D007               	goto	l505
  3334  000D0C                     u2040:
  3335                           
  3336                           ; BSR set to: 0
  3337  000D0C  C066  F066         	movff	___ftadd@f1,?___ftadd
  3338  000D10  C067  F067         	movff	___ftadd@f1+1,?___ftadd+1
  3339  000D14  C068  F068         	movff	___ftadd@f1+2,?___ftadd+2
  3340  000D18  0012               	return	
  3341  000D1A                     l505:
  3342                           
  3343                           ; BSR set to: 0
  3344                           
  3345                           ; BSR set to: 0
  3346  000D1A  0E06               	movlw	6
  3347  000D1C  6F6C               	movwf	___ftadd@sign& (0+255),b
  3348                           
  3349                           ; BSR set to: 0
  3350  000D1E  BF68               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  3351                           
  3352                           ; BSR set to: 0
  3353  000D20  8F6C               	bsf	___ftadd@sign& (0+255),7,b
  3354                           
  3355                           ; BSR set to: 0
  3356                           
  3357                           ; BSR set to: 0
  3358  000D22  BF6B               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  3359                           
  3360                           ; BSR set to: 0
  3361  000D24  8D6C               	bsf	___ftadd@sign& (0+255),6,b
  3362                           
  3363                           ; BSR set to: 0
  3364  000D26  8F67               	bsf	(___ftadd@f1+1)& (0+255),7,b
  3365                           
  3366                           ; BSR set to: 0
  3367  000D28  0EFF               	movlw	255
  3368  000D2A  1766               	andwf	___ftadd@f1& (0+255),f,b
  3369  000D2C  0EFF               	movlw	255
  3370  000D2E  1767               	andwf	(___ftadd@f1+1)& (0+255),f,b
  3371  000D30  0E00               	movlw	0
  3372  000D32  1768               	andwf	(___ftadd@f1+2)& (0+255),f,b
  3373  000D34  8F6A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  3374                           
  3375                           ; BSR set to: 0
  3376  000D36  0EFF               	movlw	255
  3377  000D38  1769               	andwf	___ftadd@f2& (0+255),f,b
  3378  000D3A  0EFF               	movlw	255
  3379  000D3C  176A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  3380  000D3E  0E00               	movlw	0
  3381  000D40  176B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  3382                           
  3383                           ; BSR set to: 0
  3384  000D42  516D               	movf	___ftadd@exp2& (0+255),w,b
  3385  000D44  5D6E               	subwf	___ftadd@exp1& (0+255),w,b
  3386  000D46  B0D8               	btfsc	status,0,c
  3387  000D48  D01B               	goto	l510
  3388  000D4A                     u2070:
  3389                           
  3390                           ; BSR set to: 0
  3391                           
  3392                           ; BSR set to: 0
  3393  000D4A  90D8               	bcf	status,0,c
  3394  000D4C  3769               	rlcf	___ftadd@f2& (0+255),f,b
  3395  000D4E  376A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  3396  000D50  376B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  3397  000D52  076D               	decf	___ftadd@exp2& (0+255),f,b
  3398                           
  3399                           ; BSR set to: 0
  3400  000D54  516E               	movf	___ftadd@exp1& (0+255),w,b
  3401  000D56  196D               	xorwf	___ftadd@exp2& (0+255),w,b
  3402  000D58  B4D8               	btfsc	status,2,c
  3403  000D5A  D00D               	goto	l515
  3404                           
  3405                           ; BSR set to: 0
  3406  000D5C  076C               	decf	___ftadd@sign& (0+255),f,b
  3407  000D5E  C06C  F037         	movff	___ftadd@sign,??___ftadd
  3408  000D62  0E07               	movlw	7
  3409  000D64  1637               	andwf	??___ftadd,f,c
  3410  000D66  B4D8               	btfsc	status,2,c
  3411  000D68  D006               	goto	l515
  3412  000D6A  D7EF               	goto	u2070
  3413  000D6C                     
  3414                           ; BSR set to: 0
  3415                           
  3416                           ; BSR set to: 0
  3417  000D6C  90D8               	bcf	status,0,c
  3418  000D6E  3368               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  3419  000D70  3367               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  3420  000D72  3366               	rrcf	___ftadd@f1& (0+255),f,b
  3421  000D74  2B6E               	incf	___ftadd@exp1& (0+255),f,b
  3422  000D76                     l515:
  3423                           
  3424                           ; BSR set to: 0
  3425                           
  3426                           ; BSR set to: 0
  3427  000D76  516D               	movf	___ftadd@exp2& (0+255),w,b
  3428  000D78  196E               	xorwf	___ftadd@exp1& (0+255),w,b
  3429  000D7A  B4D8               	btfsc	status,2,c
  3430  000D7C  D01F               	goto	u2140
  3431  000D7E  D7F6               	goto	l516
  3432  000D80                     l510:
  3433                           
  3434                           ; BSR set to: 0
  3435                           
  3436                           ; BSR set to: 0
  3437  000D80  516E               	movf	___ftadd@exp1& (0+255),w,b
  3438  000D82  5D6D               	subwf	___ftadd@exp2& (0+255),w,b
  3439  000D84  B0D8               	btfsc	status,0,c
  3440  000D86  D01A               	goto	u2140
  3441  000D88                     u2110:
  3442                           
  3443                           ; BSR set to: 0
  3444                           
  3445                           ; BSR set to: 0
  3446  000D88  90D8               	bcf	status,0,c
  3447  000D8A  3766               	rlcf	___ftadd@f1& (0+255),f,b
  3448  000D8C  3767               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  3449  000D8E  3768               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  3450  000D90  076E               	decf	___ftadd@exp1& (0+255),f,b
  3451                           
  3452                           ; BSR set to: 0
  3453  000D92  516E               	movf	___ftadd@exp1& (0+255),w,b
  3454  000D94  196D               	xorwf	___ftadd@exp2& (0+255),w,b
  3455  000D96  B4D8               	btfsc	status,2,c
  3456  000D98  D00D               	goto	l524
  3457                           
  3458                           ; BSR set to: 0
  3459  000D9A  076C               	decf	___ftadd@sign& (0+255),f,b
  3460  000D9C  C06C  F037         	movff	___ftadd@sign,??___ftadd
  3461  000DA0  0E07               	movlw	7
  3462  000DA2  1637               	andwf	??___ftadd,f,c
  3463  000DA4  B4D8               	btfsc	status,2,c
  3464  000DA6  D006               	goto	l524
  3465  000DA8  D7EF               	goto	u2110
  3466  000DAA                     
  3467                           ; BSR set to: 0
  3468                           
  3469                           ; BSR set to: 0
  3470  000DAA  90D8               	bcf	status,0,c
  3471  000DAC  336B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  3472  000DAE  336A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  3473  000DB0  3369               	rrcf	___ftadd@f2& (0+255),f,b
  3474  000DB2  2B6D               	incf	___ftadd@exp2& (0+255),f,b
  3475  000DB4                     l524:
  3476                           
  3477                           ; BSR set to: 0
  3478                           
  3479                           ; BSR set to: 0
  3480  000DB4  516D               	movf	___ftadd@exp2& (0+255),w,b
  3481  000DB6  196E               	xorwf	___ftadd@exp1& (0+255),w,b
  3482  000DB8  A4D8               	btfss	status,2,c
  3483  000DBA  D7F7               	goto	l525
  3484  000DBC                     u2140:
  3485                           
  3486                           ; BSR set to: 0
  3487                           
  3488                           ; BSR set to: 0
  3489                           
  3490                           ; BSR set to: 0
  3491  000DBC  AF6C               	btfss	___ftadd@sign& (0+255),7,b
  3492  000DBE  D00C               	goto	l527
  3493                           
  3494                           ; BSR set to: 0
  3495  000DC0  0EFF               	movlw	255
  3496  000DC2  1B66               	xorwf	___ftadd@f1& (0+255),f,b
  3497  000DC4  0EFF               	movlw	255
  3498  000DC6  1B67               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  3499  000DC8  0EFF               	movlw	255
  3500  000DCA  1B68               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  3501  000DCC  0E01               	movlw	1
  3502  000DCE  2766               	addwf	___ftadd@f1& (0+255),f,b
  3503  000DD0  0E00               	movlw	0
  3504  000DD2  2367               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  3505  000DD4  0E00               	movlw	0
  3506  000DD6  2368               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  3507  000DD8                     l527:
  3508                           
  3509                           ; BSR set to: 0
  3510  000DD8  AD6C               	btfss	___ftadd@sign& (0+255),6,b
  3511  000DDA  D00C               	goto	l528
  3512                           
  3513                           ; BSR set to: 0
  3514  000DDC  0EFF               	movlw	255
  3515  000DDE  1B69               	xorwf	___ftadd@f2& (0+255),f,b
  3516  000DE0  0EFF               	movlw	255
  3517  000DE2  1B6A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3518  000DE4  0EFF               	movlw	255
  3519  000DE6  1B6B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3520  000DE8  0E01               	movlw	1
  3521  000DEA  2769               	addwf	___ftadd@f2& (0+255),f,b
  3522  000DEC  0E00               	movlw	0
  3523  000DEE  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3524  000DF0  0E00               	movlw	0
  3525  000DF2  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3526  000DF4                     l528:
  3527                           
  3528                           ; BSR set to: 0
  3529                           
  3530                           ; BSR set to: 0
  3531  000DF4  0E00               	movlw	0
  3532  000DF6  6F6C               	movwf	___ftadd@sign& (0+255),b
  3533                           
  3534                           ; BSR set to: 0
  3535  000DF8  5166               	movf	___ftadd@f1& (0+255),w,b
  3536  000DFA  2769               	addwf	___ftadd@f2& (0+255),f,b
  3537  000DFC  5167               	movf	(___ftadd@f1+1)& (0+255),w,b
  3538  000DFE  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3539  000E00  5168               	movf	(___ftadd@f1+2)& (0+255),w,b
  3540  000E02  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3541                           
  3542                           ; BSR set to: 0
  3543  000E04  AF6B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3544  000E06  D00E               	goto	l529
  3545                           
  3546                           ; BSR set to: 0
  3547  000E08  0EFF               	movlw	255
  3548  000E0A  1B69               	xorwf	___ftadd@f2& (0+255),f,b
  3549  000E0C  0EFF               	movlw	255
  3550  000E0E  1B6A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3551  000E10  0EFF               	movlw	255
  3552  000E12  1B6B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3553  000E14  0E01               	movlw	1
  3554  000E16  2769               	addwf	___ftadd@f2& (0+255),f,b
  3555  000E18  0E00               	movlw	0
  3556  000E1A  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3557  000E1C  0E00               	movlw	0
  3558  000E1E  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3559                           
  3560                           ; BSR set to: 0
  3561  000E20  0E01               	movlw	1
  3562  000E22  6F6C               	movwf	___ftadd@sign& (0+255),b
  3563  000E24                     l529:
  3564                           
  3565                           ; BSR set to: 0
  3566                           
  3567                           ; BSR set to: 0
  3568  000E24  C069  F013         	movff	___ftadd@f2,___ftpack@arg
  3569  000E28  C06A  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  3570  000E2C  C06B  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  3571  000E30  C06E  F016         	movff	___ftadd@exp1,___ftpack@exp
  3572  000E34  C06C  F017         	movff	___ftadd@sign,___ftpack@sign
  3573  000E38  EC32  F009         	call	___ftpack	;wreg free
  3574  000E3C  C013  F066         	movff	?___ftpack,?___ftadd
  3575  000E40  C014  F067         	movff	?___ftpack+1,?___ftadd+1
  3576  000E44  C015  F068         	movff	?___ftpack+2,?___ftadd+2
  3577  000E48  0012               	return	
  3578  000E4A                     __end_of___ftadd:
  3579                           	opt stack 0
  3580                           tblptru	equ	0xFF8
  3581                           tblptrh	equ	0xFF7
  3582                           tblptrl	equ	0xFF6
  3583                           tablat	equ	0xFF5
  3584                           prodh	equ	0xFF4
  3585                           prodl	equ	0xFF3
  3586                           postinc0	equ	0xFEE
  3587                           wreg	equ	0xFE8
  3588                           postinc2	equ	0xFDE
  3589                           postdec2	equ	0xFDD
  3590                           fsr2h	equ	0xFDA
  3591                           fsr2l	equ	0xFD9
  3592                           status	equ	0xFD8
  3593                           
  3594 ;; *************** function ___awtoft *****************
  3595 ;; Defined at:
  3596 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  c               2   26[COMRAM] int 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  sign            1   29[COMRAM] unsigned char 
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  3   26[COMRAM] float 
  3603 ;; Registers used:
  3604 ;;		wreg, status,2, status,0, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3610 ;;      Params:         3       0       0       0       0       0       0       0       0
  3611 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3612 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3613 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3614 ;;Total ram usage:        4 bytes
  3615 ;; Hardware stack levels used:    1
  3616 ;; Hardware stack levels required when called:    3
  3617 ;; This function calls:
  3618 ;;		___ftpack
  3619 ;; This function is called by:
  3620 ;;		_calcPID
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text21
  3625  0016A6                     __ptext21:
  3626                           	opt stack 0
  3627  0016A6                     ___awtoft:
  3628                           	opt stack 25
  3629                           
  3630                           ;incstack = 0
  3631  0016A6  0E00               	movlw	0
  3632  0016A8  6E1E               	movwf	___awtoft@sign,c
  3633  0016AA  AE1C               	btfss	___awtoft@c+1,7,c
  3634  0016AC  D006               	goto	l451
  3635  0016AE  6C1B               	negf	___awtoft@c,c
  3636  0016B0  1E1C               	comf	___awtoft@c+1,f,c
  3637  0016B2  B0D8               	btfsc	status,0,c
  3638  0016B4  2A1C               	incf	___awtoft@c+1,f,c
  3639  0016B6  0E01               	movlw	1
  3640  0016B8  6E1E               	movwf	___awtoft@sign,c
  3641  0016BA                     l451:
  3642  0016BA  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  3643  0016BE  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  3644  0016C2  6A15               	clrf	___ftpack@arg+2,c
  3645  0016C4  0E8E               	movlw	142
  3646  0016C6  6E16               	movwf	___ftpack@exp,c
  3647  0016C8  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  3648  0016CC  EC32  F009         	call	___ftpack	;wreg free
  3649  0016D0  C013  F01B         	movff	?___ftpack,?___awtoft
  3650  0016D4  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  3651  0016D8  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  3652  0016DC  0012               	return	
  3653  0016DE                     __end_of___awtoft:
  3654                           	opt stack 0
  3655                           tblptru	equ	0xFF8
  3656                           tblptrh	equ	0xFF7
  3657                           tblptrl	equ	0xFF6
  3658                           tablat	equ	0xFF5
  3659                           prodh	equ	0xFF4
  3660                           prodl	equ	0xFF3
  3661                           postinc0	equ	0xFEE
  3662                           wreg	equ	0xFE8
  3663                           postinc2	equ	0xFDE
  3664                           postdec2	equ	0xFDD
  3665                           fsr2h	equ	0xFDA
  3666                           fsr2l	equ	0xFD9
  3667                           status	equ	0xFD8
  3668                           
  3669 ;; *************** function ___ftpack *****************
  3670 ;; Defined at:
  3671 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  arg             3   18[COMRAM] unsigned um
  3674 ;;  exp             1   21[COMRAM] unsigned char 
  3675 ;;  sign            1   22[COMRAM] unsigned char 
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  3   18[COMRAM] float 
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3687 ;;      Params:         5       0       0       0       0       0       0       0       0
  3688 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3689 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3690 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3691 ;;Total ram usage:        8 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    2
  3694 ;; This function calls:
  3695 ;;		Nothing
  3696 ;; This function is called by:
  3697 ;;		___awtoft
  3698 ;;		___ftadd
  3699 ;;		___ftmul
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text22
  3704  001264                     __ptext22:
  3705                           	opt stack 0
  3706  001264                     ___ftpack:
  3707                           	opt stack 25
  3708                           
  3709                           ;incstack = 0
  3710  001264  5016               	movf	___ftpack@exp,w,c
  3711  001266  B4D8               	btfsc	status,2,c
  3712  001268  D005               	goto	u1900
  3713  00126A  5013               	movf	___ftpack@arg,w,c
  3714  00126C  1014               	iorwf	___ftpack@arg+1,w,c
  3715  00126E  1015               	iorwf	___ftpack@arg+2,w,c
  3716  001270  A4D8               	btfss	status,2,c
  3717  001272  D00C               	goto	l470
  3718  001274                     u1900:
  3719  001274  0E00               	movlw	0
  3720  001276  6E13               	movwf	?___ftpack,c
  3721  001278  0E00               	movlw	0
  3722  00127A  6E14               	movwf	?___ftpack+1,c
  3723  00127C  0E00               	movlw	0
  3724  00127E  6E15               	movwf	?___ftpack+2,c
  3725  001280  0012               	return	
  3726  001282  2A16               	incf	___ftpack@exp,f,c
  3727  001284  90D8               	bcf	status,0,c
  3728  001286  3215               	rrcf	___ftpack@arg+2,f,c
  3729  001288  3214               	rrcf	___ftpack@arg+1,f,c
  3730  00128A  3213               	rrcf	___ftpack@arg,f,c
  3731  00128C                     l470:
  3732  00128C  0E00               	movlw	0
  3733  00128E  1413               	andwf	___ftpack@arg,w,c
  3734  001290  6E18               	movwf	??___ftpack& (0+255),c
  3735  001292  0E00               	movlw	0
  3736  001294  1414               	andwf	___ftpack@arg+1,w,c
  3737  001296  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3738  001298  0EFE               	movlw	254
  3739  00129A  1415               	andwf	___ftpack@arg+2,w,c
  3740  00129C  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3741  00129E  5018               	movf	??___ftpack,w,c
  3742  0012A0  1019               	iorwf	??___ftpack+1,w,c
  3743  0012A2  101A               	iorwf	??___ftpack+2,w,c
  3744  0012A4  B4D8               	btfsc	status,2,c
  3745  0012A6  D00C               	goto	l473
  3746  0012A8  D7EC               	goto	l471
  3747  0012AA  2A16               	incf	___ftpack@exp,f,c
  3748  0012AC  0E01               	movlw	1
  3749  0012AE  2613               	addwf	___ftpack@arg,f,c
  3750  0012B0  0E00               	movlw	0
  3751  0012B2  2214               	addwfc	___ftpack@arg+1,f,c
  3752  0012B4  0E00               	movlw	0
  3753  0012B6  2215               	addwfc	___ftpack@arg+2,f,c
  3754  0012B8  90D8               	bcf	status,0,c
  3755  0012BA  3215               	rrcf	___ftpack@arg+2,f,c
  3756  0012BC  3214               	rrcf	___ftpack@arg+1,f,c
  3757  0012BE  3213               	rrcf	___ftpack@arg,f,c
  3758  0012C0                     l473:
  3759  0012C0  0E00               	movlw	0
  3760  0012C2  1413               	andwf	___ftpack@arg,w,c
  3761  0012C4  6E18               	movwf	??___ftpack& (0+255),c
  3762  0012C6  0E00               	movlw	0
  3763  0012C8  1414               	andwf	___ftpack@arg+1,w,c
  3764  0012CA  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3765  0012CC  0EFF               	movlw	255
  3766  0012CE  1415               	andwf	___ftpack@arg+2,w,c
  3767  0012D0  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3768  0012D2  5018               	movf	??___ftpack,w,c
  3769  0012D4  1019               	iorwf	??___ftpack+1,w,c
  3770  0012D6  101A               	iorwf	??___ftpack+2,w,c
  3771  0012D8  B4D8               	btfsc	status,2,c
  3772  0012DA  D006               	goto	l476
  3773  0012DC  D7E6               	goto	l474
  3774  0012DE  0616               	decf	___ftpack@exp,f,c
  3775  0012E0  90D8               	bcf	status,0,c
  3776  0012E2  3613               	rlcf	___ftpack@arg,f,c
  3777  0012E4  3614               	rlcf	___ftpack@arg+1,f,c
  3778  0012E6  3615               	rlcf	___ftpack@arg+2,f,c
  3779  0012E8                     l476:
  3780  0012E8  BE14               	btfsc	___ftpack@arg+1,7,c
  3781  0012EA  D003               	goto	u1940
  3782  0012EC  0E02               	movlw	2
  3783  0012EE  6016               	cpfslt	___ftpack@exp,c
  3784  0012F0  D7F6               	goto	l477
  3785  0012F2                     u1940:
  3786  0012F2  A016               	btfss	___ftpack@exp,0,c
  3787  0012F4  9E14               	bcf	___ftpack@arg+1,7,c
  3788  0012F6  90D8               	bcf	status,0,c
  3789  0012F8  3216               	rrcf	___ftpack@exp,f,c
  3790  0012FA  5016               	movf	___ftpack@exp,w,c
  3791  0012FC  1215               	iorwf	___ftpack@arg+2,f,c
  3792  0012FE  5017               	movf	___ftpack@sign,w,c
  3793  001300  A4D8               	btfss	status,2,c
  3794  001302  8E15               	bsf	___ftpack@arg+2,7,c
  3795  001304  C013  F013         	movff	___ftpack@arg,?___ftpack
  3796  001308  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  3797  00130C  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  3798  001310  0012               	return	
  3799  001312                     __end_of___ftpack:
  3800                           	opt stack 0
  3801                           tblptru	equ	0xFF8
  3802                           tblptrh	equ	0xFF7
  3803                           tblptrl	equ	0xFF6
  3804                           tablat	equ	0xFF5
  3805                           prodh	equ	0xFF4
  3806                           prodl	equ	0xFF3
  3807                           postinc0	equ	0xFEE
  3808                           wreg	equ	0xFE8
  3809                           postinc2	equ	0xFDE
  3810                           postdec2	equ	0xFDD
  3811                           fsr2h	equ	0xFDA
  3812                           fsr2l	equ	0xFD9
  3813                           status	equ	0xFD8
  3814                           
  3815 ;; *************** function ___awmod *****************
  3816 ;; Defined at:
  3817 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  dividend        2   18[COMRAM] int 
  3820 ;;  divisor         2   20[COMRAM] int 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  sign            1   23[COMRAM] unsigned char 
  3823 ;;  counter         1   22[COMRAM] unsigned char 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  2   18[COMRAM] int 
  3826 ;; Registers used:
  3827 ;;		wreg, status,2, status,0
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3833 ;;      Params:         4       0       0       0       0       0       0       0       0
  3834 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3835 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3836 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3837 ;;Total ram usage:        6 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    2
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_loop
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           	psect	text23
  3848  001538                     __ptext23:
  3849                           	opt stack 0
  3850  001538                     ___awmod:
  3851                           	opt stack 27
  3852                           
  3853                           ;incstack = 0
  3854  001538  0E00               	movlw	0
  3855  00153A  6E18               	movwf	___awmod@sign,c
  3856  00153C  AE14               	btfss	___awmod@dividend+1,7,c
  3857  00153E  D006               	goto	l436
  3858  001540  6C13               	negf	___awmod@dividend,c
  3859  001542  1E14               	comf	___awmod@dividend+1,f,c
  3860  001544  B0D8               	btfsc	status,0,c
  3861  001546  2A14               	incf	___awmod@dividend+1,f,c
  3862  001548  0E01               	movlw	1
  3863  00154A  6E18               	movwf	___awmod@sign,c
  3864  00154C                     l436:
  3865  00154C  AE16               	btfss	___awmod@divisor+1,7,c
  3866  00154E  D004               	goto	l437
  3867  001550  6C15               	negf	___awmod@divisor,c
  3868  001552  1E16               	comf	___awmod@divisor+1,f,c
  3869  001554  B0D8               	btfsc	status,0,c
  3870  001556  2A16               	incf	___awmod@divisor+1,f,c
  3871  001558                     l437:
  3872  001558  5015               	movf	___awmod@divisor,w,c
  3873  00155A  1016               	iorwf	___awmod@divisor+1,w,c
  3874  00155C  B4D8               	btfsc	status,2,c
  3875  00155E  D018               	goto	l444
  3876  001560  0E01               	movlw	1
  3877  001562  6E17               	movwf	___awmod@counter,c
  3878  001564  D004               	goto	l439
  3879  001566  90D8               	bcf	status,0,c
  3880  001568  3615               	rlcf	___awmod@divisor,f,c
  3881  00156A  3616               	rlcf	___awmod@divisor+1,f,c
  3882  00156C  2A17               	incf	___awmod@counter,f,c
  3883  00156E                     l439:
  3884  00156E  AE16               	btfss	___awmod@divisor+1,7,c
  3885  001570  D7FA               	goto	l440
  3886  001572                     u1720:
  3887  001572  5015               	movf	___awmod@divisor,w,c
  3888  001574  5C13               	subwf	___awmod@dividend,w,c
  3889  001576  5016               	movf	___awmod@divisor+1,w,c
  3890  001578  5814               	subwfb	___awmod@dividend+1,w,c
  3891  00157A  A0D8               	btfss	status,0,c
  3892  00157C  D004               	goto	l443
  3893  00157E  5015               	movf	___awmod@divisor,w,c
  3894  001580  5E13               	subwf	___awmod@dividend,f,c
  3895  001582  5016               	movf	___awmod@divisor+1,w,c
  3896  001584  5A14               	subwfb	___awmod@dividend+1,f,c
  3897  001586                     l443:
  3898  001586  90D8               	bcf	status,0,c
  3899  001588  3216               	rrcf	___awmod@divisor+1,f,c
  3900  00158A  3215               	rrcf	___awmod@divisor,f,c
  3901  00158C  2E17               	decfsz	___awmod@counter,f,c
  3902  00158E  D7F1               	goto	u1720
  3903  001590                     l444:
  3904  001590  5018               	movf	___awmod@sign,w,c
  3905  001592  B4D8               	btfsc	status,2,c
  3906  001594  D004               	goto	l445
  3907  001596  6C13               	negf	___awmod@dividend,c
  3908  001598  1E14               	comf	___awmod@dividend+1,f,c
  3909  00159A  B0D8               	btfsc	status,0,c
  3910  00159C  2A14               	incf	___awmod@dividend+1,f,c
  3911  00159E                     l445:
  3912  00159E  C013  F013         	movff	___awmod@dividend,?___awmod
  3913  0015A2  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  3914  0015A6  0012               	return	
  3915  0015A8                     __end_of___awmod:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           postinc0	equ	0xFEE
  3924                           wreg	equ	0xFE8
  3925                           postinc2	equ	0xFDE
  3926                           postdec2	equ	0xFDD
  3927                           fsr2h	equ	0xFDA
  3928                           fsr2l	equ	0xFD9
  3929                           status	equ	0xFD8
  3930                           
  3931 ;; *************** function _initUI *****************
  3932 ;; Defined at:
  3933 ;;		line 18 in file "ui.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;		None
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  1    wreg      void 
  3940 ;; Registers used:
  3941 ;;		None
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3947 ;;      Params:         0       0       0       0       0       0       0       0       0
  3948 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3949 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3950 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3951 ;;Total ram usage:        0 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    2
  3954 ;; This function calls:
  3955 ;;		Nothing
  3956 ;; This function is called by:
  3957 ;;		_main
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text24
  3962  0017F4                     __ptext24:
  3963                           	opt stack 0
  3964  0017F4                     _initUI:
  3965                           	opt stack 28
  3966                           
  3967                           ;ui.c: 19: TRISBbits.RB1 = 0;
  3968                           
  3969                           ;incstack = 0
  3970  0017F4  9293               	bcf	3987,1,c	;volatile
  3971                           
  3972                           ;ui.c: 20: LATBbits.LB1 = 0;
  3973  0017F6  928A               	bcf	3978,1,c	;volatile
  3974                           
  3975                           ;ui.c: 22: TRISBbits.RB2 = 0;
  3976  0017F8  9493               	bcf	3987,2,c	;volatile
  3977                           
  3978                           ;ui.c: 23: LATBbits.LB2 = 0;
  3979  0017FA  948A               	bcf	3978,2,c	;volatile
  3980                           
  3981                           ;ui.c: 25: TRISBbits.RB3 = 0;
  3982  0017FC  9693               	bcf	3987,3,c	;volatile
  3983                           
  3984                           ;ui.c: 26: LATBbits.LB3 = 0;
  3985  0017FE  968A               	bcf	3978,3,c	;volatile
  3986                           
  3987                           ;ui.c: 28: TRISBbits.RB0 = 1;
  3988  001800  8093               	bsf	3987,0,c	;volatile
  3989                           
  3990                           ;ui.c: 29: TRISBbits.RB5 = 1;
  3991  001802  8A93               	bsf	3987,5,c	;volatile
  3992  001804  0012               	return		;funcret
  3993  001806                     __end_of_initUI:
  3994                           	opt stack 0
  3995                           tblptru	equ	0xFF8
  3996                           tblptrh	equ	0xFF7
  3997                           tblptrl	equ	0xFF6
  3998                           tablat	equ	0xFF5
  3999                           prodh	equ	0xFF4
  4000                           prodl	equ	0xFF3
  4001                           postinc0	equ	0xFEE
  4002                           wreg	equ	0xFE8
  4003                           postinc2	equ	0xFDE
  4004                           postdec2	equ	0xFDD
  4005                           fsr2h	equ	0xFDA
  4006                           fsr2l	equ	0xFD9
  4007                           status	equ	0xFD8
  4008                           
  4009 ;; *************** function _initTimer *****************
  4010 ;; Defined at:
  4011 ;;		line 21 in file "timer.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;		None
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;		None
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, status,2
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4025 ;;      Params:         0       0       0       0       0       0       0       0       0
  4026 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4027 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4028 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4029 ;;Total ram usage:        0 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    2
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_main
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text25
  4040  001848                     __ptext25:
  4041                           	opt stack 0
  4042  001848                     _initTimer:
  4043                           	opt stack 28
  4044                           
  4045                           ;timer.c: 22: INTCONbits.TMR0IF = 0;
  4046                           
  4047                           ;incstack = 0
  4048  001848  94F2               	bcf	intcon,2,c	;volatile
  4049                           
  4050                           ;timer.c: 23: INTCONbits.TMR0IE = 1;
  4051  00184A  8AF2               	bsf	intcon,5,c	;volatile
  4052                           
  4053                           ;timer.c: 24: T0CON = 0xC4;
  4054  00184C  0EC4               	movlw	196
  4055  00184E  6ED5               	movwf	4053,c	;volatile
  4056  001850  0012               	return		;funcret
  4057  001852                     __end_of_initTimer:
  4058                           	opt stack 0
  4059                           tblptru	equ	0xFF8
  4060                           tblptrh	equ	0xFF7
  4061                           tblptrl	equ	0xFF6
  4062                           tablat	equ	0xFF5
  4063                           prodh	equ	0xFF4
  4064                           prodl	equ	0xFF3
  4065                           intcon	equ	0xFF2
  4066                           postinc0	equ	0xFEE
  4067                           wreg	equ	0xFE8
  4068                           postinc2	equ	0xFDE
  4069                           postdec2	equ	0xFDD
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function _initMotors *****************
  4075 ;; Defined at:
  4076 ;;		line 14 in file "motors.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;		None
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      void 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4090 ;;      Params:         0       0       0       0       0       0       0       0       0
  4091 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4092 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4093 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4094 ;;Total ram usage:        0 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    2
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_main
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text26
  4105  0016DE                     __ptext26:
  4106                           	opt stack 0
  4107  0016DE                     _initMotors:
  4108                           	opt stack 28
  4109                           
  4110                           ;motors.c: 15: TRISCbits.TRISC0 = 0;
  4111                           
  4112                           ;incstack = 0
  4113  0016DE  9094               	bcf	3988,0,c	;volatile
  4114                           
  4115                           ;motors.c: 16: TRISCbits.TRISC6 = 0;
  4116  0016E0  9C94               	bcf	3988,6,c	;volatile
  4117                           
  4118                           ;motors.c: 18: LATCbits.LATC6 = 0;
  4119  0016E2  9C8B               	bcf	3979,6,c	;volatile
  4120                           
  4121                           ;motors.c: 19: LATCbits.LATC0 = 0;
  4122  0016E4  908B               	bcf	3979,0,c	;volatile
  4123                           
  4124                           ;motors.c: 21: TRISCbits.TRISC1 = 0;
  4125  0016E6  9294               	bcf	3988,1,c	;volatile
  4126                           
  4127                           ;motors.c: 22: TRISCbits.TRISC2 = 0;
  4128  0016E8  9494               	bcf	3988,2,c	;volatile
  4129                           
  4130                           ;motors.c: 24: PR2 = 249;
  4131  0016EA  0EF9               	movlw	249
  4132  0016EC  6ECB               	movwf	4043,c	;volatile
  4133                           
  4134                           ;motors.c: 25: CCPR1L = 0;
  4135  0016EE  0E00               	movlw	0
  4136  0016F0  6EBE               	movwf	4030,c	;volatile
  4137                           
  4138                           ;motors.c: 26: CCPR2L = 0;
  4139  0016F2  0E00               	movlw	0
  4140  0016F4  6EBB               	movwf	4027,c	;volatile
  4141                           
  4142                           ;motors.c: 27: CCP1CONbits.DC1B = 0;
  4143  0016F6  0ECF               	movlw	-49
  4144  0016F8  16BD               	andwf	4029,f,c	;volatile
  4145                           
  4146                           ;motors.c: 28: CCP2CONbits.DC2B = 0;
  4147  0016FA  0ECF               	movlw	-49
  4148  0016FC  16BA               	andwf	4026,f,c	;volatile
  4149                           
  4150                           ;motors.c: 29: T2CON = 0x05;
  4151  0016FE  0E05               	movlw	5
  4152  001700  6ECA               	movwf	4042,c	;volatile
  4153                           
  4154                           ;motors.c: 30: CCP1CONbits.CCP1M = 0xF;
  4155  001702  80BD               	bsf	4029,0,c	;volatile
  4156  001704  82BD               	bsf	4029,1,c	;volatile
  4157  001706  84BD               	bsf	4029,2,c	;volatile
  4158  001708  86BD               	bsf	4029,3,c	;volatile
  4159                           
  4160                           ;motors.c: 31: CCP2CONbits.CCP2M = 0xF;
  4161  00170A  80BA               	bsf	4026,0,c	;volatile
  4162  00170C  82BA               	bsf	4026,1,c	;volatile
  4163  00170E  84BA               	bsf	4026,2,c	;volatile
  4164  001710  86BA               	bsf	4026,3,c	;volatile
  4165  001712  0012               	return		;funcret
  4166  001714                     __end_of_initMotors:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           prodh	equ	0xFF4
  4173                           prodl	equ	0xFF3
  4174                           intcon	equ	0xFF2
  4175                           postinc0	equ	0xFEE
  4176                           wreg	equ	0xFE8
  4177                           postinc2	equ	0xFDE
  4178                           postdec2	equ	0xFDD
  4179                           fsr2h	equ	0xFDA
  4180                           fsr2l	equ	0xFD9
  4181                           status	equ	0xFD8
  4182                           
  4183 ;; *************** function _initInterrupts *****************
  4184 ;; Defined at:
  4185 ;;		line 82 in file "main.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      void 
  4192 ;; Registers used:
  4193 ;;		None
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4199 ;;      Params:         0       0       0       0       0       0       0       0       0
  4200 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4201 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4202 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4203 ;;Total ram usage:        0 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    2
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_main
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           	psect	text27
  4214  001852                     __ptext27:
  4215                           	opt stack 0
  4216  001852                     _initInterrupts:
  4217                           	opt stack 28
  4218                           
  4219                           ;main.c: 83: INTCONbits.PEIE = 1;
  4220                           
  4221                           ;incstack = 0
  4222  001852  8CF2               	bsf	intcon,6,c	;volatile
  4223                           
  4224                           ;main.c: 84: INTCONbits.GIE = 1;
  4225  001854  8EF2               	bsf	intcon,7,c	;volatile
  4226  001856  0012               	return		;funcret
  4227  001858                     __end_of_initInterrupts:
  4228                           	opt stack 0
  4229                           tblptru	equ	0xFF8
  4230                           tblptrh	equ	0xFF7
  4231                           tblptrl	equ	0xFF6
  4232                           tablat	equ	0xFF5
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           intcon	equ	0xFF2
  4236                           postinc0	equ	0xFEE
  4237                           wreg	equ	0xFE8
  4238                           postinc2	equ	0xFDE
  4239                           postdec2	equ	0xFDD
  4240                           fsr2h	equ	0xFDA
  4241                           fsr2l	equ	0xFD9
  4242                           status	equ	0xFD8
  4243                           
  4244 ;; *************** function _initCal *****************
  4245 ;; Defined at:
  4246 ;;		line 11 in file "calibration.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  i               2   18[COMRAM] int 
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      void 
  4253 ;; Registers used:
  4254 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4260 ;;      Params:         0       0       0       0       0       0       0       0       0
  4261 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4262 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4263 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4264 ;;Total ram usage:        2 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    2
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_main
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text28
  4275  001600                     __ptext28:
  4276                           	opt stack 0
  4277  001600                     _initCal:
  4278                           	opt stack 28
  4279                           
  4280                           ;calibration.c: 12: for(int i = 0; i < 5; i++){
  4281                           
  4282                           ;incstack = 0
  4283  001600  0E00               	movlw	0
  4284  001602  6E14               	movwf	initCal@i+1,c
  4285  001604  0E00               	movlw	0
  4286  001606  6E13               	movwf	initCal@i,c
  4287  001608                     l2035:
  4288  001608  BE14               	btfsc	initCal@i+1,7,c
  4289  00160A  D006               	goto	l231
  4290  00160C  5014               	movf	initCal@i+1,w,c
  4291  00160E  E121               	bnz	l233
  4292  001610  0E05               	movlw	5
  4293  001612  5C13               	subwf	initCal@i,w,c
  4294  001614  B0D8               	btfsc	status,0,c
  4295  001616  0012               	return	
  4296  001618                     l231:
  4297                           
  4298                           ;calibration.c: 13: mins[i] = 1023;
  4299  001618  90D8               	bcf	status,0,c
  4300  00161A  3413               	rlcf	initCal@i,w,c
  4301  00161C  6ED9               	movwf	fsr2l,c
  4302  00161E  3414               	rlcf	initCal@i+1,w,c
  4303  001620  6EDA               	movwf	fsr2h,c
  4304  001622  0E3C               	movlw	low _mins
  4305  001624  26D9               	addwf	fsr2l,f,c
  4306  001626  0E00               	movlw	high _mins
  4307  001628  22DA               	addwfc	fsr2h,f,c
  4308  00162A  0EFF               	movlw	255
  4309  00162C  6EDE               	movwf	postinc2,c
  4310  00162E  0E03               	movlw	3
  4311  001630  6EDD               	movwf	postdec2,c
  4312                           
  4313                           ;calibration.c: 14: maxs[i] = 0;
  4314  001632  90D8               	bcf	status,0,c
  4315  001634  3413               	rlcf	initCal@i,w,c
  4316  001636  6ED9               	movwf	fsr2l,c
  4317  001638  3414               	rlcf	initCal@i+1,w,c
  4318  00163A  6EDA               	movwf	fsr2h,c
  4319  00163C  0E97               	movlw	low _maxs
  4320  00163E  26D9               	addwf	fsr2l,f,c
  4321  001640  0E00               	movlw	high _maxs
  4322  001642  22DA               	addwfc	fsr2h,f,c
  4323  001644  0E00               	movlw	0
  4324  001646  6EDE               	movwf	postinc2,c
  4325  001648  0E00               	movlw	0
  4326  00164A  6EDD               	movwf	postdec2,c
  4327  00164C  4A13               	infsnz	initCal@i,f,c
  4328  00164E  2A14               	incf	initCal@i+1,f,c
  4329  001650  D7DB               	goto	l2035
  4330  001652                     l233:
  4331  001652  0012               	return		;funcret
  4332  001654                     __end_of_initCal:
  4333                           	opt stack 0
  4334                           tblptru	equ	0xFF8
  4335                           tblptrh	equ	0xFF7
  4336                           tblptrl	equ	0xFF6
  4337                           tablat	equ	0xFF5
  4338                           prodh	equ	0xFF4
  4339                           prodl	equ	0xFF3
  4340                           intcon	equ	0xFF2
  4341                           postinc0	equ	0xFEE
  4342                           wreg	equ	0xFE8
  4343                           postinc2	equ	0xFDE
  4344                           postdec2	equ	0xFDD
  4345                           fsr2h	equ	0xFDA
  4346                           fsr2l	equ	0xFD9
  4347                           status	equ	0xFD8
  4348                           
  4349 ;; *************** function _initCNY *****************
  4350 ;; Defined at:
  4351 ;;		line 46 in file "CNY.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;		None
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;		None
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      void 
  4358 ;; Registers used:
  4359 ;;		wreg, status,2
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4365 ;;      Params:         0       0       0       0       0       0       0       0       0
  4366 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4367 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4368 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4369 ;;Total ram usage:        0 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    2
  4372 ;; This function calls:
  4373 ;;		Nothing
  4374 ;; This function is called by:
  4375 ;;		_main
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	text29
  4380  0017E0                     __ptext29:
  4381                           	opt stack 0
  4382  0017E0                     _initCNY:
  4383                           	opt stack 28
  4384                           
  4385                           ;CNY.c: 47: TRISAbits.RA5 = 1;
  4386                           
  4387                           ;incstack = 0
  4388  0017E0  8A92               	bsf	3986,5,c	;volatile
  4389                           
  4390                           ;CNY.c: 48: TRISAbits.RA3 = 1;
  4391  0017E2  8692               	bsf	3986,3,c	;volatile
  4392                           
  4393                           ;CNY.c: 49: TRISAbits.RA2 = 1;
  4394  0017E4  8492               	bsf	3986,2,c	;volatile
  4395                           
  4396                           ;CNY.c: 50: TRISAbits.RA1 = 1;
  4397  0017E6  8292               	bsf	3986,1,c	;volatile
  4398                           
  4399                           ;CNY.c: 51: TRISAbits.RA0 = 1;
  4400  0017E8  8092               	bsf	3986,0,c	;volatile
  4401                           
  4402                           ;CNY.c: 52: ADCON1 = 0x0A;
  4403  0017EA  0E0A               	movlw	10
  4404  0017EC  6EC1               	movwf	4033,c	;volatile
  4405                           
  4406                           ;CNY.c: 53: ADCON2 = 0xA5;
  4407  0017EE  0EA5               	movlw	165
  4408  0017F0  6EC0               	movwf	4032,c	;volatile
  4409  0017F2  0012               	return		;funcret
  4410  0017F4                     __end_of_initCNY:
  4411                           	opt stack 0
  4412                           tblptru	equ	0xFF8
  4413                           tblptrh	equ	0xFF7
  4414                           tblptrl	equ	0xFF6
  4415                           tablat	equ	0xFF5
  4416                           prodh	equ	0xFF4
  4417                           prodl	equ	0xFF3
  4418                           intcon	equ	0xFF2
  4419                           postinc0	equ	0xFEE
  4420                           wreg	equ	0xFE8
  4421                           postinc2	equ	0xFDE
  4422                           postdec2	equ	0xFDD
  4423                           fsr2h	equ	0xFDA
  4424                           fsr2l	equ	0xFD9
  4425                           status	equ	0xFD8
  4426                           
  4427 ;; *************** function _ISR *****************
  4428 ;; Defined at:
  4429 ;;		line 95 in file "main.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;		None
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;		None
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      void 
  4436 ;; Registers used:
  4437 ;;		wreg, status,2, status,0, cstack
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4443 ;;      Params:         0       0       0       0       0       0       0       0       0
  4444 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4445 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4446 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4447 ;;Total ram usage:       18 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    1
  4450 ;; This function calls:
  4451 ;;		_cnyInterrupt
  4452 ;;		_timerInterrupt
  4453 ;; This function is called by:
  4454 ;;		Interrupt level 2
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           	psect	intcode
  4459  000008                     __pintcode:
  4460                           	opt stack 0
  4461  000008                     _ISR:
  4462                           	opt stack 25
  4463                           
  4464                           ;incstack = 0
  4465  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4466  00000A  ED89  F009         	call	int_func,f	;refresh shadow registers
  4467                           tblptru	equ	0xFF8
  4468                           tblptrh	equ	0xFF7
  4469                           tblptrl	equ	0xFF6
  4470                           tablat	equ	0xFF5
  4471                           prodh	equ	0xFF4
  4472                           prodl	equ	0xFF3
  4473                           intcon	equ	0xFF2
  4474                           postinc0	equ	0xFEE
  4475                           wreg	equ	0xFE8
  4476                           postinc2	equ	0xFDE
  4477                           postdec2	equ	0xFDD
  4478                           fsr2h	equ	0xFDA
  4479                           fsr2l	equ	0xFD9
  4480                           status	equ	0xFD8
  4481                           
  4482                           	psect	intcode_body
  4483  001312                     __pintcode_body:
  4484                           	opt stack 25
  4485  001312                     int_func:
  4486                           	opt stack 25
  4487  001312  0006               	pop		; remove dummy address from shadow register refresh
  4488  001314  CFFA F001          	movff	pclath,??_ISR
  4489  001318  CFFB F002          	movff	pclatu,??_ISR+1
  4490  00131C  CFE9 F003          	movff	fsr0l,??_ISR+2
  4491  001320  CFEA F004          	movff	fsr0h,??_ISR+3
  4492  001324  CFE1 F005          	movff	fsr1l,??_ISR+4
  4493  001328  CFE2 F006          	movff	fsr1h,??_ISR+5
  4494  00132C  CFD9 F007          	movff	fsr2l,??_ISR+6
  4495  001330  CFDA F008          	movff	fsr2h,??_ISR+7
  4496  001334  CFF3 F009          	movff	prodl,??_ISR+8
  4497  001338  CFF4 F00A          	movff	prodh,??_ISR+9
  4498  00133C  CFF6 F00B          	movff	tblptrl,??_ISR+10
  4499  001340  CFF7 F00C          	movff	tblptrh,??_ISR+11
  4500  001344  CFF8 F00D          	movff	tblptru,??_ISR+12
  4501  001348  CFF5 F00E          	movff	tablat,??_ISR+13
  4502  00134C  C04D  F00F         	movff	btemp,??_ISR+14
  4503  001350  C04E  F010         	movff	btemp+1,??_ISR+15
  4504  001354  C04F  F011         	movff	btemp+2,??_ISR+16
  4505  001358  C050  F012         	movff	btemp+3,??_ISR+17
  4506                           
  4507                           ;main.c: 96: timerInterrupt();
  4508  00135C  EC8A  F00B         	call	_timerInterrupt	;wreg free
  4509                           
  4510                           ;main.c: 97: cnyInterrupt();
  4511  001360  EC2C  F00C         	call	_cnyInterrupt	;wreg free
  4512  001364  C012  F050         	movff	??_ISR+17,btemp+3
  4513  001368  C011  F04F         	movff	??_ISR+16,btemp+2
  4514  00136C  C010  F04E         	movff	??_ISR+15,btemp+1
  4515  001370  C00F  F04D         	movff	??_ISR+14,btemp
  4516  001374  C00E  FFF5         	movff	??_ISR+13,tablat
  4517  001378  C00D  FFF8         	movff	??_ISR+12,tblptru
  4518  00137C  C00C  FFF7         	movff	??_ISR+11,tblptrh
  4519  001380  C00B  FFF6         	movff	??_ISR+10,tblptrl
  4520  001384  C00A  FFF4         	movff	??_ISR+9,prodh
  4521  001388  C009  FFF3         	movff	??_ISR+8,prodl
  4522  00138C  C008  FFDA         	movff	??_ISR+7,fsr2h
  4523  001390  C007  FFD9         	movff	??_ISR+6,fsr2l
  4524  001394  C006  FFE2         	movff	??_ISR+5,fsr1h
  4525  001398  C005  FFE1         	movff	??_ISR+4,fsr1l
  4526  00139C  C004  FFEA         	movff	??_ISR+3,fsr0h
  4527  0013A0  C003  FFE9         	movff	??_ISR+2,fsr0l
  4528  0013A4  C002  FFFB         	movff	??_ISR+1,pclatu
  4529  0013A8  C001  FFFA         	movff	??_ISR,pclath
  4530  0013AC  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4531  0013AE  0011               	retfie		f
  4532  0013B0                     __end_of_ISR:
  4533                           	opt stack 0
  4534                           pclatu	equ	0xFFB
  4535                           pclath	equ	0xFFA
  4536                           tblptru	equ	0xFF8
  4537                           tblptrh	equ	0xFF7
  4538                           tblptrl	equ	0xFF6
  4539                           tablat	equ	0xFF5
  4540                           prodh	equ	0xFF4
  4541                           prodl	equ	0xFF3
  4542                           intcon	equ	0xFF2
  4543                           postinc0	equ	0xFEE
  4544                           fsr0h	equ	0xFEA
  4545                           fsr0l	equ	0xFE9
  4546                           wreg	equ	0xFE8
  4547                           fsr1h	equ	0xFE2
  4548                           fsr1l	equ	0xFE1
  4549                           postinc2	equ	0xFDE
  4550                           postdec2	equ	0xFDD
  4551                           fsr2h	equ	0xFDA
  4552                           fsr2l	equ	0xFD9
  4553                           status	equ	0xFD8
  4554                           
  4555 ;; *************** function _timerInterrupt *****************
  4556 ;; Defined at:
  4557 ;;		line 11 in file "timer.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;		None
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;		None
  4562 ;; Return value:  Size  Location     Type
  4563 ;;                  1    wreg      void 
  4564 ;; Registers used:
  4565 ;;		wreg, status,2, status,0
  4566 ;; Tracked objects:
  4567 ;;		On entry : 0/0
  4568 ;;		On exit  : 0/0
  4569 ;;		Unchanged: 0/0
  4570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4571 ;;      Params:         0       0       0       0       0       0       0       0       0
  4572 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4573 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4574 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4575 ;;Total ram usage:        0 bytes
  4576 ;; Hardware stack levels used:    1
  4577 ;; This function calls:
  4578 ;;		Nothing
  4579 ;; This function is called by:
  4580 ;;		_ISR
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           	psect	text31
  4585  001714                     __ptext31:
  4586                           	opt stack 0
  4587  001714                     _timerInterrupt:
  4588                           	opt stack 25
  4589                           
  4590                           ;timer.c: 12: if(!INTCONbits.TMR0IF) return;
  4591                           
  4592                           ;incstack = 0
  4593  001714  A4F2               	btfss	intcon,2,c	;volatile
  4594  001716  0012               	return	
  4595                           
  4596                           ;timer.c: 13: fractionCounter += 680;
  4597  001718  0EA8               	movlw	168
  4598  00171A  264A               	addwf	_fractionCounter,f,c
  4599  00171C  0E02               	movlw	2
  4600  00171E  224B               	addwfc	_fractionCounter+1,f,c
  4601                           
  4602                           ;timer.c: 14: if(1000 <= fractionCounter){
  4603  001720  0EE8               	movlw	232
  4604  001722  5C4A               	subwf	_fractionCounter,w,c
  4605  001724  0E03               	movlw	3
  4606  001726  584B               	subwfb	_fractionCounter+1,w,c
  4607  001728  A0D8               	btfss	status,0,c
  4608  00172A  D00A               	goto	i2l81
  4609                           
  4610                           ;timer.c: 15: fractionCounter -= 1000;
  4611  00172C  0EE8               	movlw	232
  4612  00172E  5E4A               	subwf	_fractionCounter,f,c
  4613  001730  0E03               	movlw	3
  4614  001732  5A4B               	subwfb	_fractionCounter+1,f,c
  4615                           
  4616                           ;timer.c: 16: millisCounter++;
  4617  001734  0E01               	movlw	1
  4618  001736  2646               	addwf	_millisCounter,f,c
  4619  001738  0E00               	movlw	0
  4620  00173A  2247               	addwfc	_millisCounter+1,f,c
  4621  00173C  2248               	addwfc	_millisCounter+2,f,c
  4622  00173E  2249               	addwfc	_millisCounter+3,f,c
  4623  001740                     i2l81:
  4624                           
  4625                           ;timer.c: 17: }
  4626                           ;timer.c: 18: INTCONbits.TMR0IF = 0;
  4627  001740  94F2               	bcf	intcon,2,c	;volatile
  4628  001742  0012               	return		;funcret
  4629  001744                     __end_of_timerInterrupt:
  4630                           	opt stack 0
  4631                           pclatu	equ	0xFFB
  4632                           pclath	equ	0xFFA
  4633                           tblptru	equ	0xFF8
  4634                           tblptrh	equ	0xFF7
  4635                           tblptrl	equ	0xFF6
  4636                           tablat	equ	0xFF5
  4637                           prodh	equ	0xFF4
  4638                           prodl	equ	0xFF3
  4639                           intcon	equ	0xFF2
  4640                           postinc0	equ	0xFEE
  4641                           fsr0h	equ	0xFEA
  4642                           fsr0l	equ	0xFE9
  4643                           wreg	equ	0xFE8
  4644                           fsr1h	equ	0xFE2
  4645                           fsr1l	equ	0xFE1
  4646                           postinc2	equ	0xFDE
  4647                           postdec2	equ	0xFDD
  4648                           fsr2h	equ	0xFDA
  4649                           fsr2l	equ	0xFD9
  4650                           status	equ	0xFD8
  4651                           
  4652 ;; *************** function _cnyInterrupt *****************
  4653 ;; Defined at:
  4654 ;;		line 45 in file "CNY.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;		None
  4657 ;; Auto vars:     Size  Location     Type
  4658 ;;		None
  4659 ;; Return value:  Size  Location     Type
  4660 ;;                  1    wreg      void 
  4661 ;; Registers used:
  4662 ;;		None
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4668 ;;      Params:         0       0       0       0       0       0       0       0       0
  4669 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4670 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4671 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4672 ;;Total ram usage:        0 bytes
  4673 ;; Hardware stack levels used:    1
  4674 ;; This function calls:
  4675 ;;		Nothing
  4676 ;; This function is called by:
  4677 ;;		_ISR
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           	psect	text32
  4682  001858                     __ptext32:
  4683                           	opt stack 0
  4684  001858                     _cnyInterrupt:
  4685                           	opt stack 25
  4686                           
  4687                           ;incstack = 0
  4688  001858  0012               	return		;funcret
  4689  00185A                     __end_of_cnyInterrupt:
  4690                           	opt stack 0
  4691                           pclatu	equ	0xFFB
  4692                           pclath	equ	0xFFA
  4693                           tblptru	equ	0xFF8
  4694                           tblptrh	equ	0xFF7
  4695                           tblptrl	equ	0xFF6
  4696                           tablat	equ	0xFF5
  4697                           prodh	equ	0xFF4
  4698                           prodl	equ	0xFF3
  4699                           intcon	equ	0xFF2
  4700                           postinc0	equ	0xFEE
  4701                           fsr0h	equ	0xFEA
  4702                           fsr0l	equ	0xFE9
  4703                           wreg	equ	0xFE8
  4704                           fsr1h	equ	0xFE2
  4705                           fsr1l	equ	0xFE1
  4706                           postinc2	equ	0xFDE
  4707                           postdec2	equ	0xFDD
  4708                           fsr2h	equ	0xFDA
  4709                           fsr2l	equ	0xFD9
  4710                           status	equ	0xFD8
  4711                           pclatu	equ	0xFFB
  4712                           pclath	equ	0xFFA
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           intcon	equ	0xFF2
  4720                           postinc0	equ	0xFEE
  4721                           fsr0h	equ	0xFEA
  4722                           fsr0l	equ	0xFE9
  4723                           wreg	equ	0xFE8
  4724                           fsr1h	equ	0xFE2
  4725                           fsr1l	equ	0xFE1
  4726                           postinc2	equ	0xFDE
  4727                           postdec2	equ	0xFDD
  4728                           fsr2h	equ	0xFDA
  4729                           fsr2l	equ	0xFD9
  4730                           status	equ	0xFD8
  4731                           
  4732                           	psect	rparam
  4733  0000                     pclatu	equ	0xFFB
  4734                           pclath	equ	0xFFA
  4735                           tblptru	equ	0xFF8
  4736                           tblptrh	equ	0xFF7
  4737                           tblptrl	equ	0xFF6
  4738                           tablat	equ	0xFF5
  4739                           prodh	equ	0xFF4
  4740                           prodl	equ	0xFF3
  4741                           intcon	equ	0xFF2
  4742                           postinc0	equ	0xFEE
  4743                           fsr0h	equ	0xFEA
  4744                           fsr0l	equ	0xFE9
  4745                           wreg	equ	0xFE8
  4746                           fsr1h	equ	0xFE2
  4747                           fsr1l	equ	0xFE1
  4748                           postinc2	equ	0xFDE
  4749                           postdec2	equ	0xFDD
  4750                           fsr2h	equ	0xFDA
  4751                           fsr2l	equ	0xFD9
  4752                           status	equ	0xFD8
  4753                           
  4754                           	psect	temp
  4755  00004D                     btemp:
  4756                           	opt stack 0
  4757  00004D                     	ds	1
  4758  0000                     int$flags	set	btemp
  4759  0000                     wtemp6	set	btemp+1
  4760                           pclatu	equ	0xFFB
  4761                           pclath	equ	0xFFA
  4762                           tblptru	equ	0xFF8
  4763                           tblptrh	equ	0xFF7
  4764                           tblptrl	equ	0xFF6
  4765                           tablat	equ	0xFF5
  4766                           prodh	equ	0xFF4
  4767                           prodl	equ	0xFF3
  4768                           intcon	equ	0xFF2
  4769                           postinc0	equ	0xFEE
  4770                           fsr0h	equ	0xFEA
  4771                           fsr0l	equ	0xFE9
  4772                           wreg	equ	0xFE8
  4773                           fsr1h	equ	0xFE2
  4774                           fsr1l	equ	0xFE1
  4775                           postinc2	equ	0xFDE
  4776                           postdec2	equ	0xFDD
  4777                           fsr2h	equ	0xFDA
  4778                           fsr2l	equ	0xFD9
  4779                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      76
    BANK0           160     55      72
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           244      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _loop->_calcPID
    _setMotors->_setLMotor
    _setMotors->_setRMotor
    _setLEDs->_setLEDG
    _setLEDs->_setLEDR
    _setLEDs->_setLEDY
    _calibrateCNY->___awmod
    _calcPID->___ftadd
    _getCalCNY->___wmul
    ___wmul->___lwdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___ftadd->___fttol
    ___awtoft->___ftpack
    ___awtoft->___ftpack

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_loop
    _loop->_calcPID
    _calcPID->___ftadd
    ___ftadd->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19465
                            _initCNY
                            _initCal
                     _initInterrupts
                         _initMotors
                          _initTimer
                             _initUI
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                10    10      0   19375
                                             45 BANK0     10    10      0
                            ___awmod
                            _calcPID
                       _calibrateCNY
                            _getBTN1
                            _getBTN2
                            _setLEDs
                          _setMotors
 ---------------------------------------------------------------------------------
 (2) _setMotors                                            4     0      4    1530
                                             22 COMRAM     4     0      4
                          _setLMotor
                          _setRMotor
 ---------------------------------------------------------------------------------
 (3) _setRMotor                                            4     2      2     211
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _setLMotor                                            4     2      2     211
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _setLEDs                                              3     1      2     740
                                             19 COMRAM     3     1      2
                            _setLEDG
                            _setLEDR
                            _setLEDY
 ---------------------------------------------------------------------------------
 (3) _setLEDY                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _setLEDR                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _setLEDG                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getBTN2                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getBTN1                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calibrateCNY                                        10     8      2     487
                                             24 COMRAM    10     8      2
                            ___awmod (ARG)
                             _getCNY
 ---------------------------------------------------------------------------------
 (2) _calcPID                                             32    23      9   15724
                                             57 COMRAM     2     2      0
                                             15 BANK0     30    21      9
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                            ___lldiv
                             ___wmul
                          _getCalCNY
 ---------------------------------------------------------------------------------
 (3) _getCalCNY                                           14    12      2    1451
                                             31 COMRAM    14    12      2
                            ___lwdiv
                             ___wmul
                             _getCNY
 ---------------------------------------------------------------------------------
 (3) _getCNY                                               5     3      2      44
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     615
                                             25 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     551
                                             45 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4001
                                             30 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4698
                                             54 COMRAM     3     3      0
                                              6 BANK0      9     3      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3326
                                             26 COMRAM     4     1      3
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2833
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initCal                                              2     2      0      90
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initCNY                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
                       _cnyInterrupt
                     _timerInterrupt
 ---------------------------------------------------------------------------------
 (6) _timerInterrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _cnyInterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initCNY
   _initCal
   _initInterrupts
   _initMotors
   _initTimer
   _initUI
   _loop
     ___awmod
     _calcPID
       ___awtoft
         ___ftpack
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___lldiv
       ___wmul
         ___lwdiv (ARG)
       _getCalCNY
         ___lwdiv
         ___wmul
           ___lwdiv (ARG)
         _getCNY
     _calibrateCNY
       ___awmod (ARG)
       _getCNY (ARG)
     _getBTN1
     _getBTN2
     _setLEDs
       _setLEDG
       _setLEDR
       _setLEDY
     _setMotors
       _setLMotor
       _setRMotor

 _ISR (ROOT)
   _cnyInterrupt
   _timerInterrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3F3      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK3            F4      0       0      11        0.0%
BANK3               F4      0       0      12        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     37      48       6       45.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     3B      4C       1       80.9%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      94       3        0.0%
DATA                 0      0      94       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jul 29 14:49:57 2018

                     l23 15BA                       l26 15E2                       l62 13E4  
                     l63 13FC                       l56 14E6                       l64 1408  
                     l57 14FE                       l58 150A                       _kd 0806  
                     _ki 0809                       _kp 080C      ___wmul@multiplicand 001C  
            __CFG_BORV$0 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000             ___ftadd@exp1 006E  
           ___ftadd@exp2 006D             ___ftadd@sign 006C      calibrateCNY@channel 0019  
                    l140 0854                      l231 1618                      l151 0894  
                    l152 08D0                      l233 1652                      l129 0AC0  
                    l241 1240                      l250 0E9A                      l138 0A6E  
                    l154 0926                      l146 0868                      l243 1248  
                    l147 088A                      l139 0814                      l252 0EEE  
                    l156 096A                      l501 0CF0                      l237 11E4  
                    l157 0A22                      l510 0D80                      l254 0EF6  
                    l239 11EC                      l167 17AA                      l440 1566  
                    l248 0E92                      l505 0D1A                      l610 1498  
                    l443 1586                      l451 16BA                      l515 0D76  
                    l611 14A6                      l444 1590                      l436 154C  
                    l524 0DB4                      l516 0D6C                      l445 159E  
                    l437 1558                      l525 0DAA                      l470 128C  
                    l606 1464                      l439 156E                      l471 1282  
                    l527 0DD8                      l551 10F8                      l607 1458  
                    l528 0DF4                      l552 112A                      l473 12C0  
                    l529 0E24                      l553 113A                      l474 12AA  
                    l570 0FDE                      l555 1152                      l476 12E8  
                    l556 1162                      l572 1056                      l660 166A  
                    l477 12DE                      l549 10D0                      l581 1096  
                    l573 1046                      l663 1692                      l664 169C  
                    l578 107A                      l579 106E                      l659 1672  
           __CFG_CPB$OFF 000000                      _PR2 000FCB             __CFG_CPD$OFF 000000  
                    _ISR 0008             __CFG_BOR$OFF 000000             ___awmod@sign 0018  
                    wreg 000FE8             __CFG_LVP$OFF 000000                     ?_ISR 0001  
           __CFG_WDT$OFF 000000                     l2035 1608                     l1531 1838  
                   l1535 1844                     l2347 0916                     l2293 0B32  
                   l2277 0AB0           ??_cnyInterrupt 0001                     u2010 0CE2  
                   u1108 14C4                     u1140 13BA                     u2110 0D88  
                   u1070 1676                     u1215 181E                     u2040 0D0C  
                   u1216 1820                     u2201 10E0                     u1225 1810  
                   u1226 1812                     u1090 14C2                     u1235 182C  
                   u2140 0DBC                     u1236 182E                     u2070 0D4A  
                   u2310 1080                     u1158 13BC                     u1610 1468  
                   u2410 08F8                     u2251 0FC0                     u2340 0B32  
                   u2181 10B8                     u2270 0FFC                     u2430 094E  
                   u2350 0842                     u1720 1572                     u2275 0FF4  
                   u1900 1274                     u1940 12F2                     u1971 0CAE  
                   u1981 0CC2                     i2l81 1740             __CFG_WDTPS$1 000000  
                   _main 1792             ___ftpack@arg 0013                     _maxs 0097  
                   _mins 003C                     _loop 0812             ___ftpack@exp 0016  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 004D                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000             _calcPID$1247 007D  
           _calcPID$1248 007F             _calcPID$1249 0078             ___ftmul@cntr 002C  
           ___param_bank 000000             ___ftmul@sign 002D         ??_timerInterrupt 0001  
         setMotors@right 0019                    ??_ISR 0001             ___fttol@exp1 0065  
           ___fttol@lval 0061            __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0001                    ?_loop 0001          __end_of___ftadd 0E4A  
        __end_of___awmod 15A8          __end_of___lldiv 14B8          __end_of___ftmul 119C  
                  _T0CON 000FD5          __end_of___fttol 10A8                    _T2CON 000FCA  
        __end_of_calcPID 0C9C          __end_of___lwdiv 16A6            __CFG_USBDIV$2 000000  
        __end_of_getBTN1 1848          __end_of_getBTN2 183C            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initCNY 17F4           __CFG_EBTRB$OFF 000000            ___awtoft@sign 001E  
        __end_of_initCal 1654          __end_of_setLEDG 1830          __end_of_setLEDR 1822  
        __end_of_setLEDY 1814          __end_of_setLEDs 17E0            ___ftpack@sign 0017  
         __pbitbssCOMRAM 0260                    pclath 000FFA                    tablat 000FF5  
                  loop@i 0093                    status 000FD8                    wtemp6 004E  
         __CFG_PBADEN$ON 000000           __CFG_MCLRE$OFF 000000          __initialization 1744  
           __end_of_main 17B0             __end_of_loop 0A86                   ??_main 003C  
          ___fttol@sign1 0060                   ??_loop 008D            __activetblptr 000002  
  __size_of_calibrateCNY 00C8                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   _CCPR1L 000FBE  
                 _CCPR2L 000FBB         __end_of___awtoft 16DE         __end_of___ftpack 1312  
        _fractionCounter 004A         __end_of_channels 0806           __CFG_XINST$OFF 000000  
                 ___wmul 176C                ??___ftadd 0037                ??___awmod 0017  
                 _getCNY 15A8                ??___lldiv 001B                ??___ftmul 0025  
              ??___fttol 0032                ??_calcPID 003A         __end_of_maxSpeed 0811  
              ??___lwdiv 0017                   _initUI 17F4     __end_of_cnyInterrupt 185A  
              ??_getBTN1 0013                ??_getBTN2 0013                   clear_0 174A  
                 clear_1 1758          ___awmod@divisor 0015             _calibrateCNY 119C  
        ___awmod@counter 0017    ___ftmul@f3_as_product 0029                ??_initCNY 0013  
              ??_initCal 0013                ??_setLEDG 0013                ??_setLEDR 0013  
              ??_setLEDY 0013                ??_setLEDs 0016             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
          getCNY@channel 0017           calcPID@prevErr 00A5               __accesstop 0060  
__end_of__initialization 175E               ___ftadd@f1 0066               ___ftadd@f2 0069  
          ___rparam_used 000001               ___awtoft@c 001B               ___ftmul@f1 001F  
             ___ftmul@f2 0022               ___fttol@f1 002E           __pcstackCOMRAM 0001  
__size_of_initInterrupts 0006       __size_of_getCalCNY 0166               __end_of_kd 0809  
             __end_of_ki 080C               __end_of_kp 080F               __pbssBANK0 0097  
     __size_of_initTimer 000A               calcPID@err 00A1               calcPID@val 0089  
             calcPID@pos 007B       __size_of_setLMotor 0080       __size_of_setRMotor 0086  
                ?___wmul 001A                  ?_getCNY 0013                  ?_initUI 0001  
     __size_of_setMotors 001A                ?___awtoft 001B                ?___ftpack 0013  
      __end_of_getCalCNY 0FB0          __CFG_VREGEN$OFF 000000                  __Hparam 0000  
                __Lparam 0000    __size_of_cnyInterrupt 0002                  ___ftadd 0C9C  
             _initMotors 16DE                  ___awmod 1538                  ___lldiv 1436  
        __size_of___wmul 0026                  ___ftmul 10A8                  ___fttol 0FB0  
                _calcPID 0A86          __size_of_getCNY 0058                  ___lwdiv 1654  
           __psmallconst 0800                  _getBTN1 183C          __CFG_STVREN$OFF 000000  
                _getBTN2 1830          __size_of_initUI 0012                  __pcinit 1744  
             ??___awtoft 001E               ??___ftpack 0018                  __ramtop 0800  
                __ptext0 1792                  __ptext1 0812                  __ptext2 17B0  
                __ptext3 13B0                  __ptext4 14B8                  __ptext5 17CA  
                __ptext6 1806                  __ptext7 1814                  __ptext8 1822  
                __ptext9 1830            _millisCounter 0046             __size_of_ISR 13A8  
                _initCNY 17E0        __end_of_initTimer 1852                  _initCal 1600  
                _setLEDG 1822                  _setLEDR 1814                  _setLEDY 1806  
                _setLEDs 17CA         ___awmod@dividend 0013           setLMotor@speed 0013  
      __end_of_setLMotor 1538        __end_of_setRMotor 1436           __pintcode_body 1312  
   end_of_initialization 175E        __end_of_setMotors 17CA             _cnyInterrupt 1858  
          __Lmediumconst 0000                  int_func 1312                  loop@cal 0260  
                loop@pid 0091          ___lldiv@divisor 0017          ___lldiv@counter 001F  
                postdec2 000FDD          calcPID@integral 00A3           _initInterrupts 1852  
                postinc0 000FEE                  postinc2 000FDE         _calibrateCNY$671 001D  
       _calibrateCNY$672 001F                _PORTBbits 000F81  __size_of_timerInterrupt 0030  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISCbits 000F94  
            _CCP1CONbits 000FBD              _CCP2CONbits 000FBA   __end_of_initInterrupts 1858  
       getCalCNY@channel 0020              ___ftmul@exp 0028            setMotors@left 0017  
            ?_initMotors 0001           __end_of___wmul 1792           __end_of_getCNY 1600  
         __end_of_initUI 1806      start_initialization 1744          calibrateCNY@val 0021  
            __end_of_ISR 13B0            _getCalCNY$676 0028            _getCalCNY$677 002A  
        ?_initInterrupts 0001                 ??___wmul 001E                 ??_getCNY 0015  
       __CFG_LPT1OSC$OFF 000000                 ??_initUI 0013        __size_of___awtoft 0038  
      __size_of___ftpack 00AE              __pbssCOMRAM 003C            __pcstackBANK0 0060  
         setRMotor@speed 0013      __size_of_initMotors 0036               loop@status 00A7  
              _getCalCNY 0E4A                calcPID@Kd 0075                calcPID@Ki 0072  
              calcPID@Kp 006F                calcPID@s1 0081                calcPID@s2 0085  
       ___lwdiv@dividend 0013                __pintcode 0008                 ?___ftadd 0066  
               ?___awmod 0013                 ?___lldiv 0013                 ?___ftmul 001F  
               ?___fttol 002E                 ?_calcPID 006F                 ?___lwdiv 0013  
               ?_getBTN1 0001                 ?_getBTN2 0001                 ?_initCNY 0001  
               ?_initCal 0001              __smallconst 0800           _timerInterrupt 1714  
               ?_setLEDG 0001                 ?_setLEDR 0001                 ?_setLEDY 0001  
               ?_setLEDs 0014                _initTimer 1848         ___lwdiv@quotient 0017  
              _setLMotor 14B8           ___wmul@product 001E                _setRMotor 13B0  
               _LATBbits 000F8A                 _LATCbits 000F8B             getCalCNY@val 002C  
              _setMotors 17B0               ?_getCalCNY 0020            ?_calibrateCNY 0019  
 __end_of_timerInterrupt 1744               _ADCON0bits 000FC2        ___wmul@multiplier 001A  
             ?_initTimer 0001               ?_setLMotor 0013               ?_setRMotor 0013  
             ?_setMotors 0017                 __Hrparam 0000                 __Lrparam 0000  
           ??_initMotors 0013         __size_of___ftadd 01AE         __size_of___awmod 0070  
         ??_calibrateCNY 001B         __size_of___lldiv 0082         __size_of___ftmul 00F4  
       __size_of___fttol 00F8         __size_of_calcPID 0216         __size_of___lwdiv 0052  
               ___awtoft 16A6                 ___ftpack 1264          ?_timerInterrupt 0001  
       __size_of_getBTN1 000C         __size_of_getBTN2 000C                loop@i_451 0095  
       __size_of_initCNY 0014         __size_of_initCal 0054                 _channels 0801  
       __size_of_setLEDG 000E         __size_of_setLEDR 000E         __size_of_setLEDY 000E  
               calcPID@i 008B         __size_of_setLEDs 0016          ___lwdiv@divisor 0015  
        ___lwdiv@counter 0019                 __ptext10 183C                 __ptext11 119C  
               __ptext20 0C9C                 __ptext12 0A86                 __ptext21 16A6  
               __ptext13 0E4A                 __ptext22 1264                 __ptext14 15A8  
               __ptext31 1714                 __ptext23 1538                 __ptext15 176C  
               __ptext32 1858                 __ptext24 17F4                 __ptext16 1654  
               __ptext25 1848                 __ptext17 1436                 __ptext26 16DE  
               __ptext18 0FB0                 __ptext27 1852                 __ptext19 10A8  
               __ptext28 1600                 __ptext29 17E0       __end_of_initMotors 1714  
               _maxSpeed 080F         ??_initInterrupts 0013            __size_of_main 001E  
          __size_of_loop 0274              ??_getCalCNY 0022                 int$flags 004D  
  __CFG_CPUDIV$OSC1_PLL2 000000                 initCal@i 0013               _INTCONbits 000FF2  
               setLEDG@v 0013                 setLEDR@v 0013                 setLEDY@v 0013  
            ??_initTimer 0013                 setLEDs@g 0015                 setLEDs@r 0016  
               setLEDs@y 0014                 intlevel2 0000              ??_setLMotor 0015  
            ??_setRMotor 0015         ___lldiv@dividend 0013              ??_setMotors 001B  
       ___lldiv@quotient 001B       __CFG_FOSC$HSPLL_HS 000000            ?_cnyInterrupt 0001  
   __end_of_calibrateCNY 1264  
