

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jul 18 16:20:45 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F2550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	opt stack 0
    81  000800  00                 	db	0
    82  000801                     _channels:
    83                           	opt stack 0
    84  000801  04                 	db	4
    85  000802  03                 	db	3
    86  000803  02                 	db	2
    87  000804  01                 	db	1
    88  000805  00                 	db	0
    89  000806                     __end_of_channels:
    90                           	opt stack 0
    91  0000                     _PORTBbits	set	3969
    92  0000                     _LATBbits	set	3978
    93  0000                     _TRISBbits	set	3987
    94  0000                     _T0CON	set	4053
    95  0000                     _INTCONbits	set	4082
    96  0000                     _T2CON	set	4042
    97  0000                     _CCP2CONbits	set	4026
    98  0000                     _CCP1CONbits	set	4029
    99  0000                     _CCPR2L	set	4027
   100  0000                     _CCPR1L	set	4030
   101  0000                     _PR2	set	4043
   102  0000                     _LATCbits	set	3979
   103  0000                     _TRISCbits	set	3988
   104  0000                     _ADRESL	set	4035
   105  0000                     _ADRESH	set	4036
   106  0000                     _ADCON0bits	set	4034
   107  0000                     _ADCON2	set	4032
   108  0000                     _ADCON1	set	4033
   109  0000                     _TRISAbits	set	3986
   110                           
   111                           ; #config settings
   112  000806  00                 	db	0	; dummy byte at the end
   113  0000                     
   114                           	psect	cinit
   115  0014B6                     __pcinit:
   116                           	opt stack 0
   117  0014B6                     start_initialization:
   118                           	opt stack 0
   119  0014B6                     __initialization:
   120                           	opt stack 0
   121                           
   122                           ; Clear objects allocated to BANK0 (16 bytes)
   123  0014B6  EE00  F08F         	lfsr	0,__pbssBANK0
   124  0014BA  0E10               	movlw	16
   125  0014BC                     clear_0:
   126  0014BC  6AEE               	clrf	postinc0,c
   127  0014BE  06E8               	decf	wreg,f,c
   128  0014C0  E1FD               	bnz	clear_0
   129                           
   130                           ; Clear objects allocated to COMRAM (17 bytes)
   131  0014C2  EE00  F03C         	lfsr	0,__pbssCOMRAM
   132  0014C6  0E11               	movlw	17
   133  0014C8                     clear_1:
   134  0014C8  6AEE               	clrf	postinc0,c
   135  0014CA  06E8               	decf	wreg,f,c
   136  0014CC  E1FD               	bnz	clear_1
   137  0014CE                     end_of_initialization:
   138                           	opt stack 0
   139  0014CE                     __end_of__initialization:
   140                           	opt stack 0
   141  0014CE  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   142  0014D0  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   143  0014D2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   144  0014D4  6EF8               	movwf	tblptru,c
   145  0014D6  0100               	movlb	0
   146  0014D8  EF81  F00A         	goto	_main	;jump to C main() function
   147                           tblptru	equ	0xFF8
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           
   151                           	psect	bssCOMRAM
   152  00003C                     __pbssCOMRAM:
   153                           	opt stack 0
   154  00003C                     _mins:
   155                           	opt stack 0
   156  00003C                     	ds	10
   157  000046                     _millisCounter:
   158                           	opt stack 0
   159  000046                     	ds	4
   160  00004A                     _fractionCounter:
   161                           	opt stack 0
   162  00004A                     	ds	2
   163  00004C                     loop@status:
   164                           	opt stack 0
   165  00004C                     	ds	1
   166                           tblptru	equ	0xFF8
   167                           postinc0	equ	0xFEE
   168                           wreg	equ	0xFE8
   169                           
   170                           	psect	bssBANK0
   171  00008F                     __pbssBANK0:
   172                           	opt stack 0
   173  00008F                     _maxs:
   174                           	opt stack 0
   175  00008F                     	ds	10
   176  000099                     calcPID@err:
   177                           	opt stack 0
   178  000099                     	ds	2
   179  00009B                     calcPID@integral:
   180                           	opt stack 0
   181  00009B                     	ds	2
   182  00009D                     calcPID@prevErr:
   183                           	opt stack 0
   184  00009D                     	ds	2
   185                           tblptru	equ	0xFF8
   186                           postinc0	equ	0xFEE
   187                           wreg	equ	0xFE8
   188                           
   189                           	psect	cstackBANK0
   190  000060                     __pcstackBANK0:
   191                           	opt stack 0
   192  000060                     ___fttol@sign1:
   193                           	opt stack 0
   194                           
   195                           ; 1 bytes @ 0x0
   196  000060                     	ds	1
   197  000061                     ___fttol@lval:
   198                           	opt stack 0
   199                           
   200                           ; 4 bytes @ 0x1
   201  000061                     	ds	4
   202  000065                     ___fttol@exp1:
   203                           	opt stack 0
   204                           
   205                           ; 1 bytes @ 0x5
   206  000065                     	ds	1
   207  000066                     ?___ftadd:
   208                           	opt stack 0
   209  000066                     ___ftadd@f1:
   210                           	opt stack 0
   211                           
   212                           ; 3 bytes @ 0x6
   213  000066                     	ds	3
   214  000069                     ___ftadd@f2:
   215                           	opt stack 0
   216                           
   217                           ; 3 bytes @ 0x9
   218  000069                     	ds	3
   219  00006C                     ___ftadd@sign:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0xC
   223  00006C                     	ds	1
   224  00006D                     ___ftadd@exp2:
   225                           	opt stack 0
   226                           
   227                           ; 1 bytes @ 0xD
   228  00006D                     	ds	1
   229  00006E                     ___ftadd@exp1:
   230                           	opt stack 0
   231                           
   232                           ; 1 bytes @ 0xE
   233  00006E                     	ds	1
   234  00006F                     ?_calcPID:
   235                           	opt stack 0
   236  00006F                     calcPID@Kp:
   237                           	opt stack 0
   238                           
   239                           ; 3 bytes @ 0xF
   240  00006F                     	ds	3
   241  000072                     calcPID@Ki:
   242                           	opt stack 0
   243                           
   244                           ; 3 bytes @ 0x12
   245  000072                     	ds	3
   246  000075                     calcPID@Kd:
   247                           	opt stack 0
   248                           
   249                           ; 3 bytes @ 0x15
   250  000075                     	ds	3
   251  000078                     _calcPID$1222:
   252                           	opt stack 0
   253                           
   254                           ; 3 bytes @ 0x18
   255  000078                     	ds	3
   256  00007B                     calcPID@pos:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x1B
   260  00007B                     	ds	2
   261  00007D                     _calcPID$1220:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x1D
   265  00007D                     	ds	2
   266  00007F                     _calcPID$1221:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x1F
   270  00007F                     	ds	2
   271  000081                     calcPID@s1:
   272                           	opt stack 0
   273                           
   274                           ; 4 bytes @ 0x21
   275  000081                     	ds	4
   276  000085                     calcPID@s2:
   277                           	opt stack 0
   278                           
   279                           ; 4 bytes @ 0x25
   280  000085                     	ds	4
   281  000089                     calcPID@val:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x29
   285  000089                     	ds	2
   286  00008B                     calcPID@i:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x2B
   290  00008B                     	ds	2
   291  00008D                     loop@pid:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x2D
   295  00008D                     	ds	2
   296                           tblptru	equ	0xFF8
   297                           postinc0	equ	0xFEE
   298                           wreg	equ	0xFE8
   299                           
   300                           	psect	cstackCOMRAM
   301  000001                     __pcstackCOMRAM:
   302                           	opt stack 0
   303  000001                     ??_ISR:
   304                           
   305                           ; 1 bytes @ 0x0
   306  000001                     	ds	18
   307  000013                     ?_getCNY:
   308                           	opt stack 0
   309  000013                     ?___awdiv:
   310                           	opt stack 0
   311  000013                     ?___lwdiv:
   312                           	opt stack 0
   313  000013                     ?___ftpack:
   314                           	opt stack 0
   315  000013                     ?___lldiv:
   316                           	opt stack 0
   317  000013                     setLEDR@v:
   318                           	opt stack 0
   319  000013                     setLEDY@v:
   320                           	opt stack 0
   321  000013                     setLEDG@v:
   322                           	opt stack 0
   323  000013                     ___awdiv@dividend:
   324                           	opt stack 0
   325  000013                     ___lwdiv@dividend:
   326                           	opt stack 0
   327  000013                     ___ftpack@arg:
   328                           	opt stack 0
   329  000013                     ___lldiv@dividend:
   330                           	opt stack 0
   331                           
   332                           ; 4 bytes @ 0x12
   333  000013                     	ds	1
   334  000014                     setLEDs@y:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x13
   338  000014                     	ds	1
   339  000015                     ??_getCNY:
   340  000015                     setLEDs@g:
   341                           	opt stack 0
   342  000015                     ___awdiv@divisor:
   343                           	opt stack 0
   344  000015                     ___lwdiv@divisor:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x14
   348  000015                     	ds	1
   349  000016                     setLEDs@r:
   350                           	opt stack 0
   351  000016                     ___ftpack@exp:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0x15
   355  000016                     	ds	1
   356  000017                     getCNY@channel:
   357                           	opt stack 0
   358  000017                     ___awdiv@counter:
   359                           	opt stack 0
   360  000017                     ___ftpack@sign:
   361                           	opt stack 0
   362  000017                     ___lwdiv@counter:
   363                           	opt stack 0
   364  000017                     ___lldiv@divisor:
   365                           	opt stack 0
   366                           
   367                           ; 4 bytes @ 0x16
   368  000017                     	ds	1
   369  000018                     ??___ftpack:
   370  000018                     ___awdiv@sign:
   371                           	opt stack 0
   372  000018                     ___lwdiv@quotient:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x17
   376  000018                     	ds	1
   377  000019                     ___awdiv@quotient:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x18
   381  000019                     	ds	1
   382  00001A                     ?___wmul:
   383                           	opt stack 0
   384  00001A                     ___wmul@multiplier:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x19
   388  00001A                     	ds	1
   389  00001B                     ?___awtoft:
   390                           	opt stack 0
   391  00001B                     setMotors@left:
   392                           	opt stack 0
   393  00001B                     ___awtoft@c:
   394                           	opt stack 0
   395  00001B                     ___lldiv@quotient:
   396                           	opt stack 0
   397                           
   398                           ; 4 bytes @ 0x1A
   399  00001B                     	ds	1
   400  00001C                     ___wmul@multiplicand:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x1B
   404  00001C                     	ds	1
   405  00001D                     setMotors@right:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x1C
   409  00001D                     	ds	1
   410  00001E                     ___awtoft@sign:
   411                           	opt stack 0
   412  00001E                     ___wmul@product:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x1D
   416  00001E                     	ds	1
   417  00001F                     ??_setMotors:
   418  00001F                     ?___ftmul:
   419                           	opt stack 0
   420  00001F                     ___lldiv@counter:
   421                           	opt stack 0
   422  00001F                     ___ftmul@f1:
   423                           	opt stack 0
   424                           
   425                           ; 3 bytes @ 0x1E
   426  00001F                     	ds	1
   427  000020                     ?_getCalCNY:
   428  000020                     getCalCNY@channel:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x1F
   432  000020                     	ds	2
   433  000022                     ??_getCalCNY:
   434  000022                     ___ftmul@f2:
   435                           	opt stack 0
   436                           
   437                           ; 3 bytes @ 0x21
   438  000022                     	ds	3
   439  000025                     ??___ftmul:
   440                           
   441                           ; 1 bytes @ 0x24
   442  000025                     	ds	3
   443  000028                     ___ftmul@exp:
   444                           	opt stack 0
   445  000028                     _getCalCNY$639:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x27
   449  000028                     	ds	1
   450  000029                     ___ftmul@f3_as_product:
   451                           	opt stack 0
   452                           
   453                           ; 3 bytes @ 0x28
   454  000029                     	ds	1
   455  00002A                     _getCalCNY$640:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x29
   459  00002A                     	ds	2
   460  00002C                     ___ftmul@cntr:
   461                           	opt stack 0
   462  00002C                     getCalCNY@val:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x2B
   466  00002C                     	ds	1
   467  00002D                     ___ftmul@sign:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x2C
   471  00002D                     	ds	1
   472  00002E                     ?___fttol:
   473                           	opt stack 0
   474  00002E                     ___fttol@f1:
   475                           	opt stack 0
   476                           
   477                           ; 3 bytes @ 0x2D
   478  00002E                     	ds	4
   479  000032                     ??___fttol:
   480                           
   481                           ; 1 bytes @ 0x31
   482  000032                     	ds	5
   483  000037                     ??___ftadd:
   484                           
   485                           ; 1 bytes @ 0x36
   486  000037                     	ds	3
   487  00003A                     ??_calcPID:
   488                           
   489                           ; 1 bytes @ 0x39
   490  00003A                     	ds	2
   491  00003C                     tblptru	equ	0xFF8
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           
   495                           ; 1 bytes @ 0x3B
   496 ;;
   497 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   498 ;;
   499 ;; *************** function _main *****************
   500 ;; Defined at:
   501 ;;		line 54 in file "main.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;		None
   504 ;; Auto vars:     Size  Location     Type
   505 ;;		None
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   510 ;; Tracked objects:
   511 ;;		On entry : 0/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   515 ;;      Params:         0       0       0       0       0       0       0       0       0
   516 ;;      Locals:         0       0       0       0       0       0       0       0       0
   517 ;;      Temps:          0       0       0       0       0       0       0       0       0
   518 ;;      Totals:         0       0       0       0       0       0       0       0       0
   519 ;;Total ram usage:        0 bytes
   520 ;; Hardware stack levels required when called:    6
   521 ;; This function calls:
   522 ;;		_initCNY
   523 ;;		_initInterrupts
   524 ;;		_initMotors
   525 ;;		_initTimer
   526 ;;		_initUI
   527 ;;		_loop
   528 ;; This function is called by:
   529 ;;		Startup code after reset
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text0
   534  001502                     __ptext0:
   535                           	opt stack 0
   536  001502                     _main:
   537                           	opt stack 25
   538                           
   539                           ;main.c: 55: initInterrupts();
   540                           
   541                           ;incstack = 0
   542  001502  ECC6  F00A         	call	_initInterrupts	;wreg free
   543                           
   544                           ;main.c: 56: initTimer();
   545  001506  ECC1  F00A         	call	_initTimer	;wreg free
   546                           
   547                           ;main.c: 57: initUI();
   548  00150A  ECA3  F00A         	call	_initUI	;wreg free
   549                           
   550                           ;main.c: 58: initMotors();
   551  00150E  EC28  F00A         	call	_initMotors	;wreg free
   552                           
   553                           ;main.c: 59: initCNY();
   554  001512  EC99  F00A         	call	_initCNY	;wreg free
   555  001516  ECE9  F008         	call	_loop	;wreg free
   556  00151A  D7FD               	goto	l122
   557  00151C                     __end_of_main:
   558                           	opt stack 0
   559                           tblptru	equ	0xFF8
   560                           postinc0	equ	0xFEE
   561                           wreg	equ	0xFE8
   562                           
   563 ;; *************** function _loop *****************
   564 ;; Defined at:
   565 ;;		line 30 in file "main.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;		None
   568 ;; Auto vars:     Size  Location     Type
   569 ;;  pid             2   45[BANK0 ] int 
   570 ;; Return value:  Size  Location     Type
   571 ;;                  1    wreg      void 
   572 ;; Registers used:
   573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   579 ;;      Params:         0       0       0       0       0       0       0       0       0
   580 ;;      Locals:         0       2       0       0       0       0       0       0       0
   581 ;;      Temps:          0       0       0       0       0       0       0       0       0
   582 ;;      Totals:         0       2       0       0       0       0       0       0       0
   583 ;;Total ram usage:        2 bytes
   584 ;; Hardware stack levels used:    1
   585 ;; Hardware stack levels required when called:    5
   586 ;; This function calls:
   587 ;;		_calcPID
   588 ;;		_setLEDs
   589 ;;		_setMotors
   590 ;; This function is called by:
   591 ;;		_main
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           	psect	text1
   596  0011D2                     __ptext1:
   597                           	opt stack 0
   598  0011D2                     _loop:
   599                           	opt stack 25
   600                           
   601                           ;main.c: 31: static char status = MENU;
   602                           ;main.c: 32: int pid;
   603                           ;main.c: 33: switch(status){
   604                           
   605                           ;incstack = 0
   606  0011D2  D044               	goto	l108
   607  0011D4                     
   608                           ;main.c: 35: setMotors(0, 0);
   609  0011D4  0E00               	movlw	0
   610  0011D6  6E1C               	movwf	setMotors@left+1,c
   611  0011D8  0E00               	movlw	0
   612  0011DA  6E1B               	movwf	setMotors@left,c
   613  0011DC  0E00               	movlw	0
   614  0011DE  6E1E               	movwf	setMotors@right+1,c
   615  0011E0  0E00               	movlw	0
   616  0011E2  6E1D               	movwf	setMotors@right,c
   617  0011E4  ECE6  F005         	call	_setMotors	;wreg free
   618                           
   619                           ;main.c: 36: setLEDs(1, 0, 0);
   620  0011E8  0E00               	movlw	0
   621  0011EA  6E14               	movwf	setLEDs@y,c
   622  0011EC  0E00               	movlw	0
   623  0011EE  6E15               	movwf	setLEDs@g,c
   624  0011F0  0E01               	movlw	1
   625  0011F2  EC8E  F00A         	call	_setLEDs
   626                           
   627                           ;main.c: 40: break;
   628  0011F6  0012               	return	
   629  0011F8                     
   630                           ;main.c: 43: pid = calcPID(1, 0, 0);
   631  0011F8  0E00               	movlw	0
   632  0011FA  0100               	movlb	0	; () banked
   633  0011FC  6F6F               	movwf	calcPID@Kp& (0+255),b
   634  0011FE  0E80               	movlw	128
   635  001200  6F70               	movwf	(calcPID@Kp+1)& (0+255),b
   636  001202  0E3F               	movlw	63
   637  001204  6F71               	movwf	(calcPID@Kp+2)& (0+255),b
   638  001206  0E00               	movlw	0
   639  001208  6F72               	movwf	calcPID@Ki& (0+255),b
   640  00120A  0E00               	movlw	0
   641  00120C  6F73               	movwf	(calcPID@Ki+1)& (0+255),b
   642  00120E  0E00               	movlw	0
   643  001210  6F74               	movwf	(calcPID@Ki+2)& (0+255),b
   644  001212  0E00               	movlw	0
   645  001214  6F75               	movwf	calcPID@Kd& (0+255),b
   646  001216  0E00               	movlw	0
   647  001218  6F76               	movwf	(calcPID@Kd+1)& (0+255),b
   648  00121A  0E00               	movlw	0
   649  00121C  6F77               	movwf	(calcPID@Kd+2)& (0+255),b
   650  00121E  EC04  F004         	call	_calcPID	;wreg free
   651  001222  C06F  F08D         	movff	?_calcPID,loop@pid
   652  001226  C070  F08E         	movff	?_calcPID+1,loop@pid+1
   653                           
   654                           ;main.c: 44: if(pid < 0) setMotors(( pid), 0);
   655  00122A  0100               	movlb	0	; () banked
   656  00122C  AF8E               	btfss	(loop@pid+1)& (0+255),7,b
   657  00122E  D00B               	goto	l112
   658                           
   659                           ; BSR set to: 0
   660  001230  C08D  F01B         	movff	loop@pid,setMotors@left
   661  001234  C08E  F01C         	movff	loop@pid+1,setMotors@left+1
   662  001238  0E00               	movlw	0
   663  00123A  6E1E               	movwf	setMotors@right+1,c
   664  00123C  0E00               	movlw	0
   665  00123E  6E1D               	movwf	setMotors@right,c
   666  001240  ECE6  F005         	call	_setMotors	;wreg free
   667  001244  0012               	return	
   668  001246                     l112:
   669                           
   670                           ;main.c: 45: else setMotors(0 , ( pid));
   671  001246  0E00               	movlw	0
   672  001248  6E1C               	movwf	setMotors@left+1,c
   673  00124A  0E00               	movlw	0
   674  00124C  6E1B               	movwf	setMotors@left,c
   675  00124E  C08D  F01D         	movff	loop@pid,setMotors@right
   676  001252  C08E  F01E         	movff	loop@pid+1,setMotors@right+1
   677  001256  ECE6  F005         	call	_setMotors	;wreg free
   678                           
   679                           ;main.c: 47: }
   680                           
   681                           ;main.c: 46: break;
   682  00125A  0012               	return	
   683  00125C                     l108:
   684  00125C  504C               	movf	loop@status,w,c
   685                           
   686                           ; Switch size 1, requested type "space"
   687                           ; Number of cases is 2, Range of values is 0 to 1
   688                           ; switch strategies available:
   689                           ; Name         Instructions Cycles
   690                           ; simple_byte            7     4 (average)
   691                           ;	Chosen strategy is simple_byte
   692  00125E  0A00               	xorlw	0	; case 0
   693  001260  B4D8               	btfsc	status,2,c
   694  001262  D7B8               	goto	l109
   695  001264  0A01               	xorlw	1	; case 1
   696  001266  A4D8               	btfss	status,2,c
   697  001268  0012               	return	
   698  00126A  D7C6               	goto	l111
   699  00126C                     __end_of_loop:
   700                           	opt stack 0
   701                           tblptru	equ	0xFF8
   702                           postinc0	equ	0xFEE
   703                           wreg	equ	0xFE8
   704                           status	equ	0xFD8
   705                           
   706 ;; *************** function _setMotors *****************
   707 ;; Defined at:
   708 ;;		line 34 in file "motors.c"
   709 ;; Parameters:    Size  Location     Type
   710 ;;  left            2   26[COMRAM] int 
   711 ;;  right           2   28[COMRAM] int 
   712 ;; Auto vars:     Size  Location     Type
   713 ;;		None
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, status,2, status,0, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 0/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   723 ;;      Params:         4       0       0       0       0       0       0       0       0
   724 ;;      Locals:         0       0       0       0       0       0       0       0       0
   725 ;;      Temps:          2       0       0       0       0       0       0       0       0
   726 ;;      Totals:         6       0       0       0       0       0       0       0       0
   727 ;;Total ram usage:        6 bytes
   728 ;; Hardware stack levels used:    1
   729 ;; Hardware stack levels required when called:    3
   730 ;; This function calls:
   731 ;;		___awdiv
   732 ;; This function is called by:
   733 ;;		_loop
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           	psect	text2
   738  000BCC                     __ptext2:
   739                           	opt stack 0
   740  000BCC                     _setMotors:
   741                           	opt stack 26
   742                           
   743                           ;motors.c: 35: LATCbits.LATC6 = left <= 0;
   744                           
   745                           ;incstack = 0
   746  000BCC  BE1C               	btfsc	setMotors@left+1,7,c
   747  000BCE  D005               	goto	u2271
   748  000BD0  501C               	movf	setMotors@left+1,w,c
   749  000BD2  E106               	bnz	u2270
   750  000BD4  041B               	decf	setMotors@left,w,c
   751  000BD6  B0D8               	btfsc	status,0,c
   752  000BD8  D003               	goto	u2270
   753  000BDA                     u2271:
   754  000BDA  6A1F               	clrf	??_setMotors& (0+255),c
   755  000BDC  2A1F               	incf	??_setMotors& (0+255),f,c
   756  000BDE  D001               	goto	u2288
   757  000BE0                     u2270:
   758  000BE0  6A1F               	clrf	??_setMotors& (0+255),c
   759  000BE2                     u2288:
   760  000BE2  3A1F               	swapf	??_setMotors,f,c
   761  000BE4  461F               	rlncf	??_setMotors,f,c
   762  000BE6  461F               	rlncf	??_setMotors,f,c
   763  000BE8  508B               	movf	3979,w,c	;volatile
   764  000BEA  181F               	xorwf	??_setMotors,w,c
   765  000BEC  0BBF               	andlw	-65
   766  000BEE  181F               	xorwf	??_setMotors,w,c
   767  000BF0  6E8B               	movwf	3979,c	;volatile
   768                           
   769                           ;motors.c: 36: LATCbits.LATC0 = right <= 0;
   770  000BF2  BE1E               	btfsc	setMotors@right+1,7,c
   771  000BF4  D005               	goto	u2291
   772  000BF6  501E               	movf	setMotors@right+1,w,c
   773  000BF8  E106               	bnz	u2290
   774  000BFA  041D               	decf	setMotors@right,w,c
   775  000BFC  B0D8               	btfsc	status,0,c
   776  000BFE  D003               	goto	u2290
   777  000C00                     u2291:
   778  000C00  6A1F               	clrf	??_setMotors& (0+255),c
   779  000C02  2A1F               	incf	??_setMotors& (0+255),f,c
   780  000C04  D001               	goto	u2308
   781  000C06                     u2290:
   782  000C06  6A1F               	clrf	??_setMotors& (0+255),c
   783  000C08                     u2308:
   784  000C08  508B               	movf	3979,w,c	;volatile
   785  000C0A  181F               	xorwf	??_setMotors,w,c
   786  000C0C  0BFE               	andlw	-2
   787  000C0E  181F               	xorwf	??_setMotors,w,c
   788  000C10  6E8B               	movwf	3979,c	;volatile
   789                           
   790                           ;motors.c: 37: if(left < 0) left = 1000 - left;
   791  000C12  AE1C               	btfss	setMotors@left+1,7,c
   792  000C14  D00E               	goto	l49
   793  000C16  C01B  F01F         	movff	setMotors@left,??_setMotors
   794  000C1A  C01C  F020         	movff	setMotors@left+1,??_setMotors+1
   795  000C1E  1E1F               	comf	??_setMotors,f,c
   796  000C20  1E20               	comf	??_setMotors+1,f,c
   797  000C22  4A1F               	infsnz	??_setMotors,f,c
   798  000C24  2A20               	incf	??_setMotors+1,f,c
   799  000C26  0EE8               	movlw	232
   800  000C28  241F               	addwf	??_setMotors,w,c
   801  000C2A  6E1B               	movwf	setMotors@left,c
   802  000C2C  0E03               	movlw	3
   803  000C2E  2020               	addwfc	??_setMotors+1,w,c
   804  000C30  6E1C               	movwf	setMotors@left+1,c
   805  000C32                     l49:
   806                           
   807                           ;motors.c: 38: if(right < 0) right = 1000 - right;
   808  000C32  AE1E               	btfss	setMotors@right+1,7,c
   809  000C34  D00E               	goto	l50
   810  000C36  C01D  F01F         	movff	setMotors@right,??_setMotors
   811  000C3A  C01E  F020         	movff	setMotors@right+1,??_setMotors+1
   812  000C3E  1E1F               	comf	??_setMotors,f,c
   813  000C40  1E20               	comf	??_setMotors+1,f,c
   814  000C42  4A1F               	infsnz	??_setMotors,f,c
   815  000C44  2A20               	incf	??_setMotors+1,f,c
   816  000C46  0EE8               	movlw	232
   817  000C48  241F               	addwf	??_setMotors,w,c
   818  000C4A  6E1D               	movwf	setMotors@right,c
   819  000C4C  0E03               	movlw	3
   820  000C4E  2020               	addwfc	??_setMotors+1,w,c
   821  000C50  6E1E               	movwf	setMotors@right+1,c
   822  000C52                     l50:
   823                           
   824                           ;motors.c: 39: if(left > 1000) left = 1000;
   825  000C52  BE1C               	btfsc	setMotors@left+1,7,c
   826  000C54  D00A               	goto	l51
   827  000C56  0EE9               	movlw	233
   828  000C58  5C1B               	subwf	setMotors@left,w,c
   829  000C5A  0E03               	movlw	3
   830  000C5C  581C               	subwfb	setMotors@left+1,w,c
   831  000C5E  A0D8               	btfss	status,0,c
   832  000C60  D004               	goto	l51
   833  000C62  0E03               	movlw	3
   834  000C64  6E1C               	movwf	setMotors@left+1,c
   835  000C66  0EE8               	movlw	232
   836  000C68  6E1B               	movwf	setMotors@left,c
   837  000C6A                     l51:
   838                           
   839                           ;motors.c: 40: if(right > 1000) right = 1000;
   840  000C6A  BE1E               	btfsc	setMotors@right+1,7,c
   841  000C6C  D00A               	goto	l52
   842  000C6E  0EE9               	movlw	233
   843  000C70  5C1D               	subwf	setMotors@right,w,c
   844  000C72  0E03               	movlw	3
   845  000C74  581E               	subwfb	setMotors@right+1,w,c
   846  000C76  A0D8               	btfss	status,0,c
   847  000C78  D004               	goto	l52
   848  000C7A  0E03               	movlw	3
   849  000C7C  6E1E               	movwf	setMotors@right+1,c
   850  000C7E  0EE8               	movlw	232
   851  000C80  6E1D               	movwf	setMotors@right,c
   852  000C82                     l52:
   853                           
   854                           ;motors.c: 41: left = left * 1024 / 1000;
   855  000C82  C01B  F01F         	movff	setMotors@left,??_setMotors
   856  000C86  C01C  F020         	movff	setMotors@left+1,??_setMotors+1
   857  000C8A  0E0A               	movlw	10
   858  000C8C                     u2355:
   859  000C8C  90D8               	bcf	status,0,c
   860  000C8E  361F               	rlcf	??_setMotors,f,c
   861  000C90  3620               	rlcf	??_setMotors+1,f,c
   862  000C92  2EE8               	decfsz	wreg,f,c
   863  000C94  D7FB               	goto	u2355
   864  000C96  C01F  F013         	movff	??_setMotors,___awdiv@dividend
   865  000C9A  C020  F014         	movff	??_setMotors+1,___awdiv@dividend+1
   866  000C9E  0E03               	movlw	3
   867  000CA0  6E16               	movwf	___awdiv@divisor+1,c
   868  000CA2  0EE8               	movlw	232
   869  000CA4  6E15               	movwf	___awdiv@divisor,c
   870  000CA6  EC36  F009         	call	___awdiv	;wreg free
   871  000CAA  C013  F01B         	movff	?___awdiv,setMotors@left
   872  000CAE  C014  F01C         	movff	?___awdiv+1,setMotors@left+1
   873                           
   874                           ;motors.c: 42: right = right * 1024 / 1000;
   875  000CB2  C01D  F01F         	movff	setMotors@right,??_setMotors
   876  000CB6  C01E  F020         	movff	setMotors@right+1,??_setMotors+1
   877  000CBA  0E0A               	movlw	10
   878  000CBC                     u2365:
   879  000CBC  90D8               	bcf	status,0,c
   880  000CBE  361F               	rlcf	??_setMotors,f,c
   881  000CC0  3620               	rlcf	??_setMotors+1,f,c
   882  000CC2  2EE8               	decfsz	wreg,f,c
   883  000CC4  D7FB               	goto	u2365
   884  000CC6  C01F  F013         	movff	??_setMotors,___awdiv@dividend
   885  000CCA  C020  F014         	movff	??_setMotors+1,___awdiv@dividend+1
   886  000CCE  0E03               	movlw	3
   887  000CD0  6E16               	movwf	___awdiv@divisor+1,c
   888  000CD2  0EE8               	movlw	232
   889  000CD4  6E15               	movwf	___awdiv@divisor,c
   890  000CD6  EC36  F009         	call	___awdiv	;wreg free
   891  000CDA  C013  F01D         	movff	?___awdiv,setMotors@right
   892  000CDE  C014  F01E         	movff	?___awdiv+1,setMotors@right+1
   893                           
   894                           ;motors.c: 43: CCP2CONbits.DC2B = left & 3;
   895  000CE2  C01B  F01F         	movff	setMotors@left,??_setMotors
   896  000CE6  0E03               	movlw	3
   897  000CE8  161F               	andwf	??_setMotors,f,c
   898  000CEA  3A1F               	swapf	??_setMotors,f,c
   899  000CEC  50BA               	movf	4026,w,c	;volatile
   900  000CEE  181F               	xorwf	??_setMotors,w,c
   901  000CF0  0BCF               	andlw	-49
   902  000CF2  181F               	xorwf	??_setMotors,w,c
   903  000CF4  6EBA               	movwf	4026,c	;volatile
   904                           
   905                           ;motors.c: 44: CCP1CONbits.DC1B = right & 3;
   906  000CF6  C01D  F01F         	movff	setMotors@right,??_setMotors
   907  000CFA  0E03               	movlw	3
   908  000CFC  161F               	andwf	??_setMotors,f,c
   909  000CFE  3A1F               	swapf	??_setMotors,f,c
   910  000D00  50BD               	movf	4029,w,c	;volatile
   911  000D02  181F               	xorwf	??_setMotors,w,c
   912  000D04  0BCF               	andlw	-49
   913  000D06  181F               	xorwf	??_setMotors,w,c
   914  000D08  6EBD               	movwf	4029,c	;volatile
   915                           
   916                           ;motors.c: 45: CCPR2L = left >> 2;
   917  000D0A  C01B  F01F         	movff	setMotors@left,??_setMotors
   918  000D0E  C01C  F020         	movff	setMotors@left+1,??_setMotors+1
   919  000D12  3420               	rlcf	??_setMotors+1,w,c
   920  000D14  3220               	rrcf	??_setMotors+1,f,c
   921  000D16  321F               	rrcf	??_setMotors,f,c
   922  000D18  3420               	rlcf	??_setMotors+1,w,c
   923  000D1A  3220               	rrcf	??_setMotors+1,f,c
   924  000D1C  321F               	rrcf	??_setMotors,f,c
   925  000D1E  501F               	movf	??_setMotors,w,c
   926  000D20  6EBB               	movwf	4027,c	;volatile
   927                           
   928                           ;motors.c: 46: CCPR1L = right >> 2;
   929  000D22  C01D  F01F         	movff	setMotors@right,??_setMotors
   930  000D26  C01E  F020         	movff	setMotors@right+1,??_setMotors+1
   931  000D2A  3420               	rlcf	??_setMotors+1,w,c
   932  000D2C  3220               	rrcf	??_setMotors+1,f,c
   933  000D2E  321F               	rrcf	??_setMotors,f,c
   934  000D30  3420               	rlcf	??_setMotors+1,w,c
   935  000D32  3220               	rrcf	??_setMotors+1,f,c
   936  000D34  321F               	rrcf	??_setMotors,f,c
   937  000D36  501F               	movf	??_setMotors,w,c
   938  000D38  6EBE               	movwf	4030,c	;volatile
   939  000D3A  0012               	return		;funcret
   940  000D3C                     __end_of_setMotors:
   941                           	opt stack 0
   942                           tblptru	equ	0xFF8
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           status	equ	0xFD8
   946                           
   947 ;; *************** function ___awdiv *****************
   948 ;; Defined at:
   949 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  dividend        2   18[COMRAM] int 
   952 ;;  divisor         2   20[COMRAM] int 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  quotient        2   24[COMRAM] int 
   955 ;;  sign            1   23[COMRAM] unsigned char 
   956 ;;  counter         1   22[COMRAM] unsigned char 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  2   18[COMRAM] int 
   959 ;; Registers used:
   960 ;;		wreg, status,2, status,0
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   966 ;;      Params:         4       0       0       0       0       0       0       0       0
   967 ;;      Locals:         4       0       0       0       0       0       0       0       0
   968 ;;      Temps:          0       0       0       0       0       0       0       0       0
   969 ;;      Totals:         8       0       0       0       0       0       0       0       0
   970 ;;Total ram usage:        8 bytes
   971 ;; Hardware stack levels used:    1
   972 ;; Hardware stack levels required when called:    2
   973 ;; This function calls:
   974 ;;		Nothing
   975 ;; This function is called by:
   976 ;;		_setMotors
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text3
   981  00126C                     __ptext3:
   982                           	opt stack 0
   983  00126C                     ___awdiv:
   984                           	opt stack 26
   985                           
   986                           ;incstack = 0
   987  00126C  0E00               	movlw	0
   988  00126E  6E18               	movwf	___awdiv@sign,c
   989  001270  AE16               	btfss	___awdiv@divisor+1,7,c
   990  001272  D006               	goto	l378
   991  001274  6C15               	negf	___awdiv@divisor,c
   992  001276  1E16               	comf	___awdiv@divisor+1,f,c
   993  001278  B0D8               	btfsc	status,0,c
   994  00127A  2A16               	incf	___awdiv@divisor+1,f,c
   995  00127C  0E01               	movlw	1
   996  00127E  6E18               	movwf	___awdiv@sign,c
   997  001280                     l378:
   998  001280  AE14               	btfss	___awdiv@dividend+1,7,c
   999  001282  D006               	goto	l379
  1000  001284  6C13               	negf	___awdiv@dividend,c
  1001  001286  1E14               	comf	___awdiv@dividend+1,f,c
  1002  001288  B0D8               	btfsc	status,0,c
  1003  00128A  2A14               	incf	___awdiv@dividend+1,f,c
  1004  00128C  0E01               	movlw	1
  1005  00128E  1A18               	xorwf	___awdiv@sign,f,c
  1006  001290                     l379:
  1007  001290  0E00               	movlw	0
  1008  001292  6E1A               	movwf	___awdiv@quotient+1,c
  1009  001294  0E00               	movlw	0
  1010  001296  6E19               	movwf	___awdiv@quotient,c
  1011  001298  5015               	movf	___awdiv@divisor,w,c
  1012  00129A  1016               	iorwf	___awdiv@divisor+1,w,c
  1013  00129C  B4D8               	btfsc	status,2,c
  1014  00129E  D01C               	goto	l386
  1015  0012A0  0E01               	movlw	1
  1016  0012A2  6E17               	movwf	___awdiv@counter,c
  1017  0012A4  D004               	goto	l381
  1018  0012A6  90D8               	bcf	status,0,c
  1019  0012A8  3615               	rlcf	___awdiv@divisor,f,c
  1020  0012AA  3616               	rlcf	___awdiv@divisor+1,f,c
  1021  0012AC  2A17               	incf	___awdiv@counter,f,c
  1022  0012AE                     l381:
  1023  0012AE  AE16               	btfss	___awdiv@divisor+1,7,c
  1024  0012B0  D7FA               	goto	l382
  1025  0012B2                     u2120:
  1026  0012B2  90D8               	bcf	status,0,c
  1027  0012B4  3619               	rlcf	___awdiv@quotient,f,c
  1028  0012B6  361A               	rlcf	___awdiv@quotient+1,f,c
  1029  0012B8  5015               	movf	___awdiv@divisor,w,c
  1030  0012BA  5C13               	subwf	___awdiv@dividend,w,c
  1031  0012BC  5016               	movf	___awdiv@divisor+1,w,c
  1032  0012BE  5814               	subwfb	___awdiv@dividend+1,w,c
  1033  0012C0  A0D8               	btfss	status,0,c
  1034  0012C2  D005               	goto	l385
  1035  0012C4  5015               	movf	___awdiv@divisor,w,c
  1036  0012C6  5E13               	subwf	___awdiv@dividend,f,c
  1037  0012C8  5016               	movf	___awdiv@divisor+1,w,c
  1038  0012CA  5A14               	subwfb	___awdiv@dividend+1,f,c
  1039  0012CC  8019               	bsf	___awdiv@quotient,0,c
  1040  0012CE                     l385:
  1041  0012CE  90D8               	bcf	status,0,c
  1042  0012D0  3216               	rrcf	___awdiv@divisor+1,f,c
  1043  0012D2  3215               	rrcf	___awdiv@divisor,f,c
  1044  0012D4  2E17               	decfsz	___awdiv@counter,f,c
  1045  0012D6  D7ED               	goto	u2120
  1046  0012D8                     l386:
  1047  0012D8  5018               	movf	___awdiv@sign,w,c
  1048  0012DA  B4D8               	btfsc	status,2,c
  1049  0012DC  D004               	goto	l387
  1050  0012DE  6C19               	negf	___awdiv@quotient,c
  1051  0012E0  1E1A               	comf	___awdiv@quotient+1,f,c
  1052  0012E2  B0D8               	btfsc	status,0,c
  1053  0012E4  2A1A               	incf	___awdiv@quotient+1,f,c
  1054  0012E6                     l387:
  1055  0012E6  C019  F013         	movff	___awdiv@quotient,?___awdiv
  1056  0012EA  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  1057  0012EE  0012               	return	
  1058  0012F0                     __end_of___awdiv:
  1059                           	opt stack 0
  1060                           tblptru	equ	0xFF8
  1061                           postinc0	equ	0xFEE
  1062                           wreg	equ	0xFE8
  1063                           status	equ	0xFD8
  1064                           
  1065 ;; *************** function _setLEDs *****************
  1066 ;; Defined at:
  1067 ;;		line 32 in file "ui.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;  r               1    wreg     unsigned char 
  1070 ;;  y               1   19[COMRAM] unsigned char 
  1071 ;;  g               1   20[COMRAM] unsigned char 
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;  r               1   21[COMRAM] unsigned char 
  1074 ;; Return value:  Size  Location     Type
  1075 ;;                  1    wreg      void 
  1076 ;; Registers used:
  1077 ;;		wreg, status,2, cstack
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1083 ;;      Params:         2       0       0       0       0       0       0       0       0
  1084 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1085 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1086 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1087 ;;Total ram usage:        3 bytes
  1088 ;; Hardware stack levels used:    1
  1089 ;; Hardware stack levels required when called:    3
  1090 ;; This function calls:
  1091 ;;		_setLEDG
  1092 ;;		_setLEDR
  1093 ;;		_setLEDY
  1094 ;; This function is called by:
  1095 ;;		_loop
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text4
  1100  00151C                     __ptext4:
  1101                           	opt stack 0
  1102  00151C                     _setLEDs:
  1103                           	opt stack 26
  1104                           
  1105                           ;incstack = 0
  1106                           ;setLEDs@r stored from wreg
  1107  00151C  6E16               	movwf	setLEDs@r,c
  1108                           
  1109                           ;ui.c: 33: setLEDR(r);
  1110  00151E  5016               	movf	setLEDs@r,w,c
  1111  001520  ECB3  F00A         	call	_setLEDR
  1112                           
  1113                           ;ui.c: 34: setLEDY(y);
  1114  001524  5014               	movf	setLEDs@y,w,c
  1115  001526  ECAC  F00A         	call	_setLEDY
  1116                           
  1117                           ;ui.c: 35: setLEDG(g);
  1118  00152A  5015               	movf	setLEDs@g,w,c
  1119  00152C  ECBA  F00A         	call	_setLEDG
  1120  001530  0012               	return		;funcret
  1121  001532                     __end_of_setLEDs:
  1122                           	opt stack 0
  1123                           tblptru	equ	0xFF8
  1124                           postinc0	equ	0xFEE
  1125                           wreg	equ	0xFE8
  1126                           status	equ	0xFD8
  1127                           
  1128 ;; *************** function _setLEDY *****************
  1129 ;; Defined at:
  1130 ;;		line 54 in file "ui.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;  v               1    wreg     unsigned char 
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;  v               1   18[COMRAM] unsigned char 
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      void 
  1137 ;; Registers used:
  1138 ;;		wreg
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1144 ;;      Params:         0       0       0       0       0       0       0       0       0
  1145 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1147 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1148 ;;Total ram usage:        1 bytes
  1149 ;; Hardware stack levels used:    1
  1150 ;; Hardware stack levels required when called:    2
  1151 ;; This function calls:
  1152 ;;		Nothing
  1153 ;; This function is called by:
  1154 ;;		_setLEDs
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           	psect	text5
  1159  001558                     __ptext5:
  1160                           	opt stack 0
  1161  001558                     _setLEDY:
  1162                           	opt stack 26
  1163                           
  1164                           ;incstack = 0
  1165                           ;setLEDY@v stored from wreg
  1166  001558  6E13               	movwf	setLEDY@v,c
  1167                           
  1168                           ;ui.c: 55: LATBbits.LB2 = v;
  1169  00155A  B013               	btfsc	setLEDY@v,0,c
  1170  00155C  D002               	bra	u1805
  1171  00155E  948A               	bcf	3978,2,c	;volatile
  1172  001560  D001               	bra	u1806
  1173  001562                     u1805:
  1174  001562  848A               	bsf	3978,2,c	;volatile
  1175  001564                     u1806:
  1176  001564  0012               	return		;funcret
  1177  001566                     __end_of_setLEDY:
  1178                           	opt stack 0
  1179                           tblptru	equ	0xFF8
  1180                           postinc0	equ	0xFEE
  1181                           wreg	equ	0xFE8
  1182                           status	equ	0xFD8
  1183                           
  1184 ;; *************** function _setLEDR *****************
  1185 ;; Defined at:
  1186 ;;		line 50 in file "ui.c"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;  v               1    wreg     unsigned char 
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;  v               1   18[COMRAM] unsigned char 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      void 
  1193 ;; Registers used:
  1194 ;;		wreg
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1200 ;;      Params:         0       0       0       0       0       0       0       0       0
  1201 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1202 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1203 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1204 ;;Total ram usage:        1 bytes
  1205 ;; Hardware stack levels used:    1
  1206 ;; Hardware stack levels required when called:    2
  1207 ;; This function calls:
  1208 ;;		Nothing
  1209 ;; This function is called by:
  1210 ;;		_setLEDs
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           	psect	text6
  1215  001566                     __ptext6:
  1216                           	opt stack 0
  1217  001566                     _setLEDR:
  1218                           	opt stack 26
  1219                           
  1220                           ;incstack = 0
  1221                           ;setLEDR@v stored from wreg
  1222  001566  6E13               	movwf	setLEDR@v,c
  1223                           
  1224                           ;ui.c: 51: LATBbits.LB1 = v;
  1225  001568  B013               	btfsc	setLEDR@v,0,c
  1226  00156A  D002               	bra	u1795
  1227  00156C  928A               	bcf	3978,1,c	;volatile
  1228  00156E  D001               	bra	u1796
  1229  001570                     u1795:
  1230  001570  828A               	bsf	3978,1,c	;volatile
  1231  001572                     u1796:
  1232  001572  0012               	return		;funcret
  1233  001574                     __end_of_setLEDR:
  1234                           	opt stack 0
  1235                           tblptru	equ	0xFF8
  1236                           postinc0	equ	0xFEE
  1237                           wreg	equ	0xFE8
  1238                           status	equ	0xFD8
  1239                           
  1240 ;; *************** function _setLEDG *****************
  1241 ;; Defined at:
  1242 ;;		line 58 in file "ui.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  v               1    wreg     unsigned char 
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;  v               1   18[COMRAM] unsigned char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1256 ;;      Params:         0       0       0       0       0       0       0       0       0
  1257 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1259 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1260 ;;Total ram usage:        1 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    2
  1263 ;; This function calls:
  1264 ;;		Nothing
  1265 ;; This function is called by:
  1266 ;;		_setLEDs
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text7
  1271  001574                     __ptext7:
  1272                           	opt stack 0
  1273  001574                     _setLEDG:
  1274                           	opt stack 26
  1275                           
  1276                           ;incstack = 0
  1277                           ;setLEDG@v stored from wreg
  1278  001574  6E13               	movwf	setLEDG@v,c
  1279                           
  1280                           ;ui.c: 59: LATBbits.LB3 = v;
  1281  001576  B013               	btfsc	setLEDG@v,0,c
  1282  001578  D002               	bra	u1815
  1283  00157A  968A               	bcf	3978,3,c	;volatile
  1284  00157C  D001               	bra	u1816
  1285  00157E                     u1815:
  1286  00157E  868A               	bsf	3978,3,c	;volatile
  1287  001580                     u1816:
  1288  001580  0012               	return		;funcret
  1289  001582                     __end_of_setLEDG:
  1290                           	opt stack 0
  1291                           tblptru	equ	0xFF8
  1292                           postinc0	equ	0xFEE
  1293                           wreg	equ	0xFE8
  1294                           status	equ	0xFD8
  1295                           
  1296 ;; *************** function _calcPID *****************
  1297 ;; Defined at:
  1298 ;;		line 14 in file "main.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;  Kp              3   15[BANK0 ] float 
  1301 ;;  Ki              3   18[BANK0 ] float 
  1302 ;;  Kd              3   21[BANK0 ] float 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  val             2   41[BANK0 ] unsigned int 
  1305 ;;  i               2   43[BANK0 ] int 
  1306 ;;  s2              4   37[BANK0 ] unsigned long 
  1307 ;;  s1              4   33[BANK0 ] unsigned long 
  1308 ;;  pos             2   27[BANK0 ] int 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  2   15[BANK0 ] int 
  1311 ;; Registers used:
  1312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1318 ;;      Params:         0       9       0       0       0       0       0       0       0
  1319 ;;      Locals:         0      21       0       0       0       0       0       0       0
  1320 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1321 ;;      Totals:         2      30       0       0       0       0       0       0       0
  1322 ;;Total ram usage:       32 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    4
  1325 ;; This function calls:
  1326 ;;		___awtoft
  1327 ;;		___ftadd
  1328 ;;		___ftmul
  1329 ;;		___fttol
  1330 ;;		___lldiv
  1331 ;;		___wmul
  1332 ;;		_getCalCNY
  1333 ;; This function is called by:
  1334 ;;		_loop
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text8
  1339  000808                     __ptext8:
  1340                           	opt stack 0
  1341  000808                     _calcPID:
  1342                           	opt stack 25
  1343                           
  1344                           ;main.c: 15: static int prevErr = 0, integral = 0, err;
  1345                           ;main.c: 16: unsigned long long s1 = 0, s2 = 0;
  1346                           
  1347                           ;incstack = 0
  1348  000808  0E00               	movlw	0
  1349  00080A  0100               	movlb	0	; () banked
  1350  00080C  6F81               	movwf	calcPID@s1& (0+255),b
  1351  00080E  0E00               	movlw	0
  1352  000810  6F82               	movwf	(calcPID@s1+1)& (0+255),b
  1353  000812  0E00               	movlw	0
  1354  000814  6F83               	movwf	(calcPID@s1+2)& (0+255),b
  1355  000816  0E00               	movlw	0
  1356  000818  6F84               	movwf	(calcPID@s1+3)& (0+255),b
  1357  00081A  0E00               	movlw	0
  1358  00081C  6F85               	movwf	calcPID@s2& (0+255),b
  1359  00081E  0E00               	movlw	0
  1360  000820  6F86               	movwf	(calcPID@s2+1)& (0+255),b
  1361  000822  0E00               	movlw	0
  1362  000824  6F87               	movwf	(calcPID@s2+2)& (0+255),b
  1363  000826  0E00               	movlw	0
  1364  000828  6F88               	movwf	(calcPID@s2+3)& (0+255),b
  1365                           
  1366                           ;main.c: 17: for(int i = 0; i < 5; i++){
  1367  00082A  0E00               	movlw	0
  1368  00082C  6F8C               	movwf	(calcPID@i+1)& (0+255),b
  1369  00082E  0E00               	movlw	0
  1370  000830  6F8B               	movwf	calcPID@i& (0+255),b
  1371  000832                     l2244:
  1372                           
  1373                           ; BSR set to: 0
  1374  000832  BF8C               	btfsc	(calcPID@i+1)& (0+255),7,b
  1375  000834  D006               	goto	l101
  1376  000836  518C               	movf	(calcPID@i+1)& (0+255),w,b
  1377  000838  E13D               	bnz	l2260
  1378  00083A  0E05               	movlw	5
  1379  00083C  5D8B               	subwf	calcPID@i& (0+255),w,b
  1380  00083E  B0D8               	btfsc	status,0,c
  1381  000840  D039               	goto	u2380
  1382  000842                     l101:
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 18: unsigned int val = getCalCNY(i);
  1386                           
  1387                           ; BSR set to: 0
  1388  000842  C08B  F020         	movff	calcPID@i,getCalCNY@channel
  1389  000846  C08C  F021         	movff	calcPID@i+1,getCalCNY@channel+1
  1390  00084A  EC9E  F006         	call	_getCalCNY	;wreg free
  1391  00084E  C020  F089         	movff	?_getCalCNY,calcPID@val
  1392  000852  C021  F08A         	movff	?_getCalCNY+1,calcPID@val+1
  1393                           
  1394                           ;main.c: 19: s1 += val * (i + 1) * 100;
  1395  000856  0E01               	movlw	1
  1396  000858  0100               	movlb	0	; () banked
  1397  00085A  258B               	addwf	calcPID@i& (0+255),w,b
  1398  00085C  6E1A               	movwf	___wmul@multiplier,c
  1399  00085E  0E00               	movlw	0
  1400  000860  218C               	addwfc	(calcPID@i+1)& (0+255),w,b
  1401  000862  6E1B               	movwf	___wmul@multiplier+1,c
  1402  000864  C089  F01C         	movff	calcPID@val,___wmul@multiplicand
  1403  000868  C08A  F01D         	movff	calcPID@val+1,___wmul@multiplicand+1
  1404  00086C  EC6E  F00A         	call	___wmul	;wreg free
  1405  000870  C01A  F07D         	movff	?___wmul,_calcPID$1220
  1406  000874  C01B  F07E         	movff	?___wmul+1,_calcPID$1220+1
  1407                           
  1408                           ;main.c: 19: s1 += val * (i + 1) * 100;
  1409  000878  C07D  F01A         	movff	_calcPID$1220,___wmul@multiplier
  1410  00087C  C07E  F01B         	movff	_calcPID$1220+1,___wmul@multiplier+1
  1411  000880  0E00               	movlw	0
  1412  000882  6E1D               	movwf	___wmul@multiplicand+1,c
  1413  000884  0E64               	movlw	100
  1414  000886  6E1C               	movwf	___wmul@multiplicand,c
  1415  000888  EC6E  F00A         	call	___wmul	;wreg free
  1416  00088C  501A               	movf	?___wmul,w,c
  1417  00088E  0100               	movlb	0	; () banked
  1418  000890  2781               	addwf	calcPID@s1& (0+255),f,b
  1419  000892  501B               	movf	?___wmul+1,w,c
  1420  000894  2382               	addwfc	(calcPID@s1+1)& (0+255),f,b
  1421  000896  0E00               	movlw	0
  1422  000898  2383               	addwfc	(calcPID@s1+2)& (0+255),f,b
  1423  00089A  0E00               	movlw	0
  1424  00089C  2384               	addwfc	(calcPID@s1+3)& (0+255),f,b
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;main.c: 20: s2 += val;
  1428  00089E  5189               	movf	calcPID@val& (0+255),w,b
  1429  0008A0  2785               	addwf	calcPID@s2& (0+255),f,b
  1430  0008A2  518A               	movf	(calcPID@val+1)& (0+255),w,b
  1431  0008A4  2386               	addwfc	(calcPID@s2+1)& (0+255),f,b
  1432  0008A6  0E00               	movlw	0
  1433  0008A8  2387               	addwfc	(calcPID@s2+2)& (0+255),f,b
  1434  0008AA  0E00               	movlw	0
  1435  0008AC  2388               	addwfc	(calcPID@s2+3)& (0+255),f,b
  1436                           
  1437                           ; BSR set to: 0
  1438  0008AE  4B8B               	infsnz	calcPID@i& (0+255),f,b
  1439  0008B0  2B8C               	incf	(calcPID@i+1)& (0+255),f,b
  1440  0008B2  D7BF               	goto	l2244
  1441  0008B4                     u2380:
  1442  0008B4                     l2260:
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;main.c: 21: }
  1446                           ;main.c: 22: int pos = s1 / s2;
  1447  0008B4  C081  F013         	movff	calcPID@s1,___lldiv@dividend
  1448  0008B8  C082  F014         	movff	calcPID@s1+1,___lldiv@dividend+1
  1449  0008BC  C083  F015         	movff	calcPID@s1+2,___lldiv@dividend+2
  1450  0008C0  C084  F016         	movff	calcPID@s1+3,___lldiv@dividend+3
  1451  0008C4  C085  F017         	movff	calcPID@s2,___lldiv@divisor
  1452  0008C8  C086  F018         	movff	calcPID@s2+1,___lldiv@divisor+1
  1453  0008CC  C087  F019         	movff	calcPID@s2+2,___lldiv@divisor+2
  1454  0008D0  C088  F01A         	movff	calcPID@s2+3,___lldiv@divisor+3
  1455  0008D4  EC78  F009         	call	___lldiv	;wreg free
  1456  0008D8  C013  F07B         	movff	?___lldiv,calcPID@pos
  1457  0008DC  C014  F07C         	movff	?___lldiv+1,calcPID@pos+1
  1458                           
  1459                           ;main.c: 23: prevErr = err;
  1460  0008E0  C099  F09D         	movff	calcPID@err,calcPID@prevErr
  1461  0008E4  C09A  F09E         	movff	calcPID@err+1,calcPID@prevErr+1
  1462                           
  1463                           ;main.c: 24: err = 300 - pos;
  1464  0008E8  C07B  F03A         	movff	calcPID@pos,??_calcPID
  1465  0008EC  C07C  F03B         	movff	calcPID@pos+1,??_calcPID+1
  1466  0008F0  1E3A               	comf	??_calcPID,f,c
  1467  0008F2  1E3B               	comf	??_calcPID+1,f,c
  1468  0008F4  4A3A               	infsnz	??_calcPID,f,c
  1469  0008F6  2A3B               	incf	??_calcPID+1,f,c
  1470  0008F8  0E2C               	movlw	44
  1471  0008FA  243A               	addwf	??_calcPID,w,c
  1472  0008FC  0100               	movlb	0	; () banked
  1473  0008FE  6F99               	movwf	calcPID@err& (0+255),b
  1474  000900  0E01               	movlw	1
  1475  000902  203B               	addwfc	??_calcPID+1,w,c
  1476  000904  6F9A               	movwf	(calcPID@err+1)& (0+255),b
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;main.c: 25: integral += err;
  1480  000906  5199               	movf	calcPID@err& (0+255),w,b
  1481  000908  279B               	addwf	calcPID@integral& (0+255),f,b
  1482  00090A  519A               	movf	(calcPID@err+1)& (0+255),w,b
  1483  00090C  239C               	addwfc	(calcPID@integral+1)& (0+255),f,b
  1484                           
  1485                           ;main.c: 26: return ((int) (Kp * (float) err) + (Ki * (float) integral) + (Kd * (float) 
      +                          (err - prevErr)));
  1486  00090E  C06F  F022         	movff	calcPID@Kp,___ftmul@f2
  1487  000912  C070  F023         	movff	calcPID@Kp+1,___ftmul@f2+1
  1488  000916  C071  F024         	movff	calcPID@Kp+2,___ftmul@f2+2
  1489  00091A  C099  F01B         	movff	calcPID@err,___awtoft@c
  1490  00091E  C09A  F01C         	movff	calcPID@err+1,___awtoft@c+1
  1491  000922  EC0C  F00A         	call	___awtoft	;wreg free
  1492  000926  C01B  F01F         	movff	?___awtoft,___ftmul@f1
  1493  00092A  C01C  F020         	movff	?___awtoft+1,___ftmul@f1+1
  1494  00092E  C01D  F021         	movff	?___awtoft+2,___ftmul@f1+2
  1495  000932  ECC9  F007         	call	___ftmul	;wreg free
  1496  000936  C01F  F02E         	movff	?___ftmul,___fttol@f1
  1497  00093A  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  1498  00093E  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  1499  000942  EC4D  F007         	call	___fttol	;wreg free
  1500  000946  C02E  F07F         	movff	?___fttol,_calcPID$1221
  1501  00094A  C02F  F080         	movff	?___fttol+1,_calcPID$1221+1
  1502                           
  1503                           ;main.c: 26: return ((int) (Kp * (float) err) + (Ki * (float) integral) + (Kd * (float) 
      +                          (err - prevErr)));
  1504  00094E  C072  F022         	movff	calcPID@Ki,___ftmul@f2
  1505  000952  C073  F023         	movff	calcPID@Ki+1,___ftmul@f2+1
  1506  000956  C074  F024         	movff	calcPID@Ki+2,___ftmul@f2+2
  1507  00095A  C09B  F01B         	movff	calcPID@integral,___awtoft@c
  1508  00095E  C09C  F01C         	movff	calcPID@integral+1,___awtoft@c+1
  1509  000962  EC0C  F00A         	call	___awtoft	;wreg free
  1510  000966  C01B  F01F         	movff	?___awtoft,___ftmul@f1
  1511  00096A  C01C  F020         	movff	?___awtoft+1,___ftmul@f1+1
  1512  00096E  C01D  F021         	movff	?___awtoft+2,___ftmul@f1+2
  1513  000972  ECC9  F007         	call	___ftmul	;wreg free
  1514  000976  C01F  F069         	movff	?___ftmul,___ftadd@f2
  1515  00097A  C020  F06A         	movff	?___ftmul+1,___ftadd@f2+1
  1516  00097E  C021  F06B         	movff	?___ftmul+2,___ftadd@f2+2
  1517  000982  C07F  F01B         	movff	_calcPID$1221,___awtoft@c
  1518  000986  C080  F01C         	movff	_calcPID$1221+1,___awtoft@c+1
  1519  00098A  EC0C  F00A         	call	___awtoft	;wreg free
  1520  00098E  C01B  F066         	movff	?___awtoft,___ftadd@f1
  1521  000992  C01C  F067         	movff	?___awtoft+1,___ftadd@f1+1
  1522  000996  C01D  F068         	movff	?___awtoft+2,___ftadd@f1+2
  1523  00099A  EC0F  F005         	call	___ftadd	;wreg free
  1524  00099E  C066  F078         	movff	?___ftadd,_calcPID$1222
  1525  0009A2  C067  F079         	movff	?___ftadd+1,_calcPID$1222+1
  1526  0009A6  C068  F07A         	movff	?___ftadd+2,_calcPID$1222+2
  1527                           
  1528                           ;main.c: 26: return ((int) (Kp * (float) err) + (Ki * (float) integral) + (Kd * (float) 
      +                          (err - prevErr)));
  1529  0009AA  C075  F022         	movff	calcPID@Kd,___ftmul@f2
  1530  0009AE  C076  F023         	movff	calcPID@Kd+1,___ftmul@f2+1
  1531  0009B2  C077  F024         	movff	calcPID@Kd+2,___ftmul@f2+2
  1532  0009B6  C09D  F03A         	movff	calcPID@prevErr,??_calcPID
  1533  0009BA  C09E  F03B         	movff	calcPID@prevErr+1,??_calcPID+1
  1534  0009BE  1E3A               	comf	??_calcPID,f,c
  1535  0009C0  1E3B               	comf	??_calcPID+1,f,c
  1536  0009C2  4A3A               	infsnz	??_calcPID,f,c
  1537  0009C4  2A3B               	incf	??_calcPID+1,f,c
  1538  0009C6  0100               	movlb	0	; () banked
  1539  0009C8  5199               	movf	calcPID@err& (0+255),w,b
  1540  0009CA  243A               	addwf	??_calcPID,w,c
  1541  0009CC  6E1B               	movwf	___awtoft@c,c
  1542  0009CE  519A               	movf	(calcPID@err+1)& (0+255),w,b
  1543  0009D0  203B               	addwfc	??_calcPID+1,w,c
  1544  0009D2  6E1C               	movwf	___awtoft@c+1,c
  1545  0009D4  EC0C  F00A         	call	___awtoft	;wreg free
  1546  0009D8  C01B  F01F         	movff	?___awtoft,___ftmul@f1
  1547  0009DC  C01C  F020         	movff	?___awtoft+1,___ftmul@f1+1
  1548  0009E0  C01D  F021         	movff	?___awtoft+2,___ftmul@f1+2
  1549  0009E4  ECC9  F007         	call	___ftmul	;wreg free
  1550  0009E8  C01F  F069         	movff	?___ftmul,___ftadd@f2
  1551  0009EC  C020  F06A         	movff	?___ftmul+1,___ftadd@f2+1
  1552  0009F0  C021  F06B         	movff	?___ftmul+2,___ftadd@f2+2
  1553  0009F4  C078  F066         	movff	_calcPID$1222,___ftadd@f1
  1554  0009F8  C079  F067         	movff	_calcPID$1222+1,___ftadd@f1+1
  1555  0009FC  C07A  F068         	movff	_calcPID$1222+2,___ftadd@f1+2
  1556  000A00  EC0F  F005         	call	___ftadd	;wreg free
  1557  000A04  C066  F02E         	movff	?___ftadd,___fttol@f1
  1558  000A08  C067  F02F         	movff	?___ftadd+1,___fttol@f1+1
  1559  000A0C  C068  F030         	movff	?___ftadd+2,___fttol@f1+2
  1560  000A10  EC4D  F007         	call	___fttol	;wreg free
  1561  000A14  C02E  F06F         	movff	?___fttol,?_calcPID
  1562  000A18  C02F  F070         	movff	?___fttol+1,?_calcPID+1
  1563  000A1C  0012               	return	
  1564  000A1E                     __end_of_calcPID:
  1565                           	opt stack 0
  1566                           tblptru	equ	0xFF8
  1567                           postinc0	equ	0xFEE
  1568                           wreg	equ	0xFE8
  1569                           status	equ	0xFD8
  1570                           
  1571 ;; *************** function _getCalCNY *****************
  1572 ;; Defined at:
  1573 ;;		line 24 in file "calibration.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  channel         2   31[COMRAM] unsigned int 
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;  val             2   43[COMRAM] unsigned int 
  1578 ;; Return value:  Size  Location     Type
  1579 ;;                  2   31[COMRAM] unsigned int 
  1580 ;; Registers used:
  1581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1587 ;;      Params:         2       0       0       0       0       0       0       0       0
  1588 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1589 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1590 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1591 ;;Total ram usage:       14 bytes
  1592 ;; Hardware stack levels used:    1
  1593 ;; Hardware stack levels required when called:    3
  1594 ;; This function calls:
  1595 ;;		___lwdiv
  1596 ;;		___wmul
  1597 ;;		_getCNY
  1598 ;; This function is called by:
  1599 ;;		_calcPID
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           	psect	text9
  1604  000D3C                     __ptext9:
  1605                           	opt stack 0
  1606  000D3C                     _getCalCNY:
  1607                           	opt stack 25
  1608                           
  1609                           ;calibration.c: 25: unsigned int val = getCNY(channel);
  1610                           
  1611                           ;incstack = 0
  1612  000D3C  5020               	movf	getCalCNY@channel,w,c
  1613  000D3E  ECB9  F009         	call	_getCNY
  1614  000D42  C013  F02C         	movff	?_getCNY,getCalCNY@val
  1615  000D46  C014  F02D         	movff	?_getCNY+1,getCalCNY@val+1
  1616                           
  1617                           ;calibration.c: 26: mins[channel] = ((val) < (mins[channel]) ? (val) : (mins[channel]));
  1618  000D4A  90D8               	bcf	status,0,c
  1619  000D4C  3420               	rlcf	getCalCNY@channel,w,c
  1620  000D4E  6ED9               	movwf	fsr2l,c
  1621  000D50  3421               	rlcf	getCalCNY@channel+1,w,c
  1622  000D52  6EDA               	movwf	fsr2h,c
  1623  000D54  0E3C               	movlw	low _mins
  1624  000D56  26D9               	addwf	fsr2l,f,c
  1625  000D58  0E00               	movlw	high _mins
  1626  000D5A  22DA               	addwfc	fsr2h,f,c
  1627  000D5C  50DE               	movf	postinc2,w,c
  1628  000D5E  5C2C               	subwf	getCalCNY@val,w,c
  1629  000D60  50DE               	movf	postinc2,w,c
  1630  000D62  582D               	subwfb	getCalCNY@val+1,w,c
  1631  000D64  A0D8               	btfss	status,0,c
  1632  000D66  D00E               	goto	l203
  1633  000D68  90D8               	bcf	status,0,c
  1634  000D6A  3420               	rlcf	getCalCNY@channel,w,c
  1635  000D6C  6ED9               	movwf	fsr2l,c
  1636  000D6E  3421               	rlcf	getCalCNY@channel+1,w,c
  1637  000D70  6EDA               	movwf	fsr2h,c
  1638  000D72  0E3C               	movlw	low _mins
  1639  000D74  26D9               	addwf	fsr2l,f,c
  1640  000D76  0E00               	movlw	high _mins
  1641  000D78  22DA               	addwfc	fsr2h,f,c
  1642  000D7A  CFDE F028          	movff	postinc2,_getCalCNY$639
  1643  000D7E  CFDD F029          	movff	postdec2,_getCalCNY$639+1
  1644  000D82  D004               	goto	l205
  1645  000D84                     l203:
  1646  000D84  C02C  F028         	movff	getCalCNY@val,_getCalCNY$639
  1647  000D88  C02D  F029         	movff	getCalCNY@val+1,_getCalCNY$639+1
  1648  000D8C                     l205:
  1649  000D8C  90D8               	bcf	status,0,c
  1650  000D8E  3420               	rlcf	getCalCNY@channel,w,c
  1651  000D90  6ED9               	movwf	fsr2l,c
  1652  000D92  3421               	rlcf	getCalCNY@channel+1,w,c
  1653  000D94  6EDA               	movwf	fsr2h,c
  1654  000D96  0E3C               	movlw	low _mins
  1655  000D98  26D9               	addwf	fsr2l,f,c
  1656  000D9A  0E00               	movlw	high _mins
  1657  000D9C  22DA               	addwfc	fsr2h,f,c
  1658  000D9E  C028  FFDE         	movff	_getCalCNY$639,postinc2
  1659  000DA2  C029  FFDD         	movff	_getCalCNY$639+1,postdec2
  1660                           
  1661                           ;calibration.c: 27: maxs[channel] = ((val) > (maxs[channel]) ? (val) : (maxs[channel]));
  1662  000DA6  90D8               	bcf	status,0,c
  1663  000DA8  3420               	rlcf	getCalCNY@channel,w,c
  1664  000DAA  6ED9               	movwf	fsr2l,c
  1665  000DAC  3421               	rlcf	getCalCNY@channel+1,w,c
  1666  000DAE  6EDA               	movwf	fsr2h,c
  1667  000DB0  0E8F               	movlw	low _maxs
  1668  000DB2  26D9               	addwf	fsr2l,f,c
  1669  000DB4  0E00               	movlw	high _maxs
  1670  000DB6  22DA               	addwfc	fsr2h,f,c
  1671  000DB8  502C               	movf	getCalCNY@val,w,c
  1672  000DBA  5CDE               	subwf	postinc2,w,c
  1673  000DBC  502D               	movf	getCalCNY@val+1,w,c
  1674  000DBE  58DE               	subwfb	postinc2,w,c
  1675  000DC0  A0D8               	btfss	status,0,c
  1676  000DC2  D00E               	goto	l207
  1677  000DC4  90D8               	bcf	status,0,c
  1678  000DC6  3420               	rlcf	getCalCNY@channel,w,c
  1679  000DC8  6ED9               	movwf	fsr2l,c
  1680  000DCA  3421               	rlcf	getCalCNY@channel+1,w,c
  1681  000DCC  6EDA               	movwf	fsr2h,c
  1682  000DCE  0E8F               	movlw	low _maxs
  1683  000DD0  26D9               	addwf	fsr2l,f,c
  1684  000DD2  0E00               	movlw	high _maxs
  1685  000DD4  22DA               	addwfc	fsr2h,f,c
  1686  000DD6  CFDE F02A          	movff	postinc2,_getCalCNY$640
  1687  000DDA  CFDD F02B          	movff	postdec2,_getCalCNY$640+1
  1688  000DDE  D004               	goto	l209
  1689  000DE0                     l207:
  1690  000DE0  C02C  F02A         	movff	getCalCNY@val,_getCalCNY$640
  1691  000DE4  C02D  F02B         	movff	getCalCNY@val+1,_getCalCNY$640+1
  1692  000DE8                     l209:
  1693  000DE8  90D8               	bcf	status,0,c
  1694  000DEA  3420               	rlcf	getCalCNY@channel,w,c
  1695  000DEC  6ED9               	movwf	fsr2l,c
  1696  000DEE  3421               	rlcf	getCalCNY@channel+1,w,c
  1697  000DF0  6EDA               	movwf	fsr2h,c
  1698  000DF2  0E8F               	movlw	low _maxs
  1699  000DF4  26D9               	addwf	fsr2l,f,c
  1700  000DF6  0E00               	movlw	high _maxs
  1701  000DF8  22DA               	addwfc	fsr2h,f,c
  1702  000DFA  C02A  FFDE         	movff	_getCalCNY$640,postinc2
  1703  000DFE  C02B  FFDD         	movff	_getCalCNY$640+1,postdec2
  1704                           
  1705                           ;calibration.c: 28: val = (0 + ((1000 - 0) / (maxs[channel] - mins[channel])) * (val - m
      +                          ins[channel]));
  1706  000E02  90D8               	bcf	status,0,c
  1707  000E04  3420               	rlcf	getCalCNY@channel,w,c
  1708  000E06  6ED9               	movwf	fsr2l,c
  1709  000E08  3421               	rlcf	getCalCNY@channel+1,w,c
  1710  000E0A  6EDA               	movwf	fsr2h,c
  1711  000E0C  0E3C               	movlw	low _mins
  1712  000E0E  26D9               	addwf	fsr2l,f,c
  1713  000E10  0E00               	movlw	high _mins
  1714  000E12  22DA               	addwfc	fsr2h,f,c
  1715  000E14  CFDE F022          	movff	postinc2,??_getCalCNY
  1716  000E18  CFDD F023          	movff	postdec2,??_getCalCNY+1
  1717  000E1C  1E22               	comf	??_getCalCNY,f,c
  1718  000E1E  1E23               	comf	??_getCalCNY+1,f,c
  1719  000E20  4A22               	infsnz	??_getCalCNY,f,c
  1720  000E22  2A23               	incf	??_getCalCNY+1,f,c
  1721  000E24  502C               	movf	getCalCNY@val,w,c
  1722  000E26  2422               	addwf	??_getCalCNY,w,c
  1723  000E28  6E1A               	movwf	___wmul@multiplier,c
  1724  000E2A  502D               	movf	getCalCNY@val+1,w,c
  1725  000E2C  2023               	addwfc	??_getCalCNY+1,w,c
  1726  000E2E  6E1B               	movwf	___wmul@multiplier+1,c
  1727  000E30  90D8               	bcf	status,0,c
  1728  000E32  3420               	rlcf	getCalCNY@channel,w,c
  1729  000E34  6ED9               	movwf	fsr2l,c
  1730  000E36  3421               	rlcf	getCalCNY@channel+1,w,c
  1731  000E38  6EDA               	movwf	fsr2h,c
  1732  000E3A  0E8F               	movlw	low _maxs
  1733  000E3C  26D9               	addwf	fsr2l,f,c
  1734  000E3E  0E00               	movlw	high _maxs
  1735  000E40  22DA               	addwfc	fsr2h,f,c
  1736  000E42  CFDE F024          	movff	postinc2,??_getCalCNY+2
  1737  000E46  CFDD F025          	movff	postdec2,??_getCalCNY+3
  1738  000E4A  90D8               	bcf	status,0,c
  1739  000E4C  3420               	rlcf	getCalCNY@channel,w,c
  1740  000E4E  6ED9               	movwf	fsr2l,c
  1741  000E50  3421               	rlcf	getCalCNY@channel+1,w,c
  1742  000E52  6EDA               	movwf	fsr2h,c
  1743  000E54  0E3C               	movlw	low _mins
  1744  000E56  26D9               	addwf	fsr2l,f,c
  1745  000E58  0E00               	movlw	high _mins
  1746  000E5A  22DA               	addwfc	fsr2h,f,c
  1747  000E5C  CFDE F026          	movff	postinc2,??_getCalCNY+4
  1748  000E60  CFDD F027          	movff	postdec2,??_getCalCNY+5
  1749  000E64  1E26               	comf	??_getCalCNY+4,f,c
  1750  000E66  1E27               	comf	??_getCalCNY+5,f,c
  1751  000E68  4A26               	infsnz	??_getCalCNY+4,f,c
  1752  000E6A  2A27               	incf	??_getCalCNY+5,f,c
  1753  000E6C  5024               	movf	??_getCalCNY+2,w,c
  1754  000E6E  2426               	addwf	??_getCalCNY+4,w,c
  1755  000E70  6E15               	movwf	___lwdiv@divisor,c
  1756  000E72  5025               	movf	??_getCalCNY+3,w,c
  1757  000E74  2027               	addwfc	??_getCalCNY+5,w,c
  1758  000E76  6E16               	movwf	___lwdiv@divisor+1,c
  1759  000E78  0E03               	movlw	3
  1760  000E7A  6E14               	movwf	___lwdiv@dividend+1,c
  1761  000E7C  0EE8               	movlw	232
  1762  000E7E  6E13               	movwf	___lwdiv@dividend,c
  1763  000E80  ECE3  F009         	call	___lwdiv	;wreg free
  1764  000E84  C013  F01C         	movff	?___lwdiv,___wmul@multiplicand
  1765  000E88  C014  F01D         	movff	?___lwdiv+1,___wmul@multiplicand+1
  1766  000E8C  EC6E  F00A         	call	___wmul	;wreg free
  1767  000E90  C01A  F02C         	movff	?___wmul,getCalCNY@val
  1768  000E94  C01B  F02D         	movff	?___wmul+1,getCalCNY@val+1
  1769  000E98  0012               	return		;funcret
  1770  000E9A                     __end_of_getCalCNY:
  1771                           	opt stack 0
  1772                           tblptru	equ	0xFF8
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postinc2	equ	0xFDE
  1776                           postdec2	equ	0xFDD
  1777                           fsr2h	equ	0xFDA
  1778                           fsr2l	equ	0xFD9
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _getCNY *****************
  1782 ;; Defined at:
  1783 ;;		line 56 in file "CNY.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  channel         1    wreg     unsigned char 
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;  channel         1   22[COMRAM] unsigned char 
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  2   18[COMRAM] unsigned int 
  1790 ;; Registers used:
  1791 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1797 ;;      Params:         2       0       0       0       0       0       0       0       0
  1798 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1799 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1800 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1801 ;;Total ram usage:        5 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    2
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_getCalCNY
  1808 ;;		_calibrateCNY
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text10
  1813  001372                     __ptext10:
  1814                           	opt stack 0
  1815  001372                     _getCNY:
  1816                           	opt stack 25
  1817                           
  1818                           ;incstack = 0
  1819                           ;getCNY@channel stored from wreg
  1820  001372  6E17               	movwf	getCNY@channel,c
  1821                           
  1822                           ;CNY.c: 57: if(channel >= 5) return 0;
  1823  001374  0E04               	movlw	4
  1824  001376  6417               	cpfsgt	getCNY@channel,c
  1825  001378  D005               	goto	l23
  1826  00137A  0E00               	movlw	0
  1827  00137C  6E14               	movwf	?_getCNY+1,c
  1828  00137E  0E00               	movlw	0
  1829  001380  6E13               	movwf	?_getCNY,c
  1830  001382  0012               	return	
  1831  001384                     l23:
  1832                           
  1833                           ;CNY.c: 58: ADCON0bits.CHS = channels[channel];
  1834  001384  5017               	movf	getCNY@channel,w,c
  1835  001386  0D01               	mullw	1
  1836  001388  0E01               	movlw	low _channels
  1837  00138A  24F3               	addwf	prodl,w,c
  1838  00138C  6EF6               	movwf	tblptrl,c
  1839  00138E  0E08               	movlw	high _channels
  1840  001390  20F4               	addwfc	prodh,w,c
  1841  001392  6EF7               	movwf	tblptrh,c
  1842  001394                     	if	0	;There are less than 3 active tblptr bytes
  1843  001394                     	endif
  1844  001394  0008               	tblrd		*
  1845  001396  CFF5 F015          	movff	tablat,??_getCNY
  1846  00139A  4615               	rlncf	??_getCNY,f,c
  1847  00139C  4615               	rlncf	??_getCNY,f,c
  1848  00139E  50C2               	movf	4034,w,c	;volatile
  1849  0013A0  1815               	xorwf	??_getCNY,w,c
  1850  0013A2  0BC3               	andlw	-61
  1851  0013A4  1815               	xorwf	??_getCNY,w,c
  1852  0013A6  6EC2               	movwf	4034,c	;volatile
  1853                           
  1854                           ;CNY.c: 59: ADCON0bits.ADON = 1;
  1855  0013A8  80C2               	bsf	4034,0,c	;volatile
  1856                           
  1857                           ;CNY.c: 60: ADCON0bits.GO = 1;
  1858  0013AA  82C2               	bsf	4034,1,c	;volatile
  1859  0013AC  B2C2               	btfsc	4034,1,c	;volatile
  1860  0013AE  D7FE               	goto	l26
  1861                           
  1862                           ;CNY.c: 62: ADCON0bits.ADON = 0;
  1863  0013B0  90C2               	bcf	4034,0,c	;volatile
  1864                           
  1865                           ;CNY.c: 63: return ((ADRESH << 8) + ADRESL);
  1866  0013B2  50C4               	movf	4036,w,c	;volatile
  1867  0013B4  6E16               	movwf	(??_getCNY+1)& (0+255),c
  1868  0013B6  6A15               	clrf	??_getCNY& (0+255),c
  1869  0013B8  50C3               	movf	4035,w,c	;volatile
  1870  0013BA  2415               	addwf	??_getCNY,w,c
  1871  0013BC  6E13               	movwf	?_getCNY,c
  1872  0013BE  0E00               	movlw	0
  1873  0013C0  2016               	addwfc	??_getCNY+1,w,c
  1874  0013C2  6E14               	movwf	?_getCNY+1,c
  1875  0013C4  0012               	return	
  1876  0013C6                     __end_of_getCNY:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           tblptrh	equ	0xFF7
  1880                           tblptrl	equ	0xFF6
  1881                           tablat	equ	0xFF5
  1882                           prodh	equ	0xFF4
  1883                           prodl	equ	0xFF3
  1884                           postinc0	equ	0xFEE
  1885                           wreg	equ	0xFE8
  1886                           postinc2	equ	0xFDE
  1887                           postdec2	equ	0xFDD
  1888                           fsr2h	equ	0xFDA
  1889                           fsr2l	equ	0xFD9
  1890                           status	equ	0xFD8
  1891                           
  1892 ;; *************** function ___wmul *****************
  1893 ;; Defined at:
  1894 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  multiplier      2   25[COMRAM] unsigned int 
  1897 ;;  multiplicand    2   27[COMRAM] unsigned int 
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  product         2   29[COMRAM] unsigned int 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  2   25[COMRAM] unsigned int 
  1902 ;; Registers used:
  1903 ;;		wreg, status,2, status,0, prodl, prodh
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1909 ;;      Params:         4       0       0       0       0       0       0       0       0
  1910 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1912 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1913 ;;Total ram usage:        6 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    2
  1916 ;; This function calls:
  1917 ;;		Nothing
  1918 ;; This function is called by:
  1919 ;;		_calcPID
  1920 ;;		_getCalCNY
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           	psect	text11
  1925  0014DC                     __ptext11:
  1926                           	opt stack 0
  1927  0014DC                     ___wmul:
  1928                           	opt stack 25
  1929                           
  1930                           ;incstack = 0
  1931  0014DC  501A               	movf	___wmul@multiplier,w,c
  1932  0014DE  021C               	mulwf	___wmul@multiplicand,c
  1933  0014E0  CFF3 F01E          	movff	prodl,___wmul@product
  1934  0014E4  CFF4 F01F          	movff	prodh,___wmul@product+1
  1935  0014E8  501A               	movf	___wmul@multiplier,w,c
  1936  0014EA  021D               	mulwf	___wmul@multiplicand+1,c
  1937  0014EC  50F3               	movf	prodl,w,c
  1938  0014EE  261F               	addwf	___wmul@product+1,f,c
  1939  0014F0  501B               	movf	___wmul@multiplier+1,w,c
  1940  0014F2  021C               	mulwf	___wmul@multiplicand,c
  1941  0014F4  50F3               	movf	prodl,w,c
  1942  0014F6  261F               	addwf	___wmul@product+1,f,c
  1943  0014F8  C01E  F01A         	movff	___wmul@product,?___wmul
  1944  0014FC  C01F  F01B         	movff	___wmul@product+1,?___wmul+1
  1945  001500  0012               	return	
  1946  001502                     __end_of___wmul:
  1947                           	opt stack 0
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           prodh	equ	0xFF4
  1953                           prodl	equ	0xFF3
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postinc2	equ	0xFDE
  1957                           postdec2	equ	0xFDD
  1958                           fsr2h	equ	0xFDA
  1959                           fsr2l	equ	0xFD9
  1960                           status	equ	0xFD8
  1961                           
  1962 ;; *************** function ___lwdiv *****************
  1963 ;; Defined at:
  1964 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;  dividend        2   18[COMRAM] unsigned int 
  1967 ;;  divisor         2   20[COMRAM] unsigned int 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;  quotient        2   23[COMRAM] unsigned int 
  1970 ;;  counter         1   22[COMRAM] unsigned char 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  2   18[COMRAM] unsigned int 
  1973 ;; Registers used:
  1974 ;;		wreg, status,2, status,0
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1980 ;;      Params:         4       0       0       0       0       0       0       0       0
  1981 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1983 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1984 ;;Total ram usage:        7 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    2
  1987 ;; This function calls:
  1988 ;;		Nothing
  1989 ;; This function is called by:
  1990 ;;		_getCalCNY
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text12
  1995  0013C6                     __ptext12:
  1996                           	opt stack 0
  1997  0013C6                     ___lwdiv:
  1998                           	opt stack 25
  1999                           
  2000                           ;incstack = 0
  2001  0013C6  0E00               	movlw	0
  2002  0013C8  6E19               	movwf	___lwdiv@quotient+1,c
  2003  0013CA  0E00               	movlw	0
  2004  0013CC  6E18               	movwf	___lwdiv@quotient,c
  2005  0013CE  5015               	movf	___lwdiv@divisor,w,c
  2006  0013D0  1016               	iorwf	___lwdiv@divisor+1,w,c
  2007  0013D2  B4D8               	btfsc	status,2,c
  2008  0013D4  D01C               	goto	l619
  2009  0013D6  0E01               	movlw	1
  2010  0013D8  6E17               	movwf	___lwdiv@counter,c
  2011  0013DA  D004               	goto	l614
  2012  0013DC  90D8               	bcf	status,0,c
  2013  0013DE  3615               	rlcf	___lwdiv@divisor,f,c
  2014  0013E0  3616               	rlcf	___lwdiv@divisor+1,f,c
  2015  0013E2  2A17               	incf	___lwdiv@counter,f,c
  2016  0013E4                     l614:
  2017  0013E4  AE16               	btfss	___lwdiv@divisor+1,7,c
  2018  0013E6  D7FA               	goto	l615
  2019  0013E8                     u1750:
  2020  0013E8  90D8               	bcf	status,0,c
  2021  0013EA  3618               	rlcf	___lwdiv@quotient,f,c
  2022  0013EC  3619               	rlcf	___lwdiv@quotient+1,f,c
  2023  0013EE  5015               	movf	___lwdiv@divisor,w,c
  2024  0013F0  5C13               	subwf	___lwdiv@dividend,w,c
  2025  0013F2  5016               	movf	___lwdiv@divisor+1,w,c
  2026  0013F4  5814               	subwfb	___lwdiv@dividend+1,w,c
  2027  0013F6  A0D8               	btfss	status,0,c
  2028  0013F8  D005               	goto	l618
  2029  0013FA  5015               	movf	___lwdiv@divisor,w,c
  2030  0013FC  5E13               	subwf	___lwdiv@dividend,f,c
  2031  0013FE  5016               	movf	___lwdiv@divisor+1,w,c
  2032  001400  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2033  001402  8018               	bsf	___lwdiv@quotient,0,c
  2034  001404                     l618:
  2035  001404  90D8               	bcf	status,0,c
  2036  001406  3216               	rrcf	___lwdiv@divisor+1,f,c
  2037  001408  3215               	rrcf	___lwdiv@divisor,f,c
  2038  00140A  2E17               	decfsz	___lwdiv@counter,f,c
  2039  00140C  D7ED               	goto	u1750
  2040  00140E                     l619:
  2041  00140E  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
  2042  001412  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2043  001416  0012               	return		;funcret
  2044  001418                     __end_of___lwdiv:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           prodh	equ	0xFF4
  2051                           prodl	equ	0xFF3
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           postinc2	equ	0xFDE
  2055                           postdec2	equ	0xFDD
  2056                           fsr2h	equ	0xFDA
  2057                           fsr2l	equ	0xFD9
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function ___lldiv *****************
  2061 ;; Defined at:
  2062 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  dividend        4   18[COMRAM] unsigned long 
  2065 ;;  divisor         4   22[COMRAM] unsigned long 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;  quotient        4   26[COMRAM] unsigned long 
  2068 ;;  counter         1   30[COMRAM] unsigned char 
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  4   18[COMRAM] unsigned long 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2, status,0
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2078 ;;      Params:         8       0       0       0       0       0       0       0       0
  2079 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2080 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2081 ;;      Totals:        13       0       0       0       0       0       0       0       0
  2082 ;;Total ram usage:       13 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    2
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		_calcPID
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           	psect	text13
  2093  0012F0                     __ptext13:
  2094                           	opt stack 0
  2095  0012F0                     ___lldiv:
  2096                           	opt stack 26
  2097                           
  2098                           ;incstack = 0
  2099  0012F0  0E00               	movlw	0
  2100  0012F2  6E1B               	movwf	___lldiv@quotient,c
  2101  0012F4  0E00               	movlw	0
  2102  0012F6  6E1C               	movwf	___lldiv@quotient+1,c
  2103  0012F8  0E00               	movlw	0
  2104  0012FA  6E1D               	movwf	___lldiv@quotient+2,c
  2105  0012FC  0E00               	movlw	0
  2106  0012FE  6E1E               	movwf	___lldiv@quotient+3,c
  2107  001300  5017               	movf	___lldiv@divisor,w,c
  2108  001302  1018               	iorwf	___lldiv@divisor+1,w,c
  2109  001304  1019               	iorwf	___lldiv@divisor+2,w,c
  2110  001306  101A               	iorwf	___lldiv@divisor+3,w,c
  2111  001308  B4D8               	btfsc	status,2,c
  2112  00130A  D02A               	goto	l566
  2113  00130C  0E01               	movlw	1
  2114  00130E  6E1F               	movwf	___lldiv@counter,c
  2115  001310  D006               	goto	l561
  2116  001312  90D8               	bcf	status,0,c
  2117  001314  3617               	rlcf	___lldiv@divisor,f,c
  2118  001316  3618               	rlcf	___lldiv@divisor+1,f,c
  2119  001318  3619               	rlcf	___lldiv@divisor+2,f,c
  2120  00131A  361A               	rlcf	___lldiv@divisor+3,f,c
  2121  00131C  2A1F               	incf	___lldiv@counter,f,c
  2122  00131E                     l561:
  2123  00131E  AE1A               	btfss	___lldiv@divisor+3,7,c
  2124  001320  D7F8               	goto	l562
  2125  001322                     u2250:
  2126  001322  90D8               	bcf	status,0,c
  2127  001324  361B               	rlcf	___lldiv@quotient,f,c
  2128  001326  361C               	rlcf	___lldiv@quotient+1,f,c
  2129  001328  361D               	rlcf	___lldiv@quotient+2,f,c
  2130  00132A  361E               	rlcf	___lldiv@quotient+3,f,c
  2131  00132C  5017               	movf	___lldiv@divisor,w,c
  2132  00132E  5C13               	subwf	___lldiv@dividend,w,c
  2133  001330  5018               	movf	___lldiv@divisor+1,w,c
  2134  001332  5814               	subwfb	___lldiv@dividend+1,w,c
  2135  001334  5019               	movf	___lldiv@divisor+2,w,c
  2136  001336  5815               	subwfb	___lldiv@dividend+2,w,c
  2137  001338  501A               	movf	___lldiv@divisor+3,w,c
  2138  00133A  5816               	subwfb	___lldiv@dividend+3,w,c
  2139  00133C  A0D8               	btfss	status,0,c
  2140  00133E  D009               	goto	l565
  2141  001340  5017               	movf	___lldiv@divisor,w,c
  2142  001342  5E13               	subwf	___lldiv@dividend,f,c
  2143  001344  5018               	movf	___lldiv@divisor+1,w,c
  2144  001346  5A14               	subwfb	___lldiv@dividend+1,f,c
  2145  001348  5019               	movf	___lldiv@divisor+2,w,c
  2146  00134A  5A15               	subwfb	___lldiv@dividend+2,f,c
  2147  00134C  501A               	movf	___lldiv@divisor+3,w,c
  2148  00134E  5A16               	subwfb	___lldiv@dividend+3,f,c
  2149  001350  801B               	bsf	___lldiv@quotient,0,c
  2150  001352                     l565:
  2151  001352  90D8               	bcf	status,0,c
  2152  001354  321A               	rrcf	___lldiv@divisor+3,f,c
  2153  001356  3219               	rrcf	___lldiv@divisor+2,f,c
  2154  001358  3218               	rrcf	___lldiv@divisor+1,f,c
  2155  00135A  3217               	rrcf	___lldiv@divisor,f,c
  2156  00135C  2E1F               	decfsz	___lldiv@counter,f,c
  2157  00135E  D7E1               	goto	u2250
  2158  001360                     l566:
  2159  001360  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  2160  001364  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  2161  001368  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  2162  00136C  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  2163  001370  0012               	return		;funcret
  2164  001372                     __end_of___lldiv:
  2165                           	opt stack 0
  2166                           tblptru	equ	0xFF8
  2167                           tblptrh	equ	0xFF7
  2168                           tblptrl	equ	0xFF6
  2169                           tablat	equ	0xFF5
  2170                           prodh	equ	0xFF4
  2171                           prodl	equ	0xFF3
  2172                           postinc0	equ	0xFEE
  2173                           wreg	equ	0xFE8
  2174                           postinc2	equ	0xFDE
  2175                           postdec2	equ	0xFDD
  2176                           fsr2h	equ	0xFDA
  2177                           fsr2l	equ	0xFD9
  2178                           status	equ	0xFD8
  2179                           
  2180 ;; *************** function ___fttol *****************
  2181 ;; Defined at:
  2182 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;  f1              3   45[COMRAM] float 
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;  lval            4    1[BANK0 ] unsigned long 
  2187 ;;  exp1            1    5[BANK0 ] unsigned char 
  2188 ;;  sign1           1    0[BANK0 ] unsigned char 
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  4   45[COMRAM] long 
  2191 ;; Registers used:
  2192 ;;		wreg, status,2, status,0
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2198 ;;      Params:         4       0       0       0       0       0       0       0       0
  2199 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2200 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2201 ;;      Totals:         9       6       0       0       0       0       0       0       0
  2202 ;;Total ram usage:       15 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    2
  2205 ;; This function calls:
  2206 ;;		Nothing
  2207 ;; This function is called by:
  2208 ;;		_calcPID
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text14
  2213  000E9A                     __ptext14:
  2214                           	opt stack 0
  2215  000E9A                     ___fttol:
  2216                           	opt stack 26
  2217                           
  2218                           ;incstack = 0
  2219  000E9A  C030  F032         	movff	___fttol@f1+2,??___fttol
  2220  000E9E  6A33               	clrf	(??___fttol+1)& (0+255),c
  2221  000EA0  6A34               	clrf	(??___fttol+2)& (0+255),c
  2222  000EA2  342F               	rlcf	___fttol@f1+1,w,c
  2223  000EA4  3632               	rlcf	??___fttol& (0+255),f,c
  2224  000EA6  E301               	bnc	u2161
  2225  000EA8  8033               	bsf	(??___fttol+1)& (0+255),0,c
  2226  000EAA                     u2161:
  2227  000EAA  5032               	movf	??___fttol,w,c
  2228  000EAC  0100               	movlb	0	; () banked
  2229  000EAE  6F65               	movwf	___fttol@exp1& (0+255),b
  2230  000EB0  5165               	movf	___fttol@exp1& (0+255),w,b
  2231  000EB2  A4D8               	btfss	status,2,c
  2232  000EB4  D009               	goto	l525
  2233                           
  2234                           ; BSR set to: 0
  2235  000EB6  0E00               	movlw	0
  2236  000EB8  6E2E               	movwf	?___fttol,c
  2237  000EBA  0E00               	movlw	0
  2238  000EBC  6E2F               	movwf	?___fttol+1,c
  2239  000EBE  0E00               	movlw	0
  2240  000EC0  6E30               	movwf	?___fttol+2,c
  2241  000EC2  0E00               	movlw	0
  2242  000EC4  6E31               	movwf	?___fttol+3,c
  2243                           
  2244                           ; BSR set to: 0
  2245  000EC6  0012               	return	
  2246  000EC8                     l525:
  2247                           
  2248                           ; BSR set to: 0
  2249                           
  2250                           ; BSR set to: 0
  2251  000EC8  0E17               	movlw	23
  2252  000ECA  6E32               	movwf	??___fttol& (0+255),c
  2253  000ECC  C02E  F033         	movff	___fttol@f1,??___fttol+1
  2254  000ED0  C02F  F034         	movff	___fttol@f1+1,??___fttol+2
  2255  000ED4  C030  F035         	movff	___fttol@f1+2,??___fttol+3
  2256  000ED8  2832               	incf	??___fttol,w,c
  2257  000EDA  6E36               	movwf	(??___fttol+4)& (0+255),c
  2258  000EDC  D004               	goto	u2180
  2259  000EDE                     u2185:
  2260  000EDE  90D8               	bcf	status,0,c
  2261  000EE0  3235               	rrcf	??___fttol+3,f,c
  2262  000EE2  3234               	rrcf	??___fttol+2,f,c
  2263  000EE4  3233               	rrcf	??___fttol+1,f,c
  2264  000EE6                     u2180:
  2265  000EE6  2E36               	decfsz	(??___fttol+4)& (0+255),f,c
  2266  000EE8  D7FA               	goto	u2185
  2267  000EEA  5033               	movf	??___fttol+1,w,c
  2268  000EEC  0100               	movlb	0	; () banked
  2269  000EEE  6F60               	movwf	___fttol@sign1& (0+255),b
  2270                           
  2271                           ; BSR set to: 0
  2272  000EF0  8E2F               	bsf	___fttol@f1+1,7,c
  2273                           
  2274                           ; BSR set to: 0
  2275  000EF2  0EFF               	movlw	255
  2276  000EF4  162E               	andwf	___fttol@f1,f,c
  2277  000EF6  0EFF               	movlw	255
  2278  000EF8  162F               	andwf	___fttol@f1+1,f,c
  2279  000EFA  0E00               	movlw	0
  2280  000EFC  1630               	andwf	___fttol@f1+2,f,c
  2281                           
  2282                           ; BSR set to: 0
  2283  000EFE  502E               	movf	___fttol@f1,w,c
  2284  000F00  6F61               	movwf	___fttol@lval& (0+255),b
  2285  000F02  502F               	movf	___fttol@f1+1,w,c
  2286  000F04  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  2287  000F06  5030               	movf	___fttol@f1+2,w,c
  2288  000F08  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  2289  000F0A  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  2290                           
  2291                           ; BSR set to: 0
  2292  000F0C  0E8E               	movlw	142
  2293  000F0E  5F65               	subwf	___fttol@exp1& (0+255),f,b
  2294                           
  2295                           ; BSR set to: 0
  2296  000F10  AF65               	btfss	___fttol@exp1& (0+255),7,b
  2297  000F12  D016               	goto	l527
  2298                           
  2299                           ; BSR set to: 0
  2300  000F14  5165               	movf	___fttol@exp1& (0+255),w,b
  2301  000F16  0A80               	xorlw	128
  2302  000F18  0F8F               	addlw	143
  2303  000F1A  B0D8               	btfsc	status,0,c
  2304  000F1C  D009               	goto	l528
  2305                           
  2306                           ; BSR set to: 0
  2307  000F1E  0E00               	movlw	0
  2308  000F20  6E2E               	movwf	?___fttol,c
  2309  000F22  0E00               	movlw	0
  2310  000F24  6E2F               	movwf	?___fttol+1,c
  2311  000F26  0E00               	movlw	0
  2312  000F28  6E30               	movwf	?___fttol+2,c
  2313  000F2A  0E00               	movlw	0
  2314  000F2C  6E31               	movwf	?___fttol+3,c
  2315                           
  2316                           ; BSR set to: 0
  2317  000F2E  0012               	return	
  2318  000F30                     l528:
  2319                           
  2320                           ; BSR set to: 0
  2321                           
  2322                           ; BSR set to: 0
  2323                           
  2324                           ; BSR set to: 0
  2325  000F30  90D8               	bcf	status,0,c
  2326  000F32  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2327  000F34  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2328  000F36  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2329  000F38  3361               	rrcf	___fttol@lval& (0+255),f,b
  2330                           
  2331                           ; BSR set to: 0
  2332  000F3A  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  2333  000F3C  D7F9               	goto	l528
  2334                           
  2335                           ; BSR set to: 0
  2336  000F3E  D015               	goto	u2220
  2337  000F40                     l527:
  2338                           
  2339                           ; BSR set to: 0
  2340                           
  2341                           ; BSR set to: 0
  2342  000F40  0E17               	movlw	23
  2343  000F42  6565               	cpfsgt	___fttol@exp1& (0+255),b
  2344  000F44  D00F               	goto	l533
  2345                           
  2346                           ; BSR set to: 0
  2347  000F46  0E00               	movlw	0
  2348  000F48  6E2E               	movwf	?___fttol,c
  2349  000F4A  0E00               	movlw	0
  2350  000F4C  6E2F               	movwf	?___fttol+1,c
  2351  000F4E  0E00               	movlw	0
  2352  000F50  6E30               	movwf	?___fttol+2,c
  2353  000F52  0E00               	movlw	0
  2354  000F54  6E31               	movwf	?___fttol+3,c
  2355                           
  2356                           ; BSR set to: 0
  2357  000F56  0012               	return	
  2358  000F58                     
  2359                           ; BSR set to: 0
  2360                           
  2361                           ; BSR set to: 0
  2362  000F58  90D8               	bcf	status,0,c
  2363  000F5A  3761               	rlcf	___fttol@lval& (0+255),f,b
  2364  000F5C  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2365  000F5E  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2366  000F60  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2367  000F62  0765               	decf	___fttol@exp1& (0+255),f,b
  2368  000F64                     l533:
  2369                           
  2370                           ; BSR set to: 0
  2371                           
  2372                           ; BSR set to: 0
  2373  000F64  5165               	movf	___fttol@exp1& (0+255),w,b
  2374  000F66  A4D8               	btfss	status,2,c
  2375  000F68  D7F7               	goto	l534
  2376  000F6A                     u2220:
  2377                           
  2378                           ; BSR set to: 0
  2379                           
  2380                           ; BSR set to: 0
  2381                           
  2382                           ; BSR set to: 0
  2383  000F6A  5160               	movf	___fttol@sign1& (0+255),w,b
  2384  000F6C  B4D8               	btfsc	status,2,c
  2385  000F6E  D008               	goto	l536
  2386                           
  2387                           ; BSR set to: 0
  2388  000F70  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  2389  000F72  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  2390  000F74  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  2391  000F76  6D61               	negf	___fttol@lval& (0+255),b
  2392  000F78  0E00               	movlw	0
  2393  000F7A  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2394  000F7C  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2395  000F7E  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2396  000F80                     l536:
  2397                           
  2398                           ; BSR set to: 0
  2399                           
  2400                           ; BSR set to: 0
  2401  000F80  C061  F02E         	movff	___fttol@lval,?___fttol
  2402  000F84  C062  F02F         	movff	___fttol@lval+1,?___fttol+1
  2403  000F88  C063  F030         	movff	___fttol@lval+2,?___fttol+2
  2404  000F8C  C064  F031         	movff	___fttol@lval+3,?___fttol+3
  2405  000F90  0012               	return	
  2406  000F92                     __end_of___fttol:
  2407                           	opt stack 0
  2408                           tblptru	equ	0xFF8
  2409                           tblptrh	equ	0xFF7
  2410                           tblptrl	equ	0xFF6
  2411                           tablat	equ	0xFF5
  2412                           prodh	equ	0xFF4
  2413                           prodl	equ	0xFF3
  2414                           postinc0	equ	0xFEE
  2415                           wreg	equ	0xFE8
  2416                           postinc2	equ	0xFDE
  2417                           postdec2	equ	0xFDD
  2418                           fsr2h	equ	0xFDA
  2419                           fsr2l	equ	0xFD9
  2420                           status	equ	0xFD8
  2421                           
  2422 ;; *************** function ___ftmul *****************
  2423 ;; Defined at:
  2424 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  f1              3   30[COMRAM] float 
  2427 ;;  f2              3   33[COMRAM] float 
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;  f3_as_produc    3   40[COMRAM] unsigned um
  2430 ;;  sign            1   44[COMRAM] unsigned char 
  2431 ;;  cntr            1   43[COMRAM] unsigned char 
  2432 ;;  exp             1   39[COMRAM] unsigned char 
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  3   30[COMRAM] float 
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, status,0, cstack
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2442 ;;      Params:         6       0       0       0       0       0       0       0       0
  2443 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2444 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2445 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2446 ;;Total ram usage:       15 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    3
  2449 ;; This function calls:
  2450 ;;		___ftpack
  2451 ;; This function is called by:
  2452 ;;		_calcPID
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text15
  2457  000F92                     __ptext15:
  2458                           	opt stack 0
  2459  000F92                     ___ftmul:
  2460                           	opt stack 25
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;incstack = 0
  2464  000F92  C021  F025         	movff	___ftmul@f1+2,??___ftmul
  2465  000F96  6A26               	clrf	(??___ftmul+1)& (0+255),c
  2466  000F98  6A27               	clrf	(??___ftmul+2)& (0+255),c
  2467  000F9A  3420               	rlcf	___ftmul@f1+1,w,c
  2468  000F9C  3625               	rlcf	??___ftmul& (0+255),f,c
  2469  000F9E  E301               	bnc	u2031
  2470  000FA0  8026               	bsf	(??___ftmul+1)& (0+255),0,c
  2471  000FA2                     u2031:
  2472  000FA2  5025               	movf	??___ftmul,w,c
  2473  000FA4  6E28               	movwf	___ftmul@exp,c
  2474  000FA6  5028               	movf	___ftmul@exp,w,c
  2475  000FA8  A4D8               	btfss	status,2,c
  2476  000FAA  D007               	goto	l504
  2477  000FAC  0E00               	movlw	0
  2478  000FAE  6E1F               	movwf	?___ftmul,c
  2479  000FB0  0E00               	movlw	0
  2480  000FB2  6E20               	movwf	?___ftmul+1,c
  2481  000FB4  0E00               	movlw	0
  2482  000FB6  6E21               	movwf	?___ftmul+2,c
  2483  000FB8  0012               	return	
  2484  000FBA                     l504:
  2485  000FBA  C024  F025         	movff	___ftmul@f2+2,??___ftmul
  2486  000FBE  6A26               	clrf	(??___ftmul+1)& (0+255),c
  2487  000FC0  6A27               	clrf	(??___ftmul+2)& (0+255),c
  2488  000FC2  3423               	rlcf	___ftmul@f2+1,w,c
  2489  000FC4  3625               	rlcf	??___ftmul& (0+255),f,c
  2490  000FC6  E301               	bnc	u2051
  2491  000FC8  8026               	bsf	(??___ftmul+1)& (0+255),0,c
  2492  000FCA                     u2051:
  2493  000FCA  5025               	movf	??___ftmul,w,c
  2494  000FCC  6E2D               	movwf	___ftmul@sign,c
  2495  000FCE  502D               	movf	___ftmul@sign,w,c
  2496  000FD0  A4D8               	btfss	status,2,c
  2497  000FD2  D007               	goto	l506
  2498  000FD4  0E00               	movlw	0
  2499  000FD6  6E1F               	movwf	?___ftmul,c
  2500  000FD8  0E00               	movlw	0
  2501  000FDA  6E20               	movwf	?___ftmul+1,c
  2502  000FDC  0E00               	movlw	0
  2503  000FDE  6E21               	movwf	?___ftmul+2,c
  2504  000FE0  0012               	return	
  2505  000FE2                     l506:
  2506  000FE2  502D               	movf	___ftmul@sign,w,c
  2507  000FE4  0F7B               	addlw	123
  2508  000FE6  2628               	addwf	___ftmul@exp,f,c
  2509  000FE8  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
  2510  000FEC  5024               	movf	___ftmul@f2+2,w,c
  2511  000FEE  1A2D               	xorwf	___ftmul@sign,f,c
  2512  000FF0  0E80               	movlw	128
  2513  000FF2  162D               	andwf	___ftmul@sign,f,c
  2514  000FF4  8E20               	bsf	___ftmul@f1+1,7,c
  2515  000FF6  8E23               	bsf	___ftmul@f2+1,7,c
  2516  000FF8  0EFF               	movlw	255
  2517  000FFA  1622               	andwf	___ftmul@f2,f,c
  2518  000FFC  0EFF               	movlw	255
  2519  000FFE  1623               	andwf	___ftmul@f2+1,f,c
  2520  001000  0E00               	movlw	0
  2521  001002  1624               	andwf	___ftmul@f2+2,f,c
  2522  001004  0E00               	movlw	0
  2523  001006  6E29               	movwf	___ftmul@f3_as_product,c
  2524  001008  0E00               	movlw	0
  2525  00100A  6E2A               	movwf	___ftmul@f3_as_product+1,c
  2526  00100C  0E00               	movlw	0
  2527  00100E  6E2B               	movwf	___ftmul@f3_as_product+2,c
  2528  001010  0E07               	movlw	7
  2529  001012  6E2C               	movwf	___ftmul@cntr,c
  2530  001014  A01F               	btfss	___ftmul@f1,0,c
  2531  001016  D006               	goto	l508
  2532  001018  5022               	movf	___ftmul@f2,w,c
  2533  00101A  2629               	addwf	___ftmul@f3_as_product,f,c
  2534  00101C  5023               	movf	___ftmul@f2+1,w,c
  2535  00101E  222A               	addwfc	___ftmul@f3_as_product+1,f,c
  2536  001020  5024               	movf	___ftmul@f2+2,w,c
  2537  001022  222B               	addwfc	___ftmul@f3_as_product+2,f,c
  2538  001024                     l508:
  2539  001024  90D8               	bcf	status,0,c
  2540  001026  3221               	rrcf	___ftmul@f1+2,f,c
  2541  001028  3220               	rrcf	___ftmul@f1+1,f,c
  2542  00102A  321F               	rrcf	___ftmul@f1,f,c
  2543  00102C  90D8               	bcf	status,0,c
  2544  00102E  3622               	rlcf	___ftmul@f2,f,c
  2545  001030  3623               	rlcf	___ftmul@f2+1,f,c
  2546  001032  3624               	rlcf	___ftmul@f2+2,f,c
  2547  001034  2E2C               	decfsz	___ftmul@cntr,f,c
  2548  001036  D7EE               	goto	l507
  2549  001038  0E09               	movlw	9
  2550  00103A  6E2C               	movwf	___ftmul@cntr,c
  2551  00103C  A01F               	btfss	___ftmul@f1,0,c
  2552  00103E  D006               	goto	l511
  2553  001040  5022               	movf	___ftmul@f2,w,c
  2554  001042  2629               	addwf	___ftmul@f3_as_product,f,c
  2555  001044  5023               	movf	___ftmul@f2+1,w,c
  2556  001046  222A               	addwfc	___ftmul@f3_as_product+1,f,c
  2557  001048  5024               	movf	___ftmul@f2+2,w,c
  2558  00104A  222B               	addwfc	___ftmul@f3_as_product+2,f,c
  2559  00104C                     l511:
  2560  00104C  90D8               	bcf	status,0,c
  2561  00104E  3221               	rrcf	___ftmul@f1+2,f,c
  2562  001050  3220               	rrcf	___ftmul@f1+1,f,c
  2563  001052  321F               	rrcf	___ftmul@f1,f,c
  2564  001054  90D8               	bcf	status,0,c
  2565  001056  322B               	rrcf	___ftmul@f3_as_product+2,f,c
  2566  001058  322A               	rrcf	___ftmul@f3_as_product+1,f,c
  2567  00105A  3229               	rrcf	___ftmul@f3_as_product,f,c
  2568  00105C  2E2C               	decfsz	___ftmul@cntr,f,c
  2569  00105E  D7EE               	goto	l510
  2570  001060  C029  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  2571  001064  C02A  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2572  001068  C02B  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2573  00106C  C028  F016         	movff	___ftmul@exp,___ftpack@exp
  2574  001070  C02D  F017         	movff	___ftmul@sign,___ftpack@sign
  2575  001074  EC43  F008         	call	___ftpack	;wreg free
  2576  001078  C013  F01F         	movff	?___ftpack,?___ftmul
  2577  00107C  C014  F020         	movff	?___ftpack+1,?___ftmul+1
  2578  001080  C015  F021         	movff	?___ftpack+2,?___ftmul+2
  2579  001084  0012               	return	
  2580  001086                     __end_of___ftmul:
  2581                           	opt stack 0
  2582                           tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           prodh	equ	0xFF4
  2587                           prodl	equ	0xFF3
  2588                           postinc0	equ	0xFEE
  2589                           wreg	equ	0xFE8
  2590                           postinc2	equ	0xFDE
  2591                           postdec2	equ	0xFDD
  2592                           fsr2h	equ	0xFDA
  2593                           fsr2l	equ	0xFD9
  2594                           status	equ	0xFD8
  2595                           
  2596 ;; *************** function ___ftadd *****************
  2597 ;; Defined at:
  2598 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;  f1              3    6[BANK0 ] float 
  2601 ;;  f2              3    9[BANK0 ] float 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  exp1            1   14[BANK0 ] unsigned char 
  2604 ;;  exp2            1   13[BANK0 ] unsigned char 
  2605 ;;  sign            1   12[BANK0 ] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  3    6[BANK0 ] float 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2, status,0, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2615 ;;      Params:         0       6       0       0       0       0       0       0       0
  2616 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2617 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2618 ;;      Totals:         3       9       0       0       0       0       0       0       0
  2619 ;;Total ram usage:       12 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    3
  2622 ;; This function calls:
  2623 ;;		___ftpack
  2624 ;; This function is called by:
  2625 ;;		_calcPID
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text16
  2630  000A1E                     __ptext16:
  2631                           	opt stack 0
  2632  000A1E                     ___ftadd:
  2633                           	opt stack 25
  2634                           
  2635                           ;incstack = 0
  2636  000A1E  C068  F037         	movff	___ftadd@f1+2,??___ftadd
  2637  000A22  6A38               	clrf	(??___ftadd+1)& (0+255),c
  2638  000A24  6A39               	clrf	(??___ftadd+2)& (0+255),c
  2639  000A26  0100               	movlb	0	; () banked
  2640  000A28  3567               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  2641  000A2A  3637               	rlcf	??___ftadd& (0+255),f,c
  2642  000A2C  E301               	bnc	u1821
  2643  000A2E  8038               	bsf	(??___ftadd+1)& (0+255),0,c
  2644  000A30                     u1821:
  2645  000A30  5037               	movf	??___ftadd,w,c
  2646  000A32  6F6E               	movwf	___ftadd@exp1& (0+255),b
  2647  000A34  C06B  F037         	movff	___ftadd@f2+2,??___ftadd
  2648  000A38  6A38               	clrf	(??___ftadd+1)& (0+255),c
  2649  000A3A  6A39               	clrf	(??___ftadd+2)& (0+255),c
  2650  000A3C  356A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  2651  000A3E  3637               	rlcf	??___ftadd& (0+255),f,c
  2652  000A40  E301               	bnc	u1831
  2653  000A42  8038               	bsf	(??___ftadd+1)& (0+255),0,c
  2654  000A44                     u1831:
  2655  000A44  5037               	movf	??___ftadd,w,c
  2656  000A46  6F6D               	movwf	___ftadd@exp2& (0+255),b
  2657                           
  2658                           ; BSR set to: 0
  2659  000A48  516E               	movf	___ftadd@exp1& (0+255),w,b
  2660  000A4A  B4D8               	btfsc	status,2,c
  2661  000A4C  D00B               	goto	u1860
  2662                           
  2663                           ; BSR set to: 0
  2664  000A4E  516D               	movf	___ftadd@exp2& (0+255),w,b
  2665  000A50  5D6E               	subwf	___ftadd@exp1& (0+255),w,b
  2666  000A52  B0D8               	btfsc	status,0,c
  2667  000A54  D00E               	goto	l456
  2668                           
  2669                           ; BSR set to: 0
  2670  000A56  516E               	movf	___ftadd@exp1& (0+255),w,b
  2671  000A58  0800               	sublw	0
  2672  000A5A  256D               	addwf	___ftadd@exp2& (0+255),w,b
  2673  000A5C  6E37               	movwf	??___ftadd& (0+255),c
  2674  000A5E  0E18               	movlw	24
  2675  000A60  6437               	cpfsgt	??___ftadd,c
  2676  000A62  D007               	goto	l456
  2677  000A64                     u1860:
  2678                           
  2679                           ; BSR set to: 0
  2680  000A64  C069  F066         	movff	___ftadd@f2,?___ftadd
  2681  000A68  C06A  F067         	movff	___ftadd@f2+1,?___ftadd+1
  2682  000A6C  C06B  F068         	movff	___ftadd@f2+2,?___ftadd+2
  2683  000A70  0012               	return	
  2684  000A72                     l456:
  2685                           
  2686                           ; BSR set to: 0
  2687                           
  2688                           ; BSR set to: 0
  2689  000A72  516D               	movf	___ftadd@exp2& (0+255),w,b
  2690  000A74  B4D8               	btfsc	status,2,c
  2691  000A76  D00B               	goto	u1890
  2692                           
  2693                           ; BSR set to: 0
  2694  000A78  516E               	movf	___ftadd@exp1& (0+255),w,b
  2695  000A7A  5D6D               	subwf	___ftadd@exp2& (0+255),w,b
  2696  000A7C  B0D8               	btfsc	status,0,c
  2697  000A7E  D00E               	goto	l460
  2698                           
  2699                           ; BSR set to: 0
  2700  000A80  516D               	movf	___ftadd@exp2& (0+255),w,b
  2701  000A82  0800               	sublw	0
  2702  000A84  256E               	addwf	___ftadd@exp1& (0+255),w,b
  2703  000A86  6E37               	movwf	??___ftadd& (0+255),c
  2704  000A88  0E18               	movlw	24
  2705  000A8A  6437               	cpfsgt	??___ftadd,c
  2706  000A8C  D007               	goto	l460
  2707  000A8E                     u1890:
  2708                           
  2709                           ; BSR set to: 0
  2710  000A8E  C066  F066         	movff	___ftadd@f1,?___ftadd
  2711  000A92  C067  F067         	movff	___ftadd@f1+1,?___ftadd+1
  2712  000A96  C068  F068         	movff	___ftadd@f1+2,?___ftadd+2
  2713  000A9A  0012               	return	
  2714  000A9C                     l460:
  2715                           
  2716                           ; BSR set to: 0
  2717                           
  2718                           ; BSR set to: 0
  2719  000A9C  0E06               	movlw	6
  2720  000A9E  6F6C               	movwf	___ftadd@sign& (0+255),b
  2721                           
  2722                           ; BSR set to: 0
  2723  000AA0  BF68               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  2724                           
  2725                           ; BSR set to: 0
  2726  000AA2  8F6C               	bsf	___ftadd@sign& (0+255),7,b
  2727                           
  2728                           ; BSR set to: 0
  2729                           
  2730                           ; BSR set to: 0
  2731  000AA4  BF6B               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  2732                           
  2733                           ; BSR set to: 0
  2734  000AA6  8D6C               	bsf	___ftadd@sign& (0+255),6,b
  2735                           
  2736                           ; BSR set to: 0
  2737  000AA8  8F67               	bsf	(___ftadd@f1+1)& (0+255),7,b
  2738                           
  2739                           ; BSR set to: 0
  2740  000AAA  0EFF               	movlw	255
  2741  000AAC  1766               	andwf	___ftadd@f1& (0+255),f,b
  2742  000AAE  0EFF               	movlw	255
  2743  000AB0  1767               	andwf	(___ftadd@f1+1)& (0+255),f,b
  2744  000AB2  0E00               	movlw	0
  2745  000AB4  1768               	andwf	(___ftadd@f1+2)& (0+255),f,b
  2746  000AB6  8F6A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  2747                           
  2748                           ; BSR set to: 0
  2749  000AB8  0EFF               	movlw	255
  2750  000ABA  1769               	andwf	___ftadd@f2& (0+255),f,b
  2751  000ABC  0EFF               	movlw	255
  2752  000ABE  176A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  2753  000AC0  0E00               	movlw	0
  2754  000AC2  176B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  2755                           
  2756                           ; BSR set to: 0
  2757  000AC4  516D               	movf	___ftadd@exp2& (0+255),w,b
  2758  000AC6  5D6E               	subwf	___ftadd@exp1& (0+255),w,b
  2759  000AC8  B0D8               	btfsc	status,0,c
  2760  000ACA  D01B               	goto	l465
  2761  000ACC                     u1920:
  2762                           
  2763                           ; BSR set to: 0
  2764                           
  2765                           ; BSR set to: 0
  2766  000ACC  90D8               	bcf	status,0,c
  2767  000ACE  3769               	rlcf	___ftadd@f2& (0+255),f,b
  2768  000AD0  376A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  2769  000AD2  376B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  2770  000AD4  076D               	decf	___ftadd@exp2& (0+255),f,b
  2771                           
  2772                           ; BSR set to: 0
  2773  000AD6  516E               	movf	___ftadd@exp1& (0+255),w,b
  2774  000AD8  196D               	xorwf	___ftadd@exp2& (0+255),w,b
  2775  000ADA  B4D8               	btfsc	status,2,c
  2776  000ADC  D00D               	goto	l470
  2777                           
  2778                           ; BSR set to: 0
  2779  000ADE  076C               	decf	___ftadd@sign& (0+255),f,b
  2780  000AE0  C06C  F037         	movff	___ftadd@sign,??___ftadd
  2781  000AE4  0E07               	movlw	7
  2782  000AE6  1637               	andwf	??___ftadd,f,c
  2783  000AE8  B4D8               	btfsc	status,2,c
  2784  000AEA  D006               	goto	l470
  2785  000AEC  D7EF               	goto	u1920
  2786  000AEE                     
  2787                           ; BSR set to: 0
  2788                           
  2789                           ; BSR set to: 0
  2790  000AEE  90D8               	bcf	status,0,c
  2791  000AF0  3368               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  2792  000AF2  3367               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  2793  000AF4  3366               	rrcf	___ftadd@f1& (0+255),f,b
  2794  000AF6  2B6E               	incf	___ftadd@exp1& (0+255),f,b
  2795  000AF8                     l470:
  2796                           
  2797                           ; BSR set to: 0
  2798                           
  2799                           ; BSR set to: 0
  2800  000AF8  516D               	movf	___ftadd@exp2& (0+255),w,b
  2801  000AFA  196E               	xorwf	___ftadd@exp1& (0+255),w,b
  2802  000AFC  B4D8               	btfsc	status,2,c
  2803  000AFE  D01F               	goto	u1990
  2804  000B00  D7F6               	goto	l471
  2805  000B02                     l465:
  2806                           
  2807                           ; BSR set to: 0
  2808                           
  2809                           ; BSR set to: 0
  2810  000B02  516E               	movf	___ftadd@exp1& (0+255),w,b
  2811  000B04  5D6D               	subwf	___ftadd@exp2& (0+255),w,b
  2812  000B06  B0D8               	btfsc	status,0,c
  2813  000B08  D01A               	goto	u1990
  2814  000B0A                     u1960:
  2815                           
  2816                           ; BSR set to: 0
  2817                           
  2818                           ; BSR set to: 0
  2819  000B0A  90D8               	bcf	status,0,c
  2820  000B0C  3766               	rlcf	___ftadd@f1& (0+255),f,b
  2821  000B0E  3767               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  2822  000B10  3768               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  2823  000B12  076E               	decf	___ftadd@exp1& (0+255),f,b
  2824                           
  2825                           ; BSR set to: 0
  2826  000B14  516E               	movf	___ftadd@exp1& (0+255),w,b
  2827  000B16  196D               	xorwf	___ftadd@exp2& (0+255),w,b
  2828  000B18  B4D8               	btfsc	status,2,c
  2829  000B1A  D00D               	goto	l479
  2830                           
  2831                           ; BSR set to: 0
  2832  000B1C  076C               	decf	___ftadd@sign& (0+255),f,b
  2833  000B1E  C06C  F037         	movff	___ftadd@sign,??___ftadd
  2834  000B22  0E07               	movlw	7
  2835  000B24  1637               	andwf	??___ftadd,f,c
  2836  000B26  B4D8               	btfsc	status,2,c
  2837  000B28  D006               	goto	l479
  2838  000B2A  D7EF               	goto	u1960
  2839  000B2C                     
  2840                           ; BSR set to: 0
  2841                           
  2842                           ; BSR set to: 0
  2843  000B2C  90D8               	bcf	status,0,c
  2844  000B2E  336B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  2845  000B30  336A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  2846  000B32  3369               	rrcf	___ftadd@f2& (0+255),f,b
  2847  000B34  2B6D               	incf	___ftadd@exp2& (0+255),f,b
  2848  000B36                     l479:
  2849                           
  2850                           ; BSR set to: 0
  2851                           
  2852                           ; BSR set to: 0
  2853  000B36  516D               	movf	___ftadd@exp2& (0+255),w,b
  2854  000B38  196E               	xorwf	___ftadd@exp1& (0+255),w,b
  2855  000B3A  A4D8               	btfss	status,2,c
  2856  000B3C  D7F7               	goto	l480
  2857  000B3E                     u1990:
  2858                           
  2859                           ; BSR set to: 0
  2860                           
  2861                           ; BSR set to: 0
  2862                           
  2863                           ; BSR set to: 0
  2864  000B3E  AF6C               	btfss	___ftadd@sign& (0+255),7,b
  2865  000B40  D00C               	goto	l482
  2866                           
  2867                           ; BSR set to: 0
  2868  000B42  0EFF               	movlw	255
  2869  000B44  1B66               	xorwf	___ftadd@f1& (0+255),f,b
  2870  000B46  0EFF               	movlw	255
  2871  000B48  1B67               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  2872  000B4A  0EFF               	movlw	255
  2873  000B4C  1B68               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  2874  000B4E  0E01               	movlw	1
  2875  000B50  2766               	addwf	___ftadd@f1& (0+255),f,b
  2876  000B52  0E00               	movlw	0
  2877  000B54  2367               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  2878  000B56  0E00               	movlw	0
  2879  000B58  2368               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  2880  000B5A                     l482:
  2881                           
  2882                           ; BSR set to: 0
  2883  000B5A  AD6C               	btfss	___ftadd@sign& (0+255),6,b
  2884  000B5C  D00C               	goto	l483
  2885                           
  2886                           ; BSR set to: 0
  2887  000B5E  0EFF               	movlw	255
  2888  000B60  1B69               	xorwf	___ftadd@f2& (0+255),f,b
  2889  000B62  0EFF               	movlw	255
  2890  000B64  1B6A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2891  000B66  0EFF               	movlw	255
  2892  000B68  1B6B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2893  000B6A  0E01               	movlw	1
  2894  000B6C  2769               	addwf	___ftadd@f2& (0+255),f,b
  2895  000B6E  0E00               	movlw	0
  2896  000B70  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2897  000B72  0E00               	movlw	0
  2898  000B74  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2899  000B76                     l483:
  2900                           
  2901                           ; BSR set to: 0
  2902                           
  2903                           ; BSR set to: 0
  2904  000B76  0E00               	movlw	0
  2905  000B78  6F6C               	movwf	___ftadd@sign& (0+255),b
  2906                           
  2907                           ; BSR set to: 0
  2908  000B7A  5166               	movf	___ftadd@f1& (0+255),w,b
  2909  000B7C  2769               	addwf	___ftadd@f2& (0+255),f,b
  2910  000B7E  5167               	movf	(___ftadd@f1+1)& (0+255),w,b
  2911  000B80  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2912  000B82  5168               	movf	(___ftadd@f1+2)& (0+255),w,b
  2913  000B84  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2914                           
  2915                           ; BSR set to: 0
  2916  000B86  AF6B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2917  000B88  D00E               	goto	l484
  2918                           
  2919                           ; BSR set to: 0
  2920  000B8A  0EFF               	movlw	255
  2921  000B8C  1B69               	xorwf	___ftadd@f2& (0+255),f,b
  2922  000B8E  0EFF               	movlw	255
  2923  000B90  1B6A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2924  000B92  0EFF               	movlw	255
  2925  000B94  1B6B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2926  000B96  0E01               	movlw	1
  2927  000B98  2769               	addwf	___ftadd@f2& (0+255),f,b
  2928  000B9A  0E00               	movlw	0
  2929  000B9C  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2930  000B9E  0E00               	movlw	0
  2931  000BA0  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2932                           
  2933                           ; BSR set to: 0
  2934  000BA2  0E01               	movlw	1
  2935  000BA4  6F6C               	movwf	___ftadd@sign& (0+255),b
  2936  000BA6                     l484:
  2937                           
  2938                           ; BSR set to: 0
  2939                           
  2940                           ; BSR set to: 0
  2941  000BA6  C069  F013         	movff	___ftadd@f2,___ftpack@arg
  2942  000BAA  C06A  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  2943  000BAE  C06B  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  2944  000BB2  C06E  F016         	movff	___ftadd@exp1,___ftpack@exp
  2945  000BB6  C06C  F017         	movff	___ftadd@sign,___ftpack@sign
  2946  000BBA  EC43  F008         	call	___ftpack	;wreg free
  2947  000BBE  C013  F066         	movff	?___ftpack,?___ftadd
  2948  000BC2  C014  F067         	movff	?___ftpack+1,?___ftadd+1
  2949  000BC6  C015  F068         	movff	?___ftpack+2,?___ftadd+2
  2950  000BCA  0012               	return	
  2951  000BCC                     __end_of___ftadd:
  2952                           	opt stack 0
  2953                           tblptru	equ	0xFF8
  2954                           tblptrh	equ	0xFF7
  2955                           tblptrl	equ	0xFF6
  2956                           tablat	equ	0xFF5
  2957                           prodh	equ	0xFF4
  2958                           prodl	equ	0xFF3
  2959                           postinc0	equ	0xFEE
  2960                           wreg	equ	0xFE8
  2961                           postinc2	equ	0xFDE
  2962                           postdec2	equ	0xFDD
  2963                           fsr2h	equ	0xFDA
  2964                           fsr2l	equ	0xFD9
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function ___awtoft *****************
  2968 ;; Defined at:
  2969 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  c               2   26[COMRAM] int 
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  sign            1   29[COMRAM] unsigned char 
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  3   26[COMRAM] float 
  2976 ;; Registers used:
  2977 ;;		wreg, status,2, status,0, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2983 ;;      Params:         3       0       0       0       0       0       0       0       0
  2984 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2986 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2987 ;;Total ram usage:        4 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:    3
  2990 ;; This function calls:
  2991 ;;		___ftpack
  2992 ;; This function is called by:
  2993 ;;		_calcPID
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           	psect	text17
  2998  001418                     __ptext17:
  2999                           	opt stack 0
  3000  001418                     ___awtoft:
  3001                           	opt stack 25
  3002                           
  3003                           ;incstack = 0
  3004  001418  0E00               	movlw	0
  3005  00141A  6E1E               	movwf	___awtoft@sign,c
  3006  00141C  AE1C               	btfss	___awtoft@c+1,7,c
  3007  00141E  D006               	goto	l406
  3008  001420  6C1B               	negf	___awtoft@c,c
  3009  001422  1E1C               	comf	___awtoft@c+1,f,c
  3010  001424  B0D8               	btfsc	status,0,c
  3011  001426  2A1C               	incf	___awtoft@c+1,f,c
  3012  001428  0E01               	movlw	1
  3013  00142A  6E1E               	movwf	___awtoft@sign,c
  3014  00142C                     l406:
  3015  00142C  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  3016  001430  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  3017  001434  6A15               	clrf	___ftpack@arg+2,c
  3018  001436  0E8E               	movlw	142
  3019  001438  6E16               	movwf	___ftpack@exp,c
  3020  00143A  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  3021  00143E  EC43  F008         	call	___ftpack	;wreg free
  3022  001442  C013  F01B         	movff	?___ftpack,?___awtoft
  3023  001446  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  3024  00144A  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  3025  00144E  0012               	return	
  3026  001450                     __end_of___awtoft:
  3027                           	opt stack 0
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           prodh	equ	0xFF4
  3033                           prodl	equ	0xFF3
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           postinc2	equ	0xFDE
  3037                           postdec2	equ	0xFDD
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function ___ftpack *****************
  3043 ;; Defined at:
  3044 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  arg             3   18[COMRAM] unsigned um
  3047 ;;  exp             1   21[COMRAM] unsigned char 
  3048 ;;  sign            1   22[COMRAM] unsigned char 
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;		None
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  3   18[COMRAM] float 
  3053 ;; Registers used:
  3054 ;;		wreg, status,2, status,0
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3060 ;;      Params:         5       0       0       0       0       0       0       0       0
  3061 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3062 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3063 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3064 ;;Total ram usage:        8 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:    2
  3067 ;; This function calls:
  3068 ;;		Nothing
  3069 ;; This function is called by:
  3070 ;;		___awtoft
  3071 ;;		___ftadd
  3072 ;;		___ftmul
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text18
  3077  001086                     __ptext18:
  3078                           	opt stack 0
  3079  001086                     ___ftpack:
  3080                           	opt stack 25
  3081                           
  3082                           ;incstack = 0
  3083  001086  5016               	movf	___ftpack@exp,w,c
  3084  001088  B4D8               	btfsc	status,2,c
  3085  00108A  D005               	goto	u1670
  3086  00108C  5013               	movf	___ftpack@arg,w,c
  3087  00108E  1014               	iorwf	___ftpack@arg+1,w,c
  3088  001090  1015               	iorwf	___ftpack@arg+2,w,c
  3089  001092  A4D8               	btfss	status,2,c
  3090  001094  D00C               	goto	l425
  3091  001096                     u1670:
  3092  001096  0E00               	movlw	0
  3093  001098  6E13               	movwf	?___ftpack,c
  3094  00109A  0E00               	movlw	0
  3095  00109C  6E14               	movwf	?___ftpack+1,c
  3096  00109E  0E00               	movlw	0
  3097  0010A0  6E15               	movwf	?___ftpack+2,c
  3098  0010A2  0012               	return	
  3099  0010A4  2A16               	incf	___ftpack@exp,f,c
  3100  0010A6  90D8               	bcf	status,0,c
  3101  0010A8  3215               	rrcf	___ftpack@arg+2,f,c
  3102  0010AA  3214               	rrcf	___ftpack@arg+1,f,c
  3103  0010AC  3213               	rrcf	___ftpack@arg,f,c
  3104  0010AE                     l425:
  3105  0010AE  0E00               	movlw	0
  3106  0010B0  1413               	andwf	___ftpack@arg,w,c
  3107  0010B2  6E18               	movwf	??___ftpack& (0+255),c
  3108  0010B4  0E00               	movlw	0
  3109  0010B6  1414               	andwf	___ftpack@arg+1,w,c
  3110  0010B8  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3111  0010BA  0EFE               	movlw	254
  3112  0010BC  1415               	andwf	___ftpack@arg+2,w,c
  3113  0010BE  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3114  0010C0  5018               	movf	??___ftpack,w,c
  3115  0010C2  1019               	iorwf	??___ftpack+1,w,c
  3116  0010C4  101A               	iorwf	??___ftpack+2,w,c
  3117  0010C6  B4D8               	btfsc	status,2,c
  3118  0010C8  D00C               	goto	l428
  3119  0010CA  D7EC               	goto	l426
  3120  0010CC  2A16               	incf	___ftpack@exp,f,c
  3121  0010CE  0E01               	movlw	1
  3122  0010D0  2613               	addwf	___ftpack@arg,f,c
  3123  0010D2  0E00               	movlw	0
  3124  0010D4  2214               	addwfc	___ftpack@arg+1,f,c
  3125  0010D6  0E00               	movlw	0
  3126  0010D8  2215               	addwfc	___ftpack@arg+2,f,c
  3127  0010DA  90D8               	bcf	status,0,c
  3128  0010DC  3215               	rrcf	___ftpack@arg+2,f,c
  3129  0010DE  3214               	rrcf	___ftpack@arg+1,f,c
  3130  0010E0  3213               	rrcf	___ftpack@arg,f,c
  3131  0010E2                     l428:
  3132  0010E2  0E00               	movlw	0
  3133  0010E4  1413               	andwf	___ftpack@arg,w,c
  3134  0010E6  6E18               	movwf	??___ftpack& (0+255),c
  3135  0010E8  0E00               	movlw	0
  3136  0010EA  1414               	andwf	___ftpack@arg+1,w,c
  3137  0010EC  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3138  0010EE  0EFF               	movlw	255
  3139  0010F0  1415               	andwf	___ftpack@arg+2,w,c
  3140  0010F2  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3141  0010F4  5018               	movf	??___ftpack,w,c
  3142  0010F6  1019               	iorwf	??___ftpack+1,w,c
  3143  0010F8  101A               	iorwf	??___ftpack+2,w,c
  3144  0010FA  B4D8               	btfsc	status,2,c
  3145  0010FC  D006               	goto	l431
  3146  0010FE  D7E6               	goto	l429
  3147  001100  0616               	decf	___ftpack@exp,f,c
  3148  001102  90D8               	bcf	status,0,c
  3149  001104  3613               	rlcf	___ftpack@arg,f,c
  3150  001106  3614               	rlcf	___ftpack@arg+1,f,c
  3151  001108  3615               	rlcf	___ftpack@arg+2,f,c
  3152  00110A                     l431:
  3153  00110A  BE14               	btfsc	___ftpack@arg+1,7,c
  3154  00110C  D003               	goto	u1710
  3155  00110E  0E02               	movlw	2
  3156  001110  6016               	cpfslt	___ftpack@exp,c
  3157  001112  D7F6               	goto	l432
  3158  001114                     u1710:
  3159  001114  A016               	btfss	___ftpack@exp,0,c
  3160  001116  9E14               	bcf	___ftpack@arg+1,7,c
  3161  001118  90D8               	bcf	status,0,c
  3162  00111A  3216               	rrcf	___ftpack@exp,f,c
  3163  00111C  5016               	movf	___ftpack@exp,w,c
  3164  00111E  1215               	iorwf	___ftpack@arg+2,f,c
  3165  001120  5017               	movf	___ftpack@sign,w,c
  3166  001122  A4D8               	btfss	status,2,c
  3167  001124  8E15               	bsf	___ftpack@arg+2,7,c
  3168  001126  C013  F013         	movff	___ftpack@arg,?___ftpack
  3169  00112A  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  3170  00112E  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  3171  001132  0012               	return	
  3172  001134                     __end_of___ftpack:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           prodh	equ	0xFF4
  3179                           prodl	equ	0xFF3
  3180                           postinc0	equ	0xFEE
  3181                           wreg	equ	0xFE8
  3182                           postinc2	equ	0xFDE
  3183                           postdec2	equ	0xFDD
  3184                           fsr2h	equ	0xFDA
  3185                           fsr2l	equ	0xFD9
  3186                           status	equ	0xFD8
  3187                           
  3188 ;; *************** function _initUI *****************
  3189 ;; Defined at:
  3190 ;;		line 18 in file "ui.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;		None
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;		None
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      void 
  3197 ;; Registers used:
  3198 ;;		None
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3204 ;;      Params:         0       0       0       0       0       0       0       0       0
  3205 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3206 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3207 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3208 ;;Total ram usage:        0 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    2
  3211 ;; This function calls:
  3212 ;;		Nothing
  3213 ;; This function is called by:
  3214 ;;		_main
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           	psect	text19
  3219  001546                     __ptext19:
  3220                           	opt stack 0
  3221  001546                     _initUI:
  3222                           	opt stack 28
  3223                           
  3224                           ;ui.c: 19: TRISBbits.RB1 = 0;
  3225                           
  3226                           ;incstack = 0
  3227  001546  9293               	bcf	3987,1,c	;volatile
  3228                           
  3229                           ;ui.c: 20: LATBbits.LB1 = 0;
  3230  001548  928A               	bcf	3978,1,c	;volatile
  3231                           
  3232                           ;ui.c: 22: TRISBbits.RB2 = 0;
  3233  00154A  9493               	bcf	3987,2,c	;volatile
  3234                           
  3235                           ;ui.c: 23: LATBbits.LB2 = 0;
  3236  00154C  948A               	bcf	3978,2,c	;volatile
  3237                           
  3238                           ;ui.c: 25: TRISBbits.RB3 = 0;
  3239  00154E  9693               	bcf	3987,3,c	;volatile
  3240                           
  3241                           ;ui.c: 26: LATBbits.LB3 = 0;
  3242  001550  968A               	bcf	3978,3,c	;volatile
  3243                           
  3244                           ;ui.c: 28: TRISBbits.RB0 = 1;
  3245  001552  8093               	bsf	3987,0,c	;volatile
  3246                           
  3247                           ;ui.c: 29: TRISBbits.RB5 = 1;
  3248  001554  8A93               	bsf	3987,5,c	;volatile
  3249  001556  0012               	return		;funcret
  3250  001558                     __end_of_initUI:
  3251                           	opt stack 0
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           prodh	equ	0xFF4
  3257                           prodl	equ	0xFF3
  3258                           postinc0	equ	0xFEE
  3259                           wreg	equ	0xFE8
  3260                           postinc2	equ	0xFDE
  3261                           postdec2	equ	0xFDD
  3262                           fsr2h	equ	0xFDA
  3263                           fsr2l	equ	0xFD9
  3264                           status	equ	0xFD8
  3265                           
  3266 ;; *************** function _initTimer *****************
  3267 ;; Defined at:
  3268 ;;		line 21 in file "timer.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;		None
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;		None
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      void 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3282 ;;      Params:         0       0       0       0       0       0       0       0       0
  3283 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3284 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3285 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3286 ;;Total ram usage:        0 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    2
  3289 ;; This function calls:
  3290 ;;		Nothing
  3291 ;; This function is called by:
  3292 ;;		_main
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           	psect	text20
  3297  001582                     __ptext20:
  3298                           	opt stack 0
  3299  001582                     _initTimer:
  3300                           	opt stack 28
  3301                           
  3302                           ;timer.c: 22: INTCONbits.TMR0IF = 0;
  3303                           
  3304                           ;incstack = 0
  3305  001582  94F2               	bcf	intcon,2,c	;volatile
  3306                           
  3307                           ;timer.c: 23: INTCONbits.TMR0IE = 1;
  3308  001584  8AF2               	bsf	intcon,5,c	;volatile
  3309                           
  3310                           ;timer.c: 24: T0CON = 0xC4;
  3311  001586  0EC4               	movlw	196
  3312  001588  6ED5               	movwf	4053,c	;volatile
  3313  00158A  0012               	return		;funcret
  3314  00158C                     __end_of_initTimer:
  3315                           	opt stack 0
  3316                           tblptru	equ	0xFF8
  3317                           tblptrh	equ	0xFF7
  3318                           tblptrl	equ	0xFF6
  3319                           tablat	equ	0xFF5
  3320                           prodh	equ	0xFF4
  3321                           prodl	equ	0xFF3
  3322                           intcon	equ	0xFF2
  3323                           postinc0	equ	0xFEE
  3324                           wreg	equ	0xFE8
  3325                           postinc2	equ	0xFDE
  3326                           postdec2	equ	0xFDD
  3327                           fsr2h	equ	0xFDA
  3328                           fsr2l	equ	0xFD9
  3329                           status	equ	0xFD8
  3330                           
  3331 ;; *************** function _initMotors *****************
  3332 ;; Defined at:
  3333 ;;		line 14 in file "motors.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;		None
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      void 
  3340 ;; Registers used:
  3341 ;;		wreg, status,2
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3347 ;;      Params:         0       0       0       0       0       0       0       0       0
  3348 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3350 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3351 ;;Total ram usage:        0 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    2
  3354 ;; This function calls:
  3355 ;;		Nothing
  3356 ;; This function is called by:
  3357 ;;		_main
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text21
  3362  001450                     __ptext21:
  3363                           	opt stack 0
  3364  001450                     _initMotors:
  3365                           	opt stack 28
  3366                           
  3367                           ;motors.c: 15: TRISCbits.TRISC6 = 0;
  3368                           
  3369                           ;incstack = 0
  3370  001450  9C94               	bcf	3988,6,c	;volatile
  3371                           
  3372                           ;motors.c: 16: TRISCbits.TRISC0 = 0;
  3373  001452  9094               	bcf	3988,0,c	;volatile
  3374                           
  3375                           ;motors.c: 18: LATCbits.LATC0 = 0;
  3376  001454  908B               	bcf	3979,0,c	;volatile
  3377                           
  3378                           ;motors.c: 19: LATCbits.LATC6 = 0;
  3379  001456  9C8B               	bcf	3979,6,c	;volatile
  3380                           
  3381                           ;motors.c: 21: TRISCbits.TRISC2 = 0;
  3382  001458  9494               	bcf	3988,2,c	;volatile
  3383                           
  3384                           ;motors.c: 22: TRISCbits.TRISC1 = 0;
  3385  00145A  9294               	bcf	3988,1,c	;volatile
  3386                           
  3387                           ;motors.c: 24: PR2 = 249;
  3388  00145C  0EF9               	movlw	249
  3389  00145E  6ECB               	movwf	4043,c	;volatile
  3390                           
  3391                           ;motors.c: 25: CCPR1L = 0;
  3392  001460  0E00               	movlw	0
  3393  001462  6EBE               	movwf	4030,c	;volatile
  3394                           
  3395                           ;motors.c: 26: CCPR2L = 0;
  3396  001464  0E00               	movlw	0
  3397  001466  6EBB               	movwf	4027,c	;volatile
  3398                           
  3399                           ;motors.c: 27: CCP1CONbits.DC1B = 0;
  3400  001468  0ECF               	movlw	-49
  3401  00146A  16BD               	andwf	4029,f,c	;volatile
  3402                           
  3403                           ;motors.c: 28: CCP2CONbits.DC2B = 0;
  3404  00146C  0ECF               	movlw	-49
  3405  00146E  16BA               	andwf	4026,f,c	;volatile
  3406                           
  3407                           ;motors.c: 29: T2CON = 0x05;
  3408  001470  0E05               	movlw	5
  3409  001472  6ECA               	movwf	4042,c	;volatile
  3410                           
  3411                           ;motors.c: 30: CCP1CONbits.CCP1M = 0xF;
  3412  001474  80BD               	bsf	4029,0,c	;volatile
  3413  001476  82BD               	bsf	4029,1,c	;volatile
  3414  001478  84BD               	bsf	4029,2,c	;volatile
  3415  00147A  86BD               	bsf	4029,3,c	;volatile
  3416                           
  3417                           ;motors.c: 31: CCP2CONbits.CCP2M = 0xF;
  3418  00147C  80BA               	bsf	4026,0,c	;volatile
  3419  00147E  82BA               	bsf	4026,1,c	;volatile
  3420  001480  84BA               	bsf	4026,2,c	;volatile
  3421  001482  86BA               	bsf	4026,3,c	;volatile
  3422  001484  0012               	return		;funcret
  3423  001486                     __end_of_initMotors:
  3424                           	opt stack 0
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           intcon	equ	0xFF2
  3432                           postinc0	equ	0xFEE
  3433                           wreg	equ	0xFE8
  3434                           postinc2	equ	0xFDE
  3435                           postdec2	equ	0xFDD
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function _initInterrupts *****************
  3441 ;; Defined at:
  3442 ;;		line 50 in file "main.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;		None
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;		None
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  1    wreg      void 
  3449 ;; Registers used:
  3450 ;;		None
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3456 ;;      Params:         0       0       0       0       0       0       0       0       0
  3457 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3459 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3460 ;;Total ram usage:        0 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    2
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_main
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text22
  3471  00158C                     __ptext22:
  3472                           	opt stack 0
  3473  00158C                     _initInterrupts:
  3474                           	opt stack 28
  3475                           
  3476                           ;main.c: 51: INTCONbits.PEIE = 1;
  3477                           
  3478                           ;incstack = 0
  3479  00158C  8CF2               	bsf	intcon,6,c	;volatile
  3480                           
  3481                           ;main.c: 52: INTCONbits.GIE = 1;
  3482  00158E  8EF2               	bsf	intcon,7,c	;volatile
  3483  001590  0012               	return		;funcret
  3484  001592                     __end_of_initInterrupts:
  3485                           	opt stack 0
  3486                           tblptru	equ	0xFF8
  3487                           tblptrh	equ	0xFF7
  3488                           tblptrl	equ	0xFF6
  3489                           tablat	equ	0xFF5
  3490                           prodh	equ	0xFF4
  3491                           prodl	equ	0xFF3
  3492                           intcon	equ	0xFF2
  3493                           postinc0	equ	0xFEE
  3494                           wreg	equ	0xFE8
  3495                           postinc2	equ	0xFDE
  3496                           postdec2	equ	0xFDD
  3497                           fsr2h	equ	0xFDA
  3498                           fsr2l	equ	0xFD9
  3499                           status	equ	0xFD8
  3500                           
  3501 ;; *************** function _initCNY *****************
  3502 ;; Defined at:
  3503 ;;		line 46 in file "CNY.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;		None
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;		None
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      void 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3517 ;;      Params:         0       0       0       0       0       0       0       0       0
  3518 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3519 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3520 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3521 ;;Total ram usage:        0 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    2
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_main
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text23
  3532  001532                     __ptext23:
  3533                           	opt stack 0
  3534  001532                     _initCNY:
  3535                           	opt stack 28
  3536                           
  3537                           ;CNY.c: 47: TRISAbits.RA5 = 1;
  3538                           
  3539                           ;incstack = 0
  3540  001532  8A92               	bsf	3986,5,c	;volatile
  3541                           
  3542                           ;CNY.c: 48: TRISAbits.RA3 = 1;
  3543  001534  8692               	bsf	3986,3,c	;volatile
  3544                           
  3545                           ;CNY.c: 49: TRISAbits.RA2 = 1;
  3546  001536  8492               	bsf	3986,2,c	;volatile
  3547                           
  3548                           ;CNY.c: 50: TRISAbits.RA1 = 1;
  3549  001538  8292               	bsf	3986,1,c	;volatile
  3550                           
  3551                           ;CNY.c: 51: TRISAbits.RA0 = 1;
  3552  00153A  8092               	bsf	3986,0,c	;volatile
  3553                           
  3554                           ;CNY.c: 52: ADCON1 = 0x0A;
  3555  00153C  0E0A               	movlw	10
  3556  00153E  6EC1               	movwf	4033,c	;volatile
  3557                           
  3558                           ;CNY.c: 53: ADCON2 = 0xA5;
  3559  001540  0EA5               	movlw	165
  3560  001542  6EC0               	movwf	4032,c	;volatile
  3561  001544  0012               	return		;funcret
  3562  001546                     __end_of_initCNY:
  3563                           	opt stack 0
  3564                           tblptru	equ	0xFF8
  3565                           tblptrh	equ	0xFF7
  3566                           tblptrl	equ	0xFF6
  3567                           tablat	equ	0xFF5
  3568                           prodh	equ	0xFF4
  3569                           prodl	equ	0xFF3
  3570                           intcon	equ	0xFF2
  3571                           postinc0	equ	0xFEE
  3572                           wreg	equ	0xFE8
  3573                           postinc2	equ	0xFDE
  3574                           postdec2	equ	0xFDD
  3575                           fsr2h	equ	0xFDA
  3576                           fsr2l	equ	0xFD9
  3577                           status	equ	0xFD8
  3578                           
  3579 ;; *************** function _ISR *****************
  3580 ;; Defined at:
  3581 ;;		line 62 in file "main.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;		None
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;		None
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  1    wreg      void 
  3588 ;; Registers used:
  3589 ;;		wreg, status,2, status,0, cstack
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3595 ;;      Params:         0       0       0       0       0       0       0       0       0
  3596 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3597 ;;      Temps:         18       0       0       0       0       0       0       0       0
  3598 ;;      Totals:        18       0       0       0       0       0       0       0       0
  3599 ;;Total ram usage:       18 bytes
  3600 ;; Hardware stack levels used:    1
  3601 ;; Hardware stack levels required when called:    1
  3602 ;; This function calls:
  3603 ;;		_cnyInterrupt
  3604 ;;		_timerInterrupt
  3605 ;; This function is called by:
  3606 ;;		Interrupt level 2
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           	psect	intcode
  3611  000008                     __pintcode:
  3612                           	opt stack 0
  3613  000008                     _ISR:
  3614                           	opt stack 25
  3615                           
  3616                           ;incstack = 0
  3617  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3618  00000A  ED9A  F008         	call	int_func,f	;refresh shadow registers
  3619                           tblptru	equ	0xFF8
  3620                           tblptrh	equ	0xFF7
  3621                           tblptrl	equ	0xFF6
  3622                           tablat	equ	0xFF5
  3623                           prodh	equ	0xFF4
  3624                           prodl	equ	0xFF3
  3625                           intcon	equ	0xFF2
  3626                           postinc0	equ	0xFEE
  3627                           wreg	equ	0xFE8
  3628                           postinc2	equ	0xFDE
  3629                           postdec2	equ	0xFDD
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634                           	psect	intcode_body
  3635  001134                     __pintcode_body:
  3636                           	opt stack 25
  3637  001134                     int_func:
  3638                           	opt stack 25
  3639  001134  0006               	pop		; remove dummy address from shadow register refresh
  3640  001136  CFFA F001          	movff	pclath,??_ISR
  3641  00113A  CFFB F002          	movff	pclatu,??_ISR+1
  3642  00113E  CFE9 F003          	movff	fsr0l,??_ISR+2
  3643  001142  CFEA F004          	movff	fsr0h,??_ISR+3
  3644  001146  CFE1 F005          	movff	fsr1l,??_ISR+4
  3645  00114A  CFE2 F006          	movff	fsr1h,??_ISR+5
  3646  00114E  CFD9 F007          	movff	fsr2l,??_ISR+6
  3647  001152  CFDA F008          	movff	fsr2h,??_ISR+7
  3648  001156  CFF3 F009          	movff	prodl,??_ISR+8
  3649  00115A  CFF4 F00A          	movff	prodh,??_ISR+9
  3650  00115E  CFF6 F00B          	movff	tblptrl,??_ISR+10
  3651  001162  CFF7 F00C          	movff	tblptrh,??_ISR+11
  3652  001166  CFF8 F00D          	movff	tblptru,??_ISR+12
  3653  00116A  CFF5 F00E          	movff	tablat,??_ISR+13
  3654  00116E  C04D  F00F         	movff	btemp,??_ISR+14
  3655  001172  C04E  F010         	movff	btemp+1,??_ISR+15
  3656  001176  C04F  F011         	movff	btemp+2,??_ISR+16
  3657  00117A  C050  F012         	movff	btemp+3,??_ISR+17
  3658                           
  3659                           ;main.c: 63: timerInterrupt();
  3660  00117E  EC43  F00A         	call	_timerInterrupt	;wreg free
  3661                           
  3662                           ;main.c: 64: cnyInterrupt();
  3663  001182  ECC9  F00A         	call	_cnyInterrupt	;wreg free
  3664  001186  C012  F050         	movff	??_ISR+17,btemp+3
  3665  00118A  C011  F04F         	movff	??_ISR+16,btemp+2
  3666  00118E  C010  F04E         	movff	??_ISR+15,btemp+1
  3667  001192  C00F  F04D         	movff	??_ISR+14,btemp
  3668  001196  C00E  FFF5         	movff	??_ISR+13,tablat
  3669  00119A  C00D  FFF8         	movff	??_ISR+12,tblptru
  3670  00119E  C00C  FFF7         	movff	??_ISR+11,tblptrh
  3671  0011A2  C00B  FFF6         	movff	??_ISR+10,tblptrl
  3672  0011A6  C00A  FFF4         	movff	??_ISR+9,prodh
  3673  0011AA  C009  FFF3         	movff	??_ISR+8,prodl
  3674  0011AE  C008  FFDA         	movff	??_ISR+7,fsr2h
  3675  0011B2  C007  FFD9         	movff	??_ISR+6,fsr2l
  3676  0011B6  C006  FFE2         	movff	??_ISR+5,fsr1h
  3677  0011BA  C005  FFE1         	movff	??_ISR+4,fsr1l
  3678  0011BE  C004  FFEA         	movff	??_ISR+3,fsr0h
  3679  0011C2  C003  FFE9         	movff	??_ISR+2,fsr0l
  3680  0011C6  C002  FFFB         	movff	??_ISR+1,pclatu
  3681  0011CA  C001  FFFA         	movff	??_ISR,pclath
  3682  0011CE  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3683  0011D0  0011               	retfie		f
  3684  0011D2                     __end_of_ISR:
  3685                           	opt stack 0
  3686                           pclatu	equ	0xFFB
  3687                           pclath	equ	0xFFA
  3688                           tblptru	equ	0xFF8
  3689                           tblptrh	equ	0xFF7
  3690                           tblptrl	equ	0xFF6
  3691                           tablat	equ	0xFF5
  3692                           prodh	equ	0xFF4
  3693                           prodl	equ	0xFF3
  3694                           intcon	equ	0xFF2
  3695                           postinc0	equ	0xFEE
  3696                           fsr0h	equ	0xFEA
  3697                           fsr0l	equ	0xFE9
  3698                           wreg	equ	0xFE8
  3699                           fsr1h	equ	0xFE2
  3700                           fsr1l	equ	0xFE1
  3701                           postinc2	equ	0xFDE
  3702                           postdec2	equ	0xFDD
  3703                           fsr2h	equ	0xFDA
  3704                           fsr2l	equ	0xFD9
  3705                           status	equ	0xFD8
  3706                           
  3707 ;; *************** function _timerInterrupt *****************
  3708 ;; Defined at:
  3709 ;;		line 11 in file "timer.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;		None
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;		None
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  1    wreg      void 
  3716 ;; Registers used:
  3717 ;;		wreg, status,2, status,0
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3723 ;;      Params:         0       0       0       0       0       0       0       0       0
  3724 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3725 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3726 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3727 ;;Total ram usage:        0 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_ISR
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           	psect	text25
  3737  001486                     __ptext25:
  3738                           	opt stack 0
  3739  001486                     _timerInterrupt:
  3740                           	opt stack 25
  3741                           
  3742                           ;timer.c: 12: if(!INTCONbits.TMR0IF) return;
  3743                           
  3744                           ;incstack = 0
  3745  001486  A4F2               	btfss	intcon,2,c	;volatile
  3746  001488  0012               	return	
  3747                           
  3748                           ;timer.c: 13: fractionCounter += 680;
  3749  00148A  0EA8               	movlw	168
  3750  00148C  264A               	addwf	_fractionCounter,f,c
  3751  00148E  0E02               	movlw	2
  3752  001490  224B               	addwfc	_fractionCounter+1,f,c
  3753                           
  3754                           ;timer.c: 14: if(1000 <= fractionCounter){
  3755  001492  0EE8               	movlw	232
  3756  001494  5C4A               	subwf	_fractionCounter,w,c
  3757  001496  0E03               	movlw	3
  3758  001498  584B               	subwfb	_fractionCounter+1,w,c
  3759  00149A  A0D8               	btfss	status,0,c
  3760  00149C  D00A               	goto	i2l69
  3761                           
  3762                           ;timer.c: 15: fractionCounter -= 1000;
  3763  00149E  0EE8               	movlw	232
  3764  0014A0  5E4A               	subwf	_fractionCounter,f,c
  3765  0014A2  0E03               	movlw	3
  3766  0014A4  5A4B               	subwfb	_fractionCounter+1,f,c
  3767                           
  3768                           ;timer.c: 16: millisCounter++;
  3769  0014A6  0E01               	movlw	1
  3770  0014A8  2646               	addwf	_millisCounter,f,c
  3771  0014AA  0E00               	movlw	0
  3772  0014AC  2247               	addwfc	_millisCounter+1,f,c
  3773  0014AE  2248               	addwfc	_millisCounter+2,f,c
  3774  0014B0  2249               	addwfc	_millisCounter+3,f,c
  3775  0014B2                     i2l69:
  3776                           
  3777                           ;timer.c: 17: }
  3778                           ;timer.c: 18: INTCONbits.TMR0IF = 0;
  3779  0014B2  94F2               	bcf	intcon,2,c	;volatile
  3780  0014B4  0012               	return		;funcret
  3781  0014B6                     __end_of_timerInterrupt:
  3782                           	opt stack 0
  3783                           pclatu	equ	0xFFB
  3784                           pclath	equ	0xFFA
  3785                           tblptru	equ	0xFF8
  3786                           tblptrh	equ	0xFF7
  3787                           tblptrl	equ	0xFF6
  3788                           tablat	equ	0xFF5
  3789                           prodh	equ	0xFF4
  3790                           prodl	equ	0xFF3
  3791                           intcon	equ	0xFF2
  3792                           postinc0	equ	0xFEE
  3793                           fsr0h	equ	0xFEA
  3794                           fsr0l	equ	0xFE9
  3795                           wreg	equ	0xFE8
  3796                           fsr1h	equ	0xFE2
  3797                           fsr1l	equ	0xFE1
  3798                           postinc2	equ	0xFDE
  3799                           postdec2	equ	0xFDD
  3800                           fsr2h	equ	0xFDA
  3801                           fsr2l	equ	0xFD9
  3802                           status	equ	0xFD8
  3803                           
  3804 ;; *************** function _cnyInterrupt *****************
  3805 ;; Defined at:
  3806 ;;		line 45 in file "CNY.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;		None
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;		None
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		None
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3820 ;;      Params:         0       0       0       0       0       0       0       0       0
  3821 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3823 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3824 ;;Total ram usage:        0 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_ISR
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text26
  3834  001592                     __ptext26:
  3835                           	opt stack 0
  3836  001592                     _cnyInterrupt:
  3837                           	opt stack 25
  3838                           
  3839                           ;incstack = 0
  3840  001592  0012               	return		;funcret
  3841  001594                     __end_of_cnyInterrupt:
  3842                           	opt stack 0
  3843                           pclatu	equ	0xFFB
  3844                           pclath	equ	0xFFA
  3845                           tblptru	equ	0xFF8
  3846                           tblptrh	equ	0xFF7
  3847                           tblptrl	equ	0xFF6
  3848                           tablat	equ	0xFF5
  3849                           prodh	equ	0xFF4
  3850                           prodl	equ	0xFF3
  3851                           intcon	equ	0xFF2
  3852                           postinc0	equ	0xFEE
  3853                           fsr0h	equ	0xFEA
  3854                           fsr0l	equ	0xFE9
  3855                           wreg	equ	0xFE8
  3856                           fsr1h	equ	0xFE2
  3857                           fsr1l	equ	0xFE1
  3858                           postinc2	equ	0xFDE
  3859                           postdec2	equ	0xFDD
  3860                           fsr2h	equ	0xFDA
  3861                           fsr2l	equ	0xFD9
  3862                           status	equ	0xFD8
  3863                           pclatu	equ	0xFFB
  3864                           pclath	equ	0xFFA
  3865                           tblptru	equ	0xFF8
  3866                           tblptrh	equ	0xFF7
  3867                           tblptrl	equ	0xFF6
  3868                           tablat	equ	0xFF5
  3869                           prodh	equ	0xFF4
  3870                           prodl	equ	0xFF3
  3871                           intcon	equ	0xFF2
  3872                           postinc0	equ	0xFEE
  3873                           fsr0h	equ	0xFEA
  3874                           fsr0l	equ	0xFE9
  3875                           wreg	equ	0xFE8
  3876                           fsr1h	equ	0xFE2
  3877                           fsr1l	equ	0xFE1
  3878                           postinc2	equ	0xFDE
  3879                           postdec2	equ	0xFDD
  3880                           fsr2h	equ	0xFDA
  3881                           fsr2l	equ	0xFD9
  3882                           status	equ	0xFD8
  3883                           
  3884                           	psect	rparam
  3885  0000                     pclatu	equ	0xFFB
  3886                           pclath	equ	0xFFA
  3887                           tblptru	equ	0xFF8
  3888                           tblptrh	equ	0xFF7
  3889                           tblptrl	equ	0xFF6
  3890                           tablat	equ	0xFF5
  3891                           prodh	equ	0xFF4
  3892                           prodl	equ	0xFF3
  3893                           intcon	equ	0xFF2
  3894                           postinc0	equ	0xFEE
  3895                           fsr0h	equ	0xFEA
  3896                           fsr0l	equ	0xFE9
  3897                           wreg	equ	0xFE8
  3898                           fsr1h	equ	0xFE2
  3899                           fsr1l	equ	0xFE1
  3900                           postinc2	equ	0xFDE
  3901                           postdec2	equ	0xFDD
  3902                           fsr2h	equ	0xFDA
  3903                           fsr2l	equ	0xFD9
  3904                           status	equ	0xFD8
  3905                           
  3906                           	psect	temp
  3907  00004D                     btemp:
  3908                           	opt stack 0
  3909  00004D                     	ds	1
  3910  0000                     int$flags	set	btemp
  3911  0000                     wtemp6	set	btemp+1
  3912                           pclatu	equ	0xFFB
  3913                           pclath	equ	0xFFA
  3914                           tblptru	equ	0xFF8
  3915                           tblptrh	equ	0xFF7
  3916                           tblptrl	equ	0xFF6
  3917                           tablat	equ	0xFF5
  3918                           prodh	equ	0xFF4
  3919                           prodl	equ	0xFF3
  3920                           intcon	equ	0xFF2
  3921                           postinc0	equ	0xFEE
  3922                           fsr0h	equ	0xFEA
  3923                           fsr0l	equ	0xFE9
  3924                           wreg	equ	0xFE8
  3925                           fsr1h	equ	0xFE2
  3926                           fsr1l	equ	0xFE1
  3927                           postinc2	equ	0xFDE
  3928                           postdec2	equ	0xFDD
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    5
    Data        0
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      76
    BANK0           160     47      63
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _loop->_calcPID
    _setMotors->___awdiv
    _setLEDs->_setLEDG
    _setLEDs->_setLEDR
    _setLEDs->_setLEDY
    _calcPID->___ftadd
    _getCalCNY->___wmul
    ___wmul->___lwdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___ftadd->___fttol
    ___awtoft->___ftpack
    ___awtoft->___ftpack

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_loop
    _loop->_calcPID
    _calcPID->___ftadd
    ___ftadd->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   18659
                            _initCNY
                     _initInterrupts
                         _initMotors
                          _initTimer
                             _initUI
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                 2     2      0   18659
                                             45 BANK0      2     2      0
                            _calcPID
                            _setLEDs
                          _setMotors
 ---------------------------------------------------------------------------------
 (2) _setMotors                                            6     2      4    1797
                                             26 COMRAM     6     2      4
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     805
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _setLEDs                                              3     1      2     339
                                             19 COMRAM     3     1      2
                            _setLEDG
                            _setLEDR
                            _setLEDY
 ---------------------------------------------------------------------------------
 (3) _setLEDY                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _setLEDR                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _setLEDG                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _calcPID                                             32    23      9   16427
                                             57 COMRAM     2     2      0
                                             15 BANK0     30    21      9
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                            ___lldiv
                             ___wmul
                          _getCalCNY
 ---------------------------------------------------------------------------------
 (3) _getCalCNY                                           14    12      2    1890
                                             31 COMRAM    14    12      2
                            ___lwdiv
                             ___wmul
                             _getCNY
 ---------------------------------------------------------------------------------
 (4) _getCNY                                               5     3      2      62
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     772
                                             25 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     421
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     421
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     551
                                             45 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4001
                                             30 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4698
                                             54 COMRAM     3     3      0
                                              6 BANK0      9     3      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3326
                                             26 COMRAM     4     1      3
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2833
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initCNY                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
                       _cnyInterrupt
                     _timerInterrupt
 ---------------------------------------------------------------------------------
 (6) _timerInterrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _cnyInterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initCNY
   _initInterrupts
   _initMotors
   _initTimer
   _initUI
   _loop
     _calcPID
       ___awtoft
         ___ftpack
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___lldiv
       ___wmul
         ___lwdiv (ARG)
       _getCalCNY
         ___lwdiv
         ___wmul
           ___lwdiv (ARG)
         _getCNY
     _setLEDs
       _setLEDG
       _setLEDR
       _setLEDY
     _setMotors
       ___awdiv

 _ISR (ROOT)
   _cnyInterrupt
   _timerInterrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2F      3F       5       39.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8B      20        0.0%
DATA                 0      0      8B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jul 18 16:20:45 2018

                     l23 1384                       l26 13AC                       l50 0C52  
                     l51 0C6A                       l52 0C82                       l49 0C32  
           ___awdiv@sign 0018      ___wmul@multiplicand 001C              __CFG_BORV$0 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000             ___ftadd@exp1 006E             ___ftadd@exp2 006D  
           ___ftadd@sign 006C                      l101 0842                      l111 11F8  
                    l112 1246                      l122 1516                      l203 0D84  
                    l108 125C                      l205 0D8C                      l109 11D4  
                    l207 0DE0                      l209 0DE8                      l406 142C  
                    l510 103C                      l431 110A                      l511 104C  
                    l432 1100                      l504 0FBA                      l425 10AE  
                    l426 10A4                      l506 0FE2                      l507 1014  
                    l428 10E2                      l460 0A9C                      l508 1024  
                    l429 10CC                      l533 0F64                      l525 0EC8  
                    l381 12AE                      l470 0AF8                      l534 0F58  
                    l614 13E4                      l382 12A6                      l471 0AEE  
                    l527 0F40                      l615 13DC                      l480 0B2C  
                    l456 0A72                      l536 0F80                      l528 0F30  
                    l465 0B02                      l561 131E                      l385 12CE  
                    l482 0B5A                      l562 1312                      l618 1404  
                    l386 12D8                      l378 1280                      l483 0B76  
                    l619 140E                      l387 12E6                      l379 1290  
                    l484 0BA6                      l565 1352                      l566 1360  
                    l479 0B36             __CFG_CPB$OFF 000000                      _PR2 000FCB  
           __CFG_CPD$OFF 000000                      _ISR 0008             __CFG_BOR$OFF 000000  
                    wreg 000FE8             __CFG_LVP$OFF 000000                     ?_ISR 0001  
           __CFG_WDT$OFF 000000                     l2260 08B4                     l2244 0832  
         ??_cnyInterrupt 0001                     u2031 0FA2                     u2120 12B2  
                   u2051 0FCA                     u2220 0F6A                     u2161 0EAA  
                   u2250 1322                     u2180 0EE6                     u2308 0C08  
                   u1710 1114                     u2270 0BE0                     u2271 0BDA  
                   u2185 0EDE                     u2290 0C06                     u2355 0C8C  
                   u2291 0C00                     u2380 08B4                     u1821 0A30  
                   u1805 1562                     u2365 0CBC                     u1670 1096  
                   u1750 13E8                     u1806 1564                     u1831 0A44  
                   u1815 157E                     u1920 0ACC                     u1816 1580  
                   u2288 0BE2                     u1860 0A64                     u1960 0B0A  
                   u1890 0A8E                     u1795 1570                     u1796 1572  
                   u1990 0B3E                     i2l69 14B2             __CFG_WDTPS$1 000000  
                   _main 1502             ___ftpack@arg 0013                     _maxs 008F  
                   _mins 003C                     _loop 11D2             ___ftpack@exp 0016  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 004D                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000             _calcPID$1220 007D  
           _calcPID$1221 007F             _calcPID$1222 0078             ___ftmul@cntr 002C  
           ___param_bank 000000             ___ftmul@sign 002D         ??_timerInterrupt 0001  
         setMotors@right 001D                    ??_ISR 0001             ___fttol@exp1 0065  
           ___fttol@lval 0061            __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0001          __end_of___awdiv 12F0                    ?_loop 0001  
        __end_of___ftadd 0BCC          __end_of___lldiv 1372          __end_of___ftmul 1086  
                  _T0CON 000FD5          ___awdiv@divisor 0015          __end_of___fttol 0F92  
                  _T2CON 000FCA          __end_of_calcPID 0A1E          __end_of___lwdiv 1418  
        ___awdiv@counter 0017            __CFG_USBDIV$2 000000            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initCNY 1546           __CFG_EBTRB$OFF 000000            ___awtoft@sign 001E  
        __end_of_setLEDG 1582          __end_of_setLEDR 1574          __end_of_setLEDY 1566  
        __end_of_setLEDs 1532            ___ftpack@sign 0017                    pclath 000FFA  
                  tablat 000FF5                    status 000FD8                    wtemp6 004E  
         __CFG_PBADEN$ON 000000           __CFG_MCLRE$OFF 000000          __initialization 14B6  
           __end_of_main 151C             __end_of_loop 126C                   ??_main 003C  
          ___fttol@sign1 0060                   ??_loop 003C            __activetblptr 000002  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   _CCPR1L 000FBE                   _CCPR2L 000FBB  
       ___awdiv@dividend 0013         __end_of___awtoft 1450         __end_of___ftpack 1134  
        _fractionCounter 004A         __end_of_channels 0806           __CFG_XINST$OFF 000000  
                 ___wmul 14DC                ??___awdiv 0017                ??___ftadd 0037  
                 _getCNY 1372                ??___lldiv 001B                ??___ftmul 0025  
              ??___fttol 0032                ??_calcPID 003A                ??___lwdiv 0017  
                 _initUI 1546     __end_of_cnyInterrupt 1594                   clear_0 14BC  
                 clear_1 14C8         ___awdiv@quotient 0019    ___ftmul@f3_as_product 0029  
              ??_initCNY 0013                ??_setLEDG 0013                ??_setLEDR 0013  
              ??_setLEDY 0013                ??_setLEDs 0016             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
          getCNY@channel 0017           calcPID@prevErr 009D               __accesstop 0060  
__end_of__initialization 14CE               ___ftadd@f1 0066               ___ftadd@f2 0069  
          ___rparam_used 000001               ___awtoft@c 001B               ___ftmul@f1 001F  
             ___ftmul@f2 0022               ___fttol@f1 002E           __pcstackCOMRAM 0001  
__size_of_initInterrupts 0006       __size_of_getCalCNY 015E               __pbssBANK0 008F  
     __size_of_initTimer 000A               calcPID@err 0099               calcPID@val 0089  
             calcPID@pos 007B                  ?___wmul 001A                  ?_getCNY 0013  
                ?_initUI 0001       __size_of_setMotors 0170                ?___awtoft 001B  
              ?___ftpack 0013        __end_of_getCalCNY 0E9A          __CFG_VREGEN$OFF 000000  
                __Hparam 0000                  __Lparam 0000    __size_of_cnyInterrupt 0002  
                ___awdiv 126C                  ___ftadd 0A1E               _initMotors 1450  
                ___lldiv 12F0          __size_of___wmul 0026                  ___ftmul 0F92  
                ___fttol 0E9A                  _calcPID 0808          __size_of_getCNY 0054  
                ___lwdiv 13C6             __psmallconst 0800          __CFG_STVREN$OFF 000000  
        __size_of_initUI 0012                  __pcinit 14B6               ??___awtoft 001E  
             ??___ftpack 0018                  __ramtop 0800                  __ptext0 1502  
                __ptext1 11D2                  __ptext2 0BCC                  __ptext3 126C  
                __ptext4 151C                  __ptext5 1558                  __ptext6 1566  
                __ptext7 1574                  __ptext8 0808                  __ptext9 0D3C  
          _millisCounter 0046             __size_of_ISR 11CA                  _initCNY 1532  
      __end_of_initTimer 158C                  _setLEDG 1574                  _setLEDR 1566  
                _setLEDY 1558                  _setLEDs 151C           __pintcode_body 1134  
   end_of_initialization 14CE        __end_of_setMotors 0D3C             _cnyInterrupt 1592  
          __Lmediumconst 0000                  int_func 1134                  loop@pid 008D  
        ___lldiv@divisor 0017          ___lldiv@counter 001F                  postdec2 000FDD  
        calcPID@integral 009B           _initInterrupts 158C                  postinc0 000FEE  
                postinc2 000FDE                _PORTBbits 000F81  __size_of_timerInterrupt 0030  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISCbits 000F94  
            _CCP1CONbits 000FBD              _CCP2CONbits 000FBA   __end_of_initInterrupts 1592  
       getCalCNY@channel 0020              ___ftmul@exp 0028            setMotors@left 001B  
            ?_initMotors 0001           __end_of___wmul 1502           __end_of_getCNY 13C6  
         __end_of_initUI 1558      start_initialization 14B6              __end_of_ISR 11D2  
          _getCalCNY$640 002A            _getCalCNY$639 0028          ?_initInterrupts 0001  
               ??___wmul 001E                 ??_getCNY 0015         __CFG_LPT1OSC$OFF 000000  
               ??_initUI 0013        __size_of___awtoft 0038        __size_of___ftpack 00AE  
            __pbssCOMRAM 003C            __pcstackBANK0 0060      __size_of_initMotors 0036  
             loop@status 004C                _getCalCNY 0D3C                calcPID@Kd 0075  
              calcPID@Ki 0072                calcPID@Kp 006F                calcPID@s1 0081  
              calcPID@s2 0085         ___lwdiv@dividend 0013                __pintcode 0008  
               ?___awdiv 0013                 ?___ftadd 0066                 ?___lldiv 0013  
               ?___ftmul 001F                 ?___fttol 002E                 ?_calcPID 006F  
               ?___lwdiv 0013                 ?_initCNY 0001              __smallconst 0800  
         _timerInterrupt 1486                 ?_setLEDG 0001                 ?_setLEDR 0001  
               ?_setLEDY 0001                 ?_setLEDs 0014                _initTimer 1582  
       ___lwdiv@quotient 0018           ___wmul@product 001E                 _LATBbits 000F8A  
               _LATCbits 000F8B             getCalCNY@val 002C                _setMotors 0BCC  
             ?_getCalCNY 0020   __end_of_timerInterrupt 14B6               _ADCON0bits 000FC2  
      ___wmul@multiplier 001A               ?_initTimer 0001               ?_setMotors 001B  
               __Hrparam 0000                 __Lrparam 0000             ??_initMotors 0013  
       __size_of___awdiv 0084         __size_of___ftadd 01AE         __size_of___lldiv 0082  
       __size_of___ftmul 00F4         __size_of___fttol 00F8         __size_of_calcPID 0216  
       __size_of___lwdiv 0052                 ___awtoft 1418                 ___ftpack 1086  
        ?_timerInterrupt 0001         __size_of_initCNY 0014                 _channels 0801  
       __size_of_setLEDG 000E         __size_of_setLEDR 000E         __size_of_setLEDY 000E  
               calcPID@i 008B         __size_of_setLEDs 0016          ___lwdiv@divisor 0015  
        ___lwdiv@counter 0017                 __ptext10 1372                 __ptext11 14DC  
               __ptext20 1582                 __ptext12 13C6                 __ptext21 1450  
               __ptext13 12F0                 __ptext22 158C                 __ptext14 0E9A  
               __ptext23 1532                 __ptext15 0F92                 __ptext16 0A1E  
               __ptext25 1486                 __ptext17 1418                 __ptext26 1592  
               __ptext18 1086                 __ptext19 1546       __end_of_initMotors 1486  
       ??_initInterrupts 0013            __size_of_main 001A            __size_of_loop 009A  
            ??_getCalCNY 0022                 int$flags 004D    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2                 setLEDG@v 0013                 setLEDR@v 0013  
               setLEDY@v 0013              ??_initTimer 0013                 setLEDs@g 0015  
               setLEDs@r 0016                 setLEDs@y 0014                 intlevel2 0000  
       ___lldiv@dividend 0013              ??_setMotors 001F         ___lldiv@quotient 001B  
     __CFG_FOSC$HSPLL_HS 000000            ?_cnyInterrupt 0001  
