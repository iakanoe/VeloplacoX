

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jul 29 16:08:02 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F2550 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	smallconst
    86  000800                     __psmallconst:
    87                           	opt stack 0
    88  000800  00                 	db	0
    89  000801                     _channels:
    90                           	opt stack 0
    91  000801  04                 	db	4
    92  000802  03                 	db	3
    93  000803  02                 	db	2
    94  000804  01                 	db	1
    95  000805  00                 	db	0
    96  000806                     __end_of_channels:
    97                           	opt stack 0
    98  000806                     _kd:
    99                           	opt stack 0
   100  000806  00                 	db	0
   101  000807  80                 	db	128
   102  000808  3F                 	db	63
   103  000809                     __end_of_kd:
   104                           	opt stack 0
   105  000809                     _ki:
   106                           	opt stack 0
   107  000809  00                 	db	0
   108  00080A  80                 	db	128
   109  00080B  3F                 	db	63
   110  00080C                     __end_of_ki:
   111                           	opt stack 0
   112  00080C                     _kp:
   113                           	opt stack 0
   114  00080C  00                 	db	0
   115  00080D  80                 	db	128
   116  00080E  3F                 	db	63
   117  00080F                     __end_of_kp:
   118                           	opt stack 0
   119  00080F                     _maxSpeed:
   120                           	opt stack 0
   121  00080F  01F4               	dw	500
   122  000811                     __end_of_maxSpeed:
   123                           	opt stack 0
   124  0000                     _PORTBbits	set	3969
   125  0000                     _LATBbits	set	3978
   126  0000                     _TRISBbits	set	3987
   127  0000                     _T0CON	set	4053
   128  0000                     _INTCONbits	set	4082
   129  0000                     _T2CON	set	4042
   130  0000                     _CCP2CONbits	set	4026
   131  0000                     _CCP1CONbits	set	4029
   132  0000                     _CCPR2L	set	4027
   133  0000                     _CCPR1L	set	4030
   134  0000                     _PR2	set	4043
   135  0000                     _LATCbits	set	3979
   136  0000                     _TRISCbits	set	3988
   137  0000                     _ADRESL	set	4035
   138  0000                     _ADRESH	set	4036
   139  0000                     _ADCON0bits	set	4034
   140  0000                     _ADCON2	set	4032
   141  0000                     _ADCON1	set	4033
   142  0000                     _TRISAbits	set	3986
   143                           
   144                           ; #config settings
   145  000811  00                 	db	0	; dummy byte at the end
   146  0000                     
   147                           	psect	cinit
   148  00179A                     __pcinit:
   149                           	opt stack 0
   150  00179A                     start_initialization:
   151                           	opt stack 0
   152  00179A                     __initialization:
   153                           	opt stack 0
   154                           
   155                           ; Clear objects allocated to BANK0 (17 bytes)
   156  00179A  EE00  F099         	lfsr	0,__pbssBANK0
   157  00179E  0E11               	movlw	17
   158  0017A0                     clear_0:
   159  0017A0  6AEE               	clrf	postinc0,c
   160  0017A2  06E8               	decf	wreg,f,c
   161  0017A4  E1FD               	bnz	clear_0
   162                           
   163                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   164  0017A6  6A4C               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   165                           
   166                           ; Clear objects allocated to COMRAM (16 bytes)
   167  0017A8  EE00  F03C         	lfsr	0,__pbssCOMRAM
   168  0017AC  0E10               	movlw	16
   169  0017AE                     clear_1:
   170  0017AE  6AEE               	clrf	postinc0,c
   171  0017B0  06E8               	decf	wreg,f,c
   172  0017B2  E1FD               	bnz	clear_1
   173  0017B4                     end_of_initialization:
   174                           	opt stack 0
   175  0017B4                     __end_of__initialization:
   176                           	opt stack 0
   177  0017B4  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   178  0017B6  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   179  0017B8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   180  0017BA  6EF8               	movwf	tblptru,c
   181  0017BC  0100               	movlb	0
   182  0017BE  EFF4  F00B         	goto	_main	;jump to C main() function
   183                           tblptru	equ	0xFF8
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           
   187                           	psect	bitbssCOMRAM
   188  000260                     __pbitbssCOMRAM:
   189                           	opt stack 0
   190  000260                     loop@cal:
   191                           	opt stack 0
   192  000260                     	ds	1
   193                           tblptru	equ	0xFF8
   194                           postinc0	equ	0xFEE
   195                           wreg	equ	0xFE8
   196                           
   197                           	psect	bssCOMRAM
   198  00003C                     __pbssCOMRAM:
   199                           	opt stack 0
   200  00003C                     _mins:
   201                           	opt stack 0
   202  00003C                     	ds	10
   203  000046                     _millisCounter:
   204                           	opt stack 0
   205  000046                     	ds	4
   206  00004A                     _fractionCounter:
   207                           	opt stack 0
   208  00004A                     	ds	2
   209                           tblptru	equ	0xFF8
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           
   213                           	psect	bssBANK0
   214  000099                     __pbssBANK0:
   215                           	opt stack 0
   216  000099                     _maxs:
   217                           	opt stack 0
   218  000099                     	ds	10
   219  0000A3                     calcPID@err:
   220                           	opt stack 0
   221  0000A3                     	ds	2
   222  0000A5                     calcPID@integral:
   223                           	opt stack 0
   224  0000A5                     	ds	2
   225  0000A7                     calcPID@prevErr:
   226                           	opt stack 0
   227  0000A7                     	ds	2
   228  0000A9                     loop@status:
   229                           	opt stack 0
   230  0000A9                     	ds	1
   231                           tblptru	equ	0xFF8
   232                           postinc0	equ	0xFEE
   233                           wreg	equ	0xFE8
   234                           
   235                           	psect	cstackBANK0
   236  000060                     __pcstackBANK0:
   237                           	opt stack 0
   238  000060                     ___fttol@sign1:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0x0
   242  000060                     	ds	1
   243  000061                     ___fttol@lval:
   244                           	opt stack 0
   245                           
   246                           ; 4 bytes @ 0x1
   247  000061                     	ds	4
   248  000065                     ___fttol@exp1:
   249                           	opt stack 0
   250                           
   251                           ; 1 bytes @ 0x5
   252  000065                     	ds	1
   253  000066                     ?___ftadd:
   254                           	opt stack 0
   255  000066                     ___ftadd@f1:
   256                           	opt stack 0
   257                           
   258                           ; 3 bytes @ 0x6
   259  000066                     	ds	3
   260  000069                     ___ftadd@f2:
   261                           	opt stack 0
   262                           
   263                           ; 3 bytes @ 0x9
   264  000069                     	ds	3
   265  00006C                     ___ftadd@sign:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0xC
   269  00006C                     	ds	1
   270  00006D                     ___ftadd@exp2:
   271                           	opt stack 0
   272                           
   273                           ; 1 bytes @ 0xD
   274  00006D                     	ds	1
   275  00006E                     ___ftadd@exp1:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0xE
   279  00006E                     	ds	1
   280  00006F                     ?_calcPID:
   281                           	opt stack 0
   282  00006F                     calcPID@Kp:
   283                           	opt stack 0
   284                           
   285                           ; 3 bytes @ 0xF
   286  00006F                     	ds	3
   287  000072                     calcPID@Ki:
   288                           	opt stack 0
   289                           
   290                           ; 3 bytes @ 0x12
   291  000072                     	ds	3
   292  000075                     calcPID@Kd:
   293                           	opt stack 0
   294                           
   295                           ; 3 bytes @ 0x15
   296  000075                     	ds	3
   297  000078                     _calcPID$1250:
   298                           	opt stack 0
   299                           
   300                           ; 3 bytes @ 0x18
   301  000078                     	ds	3
   302  00007B                     calcPID@pos:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x1B
   306  00007B                     	ds	2
   307  00007D                     _calcPID$1248:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x1D
   311  00007D                     	ds	2
   312  00007F                     _calcPID$1249:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x1F
   316  00007F                     	ds	2
   317  000081                     calcPID@s1:
   318                           	opt stack 0
   319                           
   320                           ; 4 bytes @ 0x21
   321  000081                     	ds	4
   322  000085                     calcPID@s2:
   323                           	opt stack 0
   324                           
   325                           ; 4 bytes @ 0x25
   326  000085                     	ds	4
   327  000089                     calcPID@val:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x29
   331  000089                     	ds	2
   332  00008B                     calcPID@i:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x2B
   336  00008B                     	ds	2
   337  00008D                     ??_loop:
   338                           
   339                           ; 1 bytes @ 0x2D
   340  00008D                     	ds	4
   341  000091                     loop@pid:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x31
   345  000091                     	ds	2
   346  000093                     loop@i:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x33
   350  000093                     	ds	2
   351  000095                     loop@i_451:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x35
   355  000095                     	ds	2
   356  000097                     loop@i_452:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x37
   360  000097                     	ds	2
   361                           tblptru	equ	0xFF8
   362                           postinc0	equ	0xFEE
   363                           wreg	equ	0xFE8
   364                           
   365                           	psect	cstackCOMRAM
   366  000001                     __pcstackCOMRAM:
   367                           	opt stack 0
   368  000001                     ??_ISR:
   369                           
   370                           ; 1 bytes @ 0x0
   371  000001                     	ds	18
   372  000013                     ?_getCNY:
   373                           	opt stack 0
   374  000013                     ?___awmod:
   375                           	opt stack 0
   376  000013                     ?___lwdiv:
   377                           	opt stack 0
   378  000013                     ?___ftpack:
   379                           	opt stack 0
   380  000013                     ?___lldiv:
   381                           	opt stack 0
   382  000013                     setLEDR@v:
   383                           	opt stack 0
   384  000013                     setLEDY@v:
   385                           	opt stack 0
   386  000013                     setLEDG@v:
   387                           	opt stack 0
   388  000013                     setLMotor@speed:
   389                           	opt stack 0
   390  000013                     setRMotor@speed:
   391                           	opt stack 0
   392  000013                     initCal@i:
   393                           	opt stack 0
   394  000013                     ___awmod@dividend:
   395                           	opt stack 0
   396  000013                     ___lwdiv@dividend:
   397                           	opt stack 0
   398  000013                     ___ftpack@arg:
   399                           	opt stack 0
   400  000013                     ___lldiv@dividend:
   401                           	opt stack 0
   402                           
   403                           ; 4 bytes @ 0x12
   404  000013                     	ds	1
   405  000014                     setLEDs@y:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x13
   409  000014                     	ds	1
   410  000015                     ??_setLMotor:
   411  000015                     ??_setRMotor:
   412  000015                     ??_getCNY:
   413  000015                     setLEDs@g:
   414                           	opt stack 0
   415  000015                     ___awmod@divisor:
   416                           	opt stack 0
   417  000015                     ___lwdiv@divisor:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x14
   421  000015                     	ds	1
   422  000016                     setLEDs@r:
   423                           	opt stack 0
   424  000016                     ___ftpack@exp:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x15
   428  000016                     	ds	1
   429  000017                     getCNY@channel:
   430                           	opt stack 0
   431  000017                     ___awmod@counter:
   432                           	opt stack 0
   433  000017                     ___ftpack@sign:
   434                           	opt stack 0
   435  000017                     setMotors@left:
   436                           	opt stack 0
   437  000017                     ___lwdiv@quotient:
   438                           	opt stack 0
   439  000017                     ___lldiv@divisor:
   440                           	opt stack 0
   441                           
   442                           ; 4 bytes @ 0x16
   443  000017                     	ds	1
   444  000018                     ??___ftpack:
   445  000018                     ___awmod@sign:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x17
   449  000018                     	ds	1
   450  000019                     ___lwdiv@counter:
   451                           	opt stack 0
   452  000019                     setMotors@right:
   453                           	opt stack 0
   454  000019                     calibrateCNY@channel:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x18
   458  000019                     	ds	1
   459  00001A                     ?___wmul:
   460                           	opt stack 0
   461  00001A                     ___wmul@multiplier:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x19
   465  00001A                     	ds	1
   466  00001B                     ?___awtoft:
   467                           	opt stack 0
   468  00001B                     ___awtoft@c:
   469                           	opt stack 0
   470  00001B                     ___lldiv@quotient:
   471                           	opt stack 0
   472                           
   473                           ; 4 bytes @ 0x1A
   474  00001B                     	ds	1
   475  00001C                     ___wmul@multiplicand:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x1B
   479  00001C                     	ds	1
   480  00001D                     _calibrateCNY$672:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x1C
   484  00001D                     	ds	1
   485  00001E                     ___awtoft@sign:
   486                           	opt stack 0
   487  00001E                     ___wmul@product:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x1D
   491  00001E                     	ds	1
   492  00001F                     ?___ftmul:
   493                           	opt stack 0
   494  00001F                     ___lldiv@counter:
   495                           	opt stack 0
   496  00001F                     _calibrateCNY$673:
   497                           	opt stack 0
   498  00001F                     ___ftmul@f1:
   499                           	opt stack 0
   500                           
   501                           ; 3 bytes @ 0x1E
   502  00001F                     	ds	1
   503  000020                     ?_getCalCNY:
   504                           	opt stack 0
   505  000020                     getCalCNY@channel:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x1F
   509  000020                     	ds	1
   510  000021                     calibrateCNY@val:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x20
   514  000021                     	ds	1
   515  000022                     ??_getCalCNY:
   516  000022                     ___ftmul@f2:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0x21
   520  000022                     	ds	3
   521  000025                     ??___ftmul:
   522                           
   523                           ; 1 bytes @ 0x24
   524  000025                     	ds	3
   525  000028                     ___ftmul@exp:
   526                           	opt stack 0
   527  000028                     _getCalCNY$677:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x27
   531  000028                     	ds	1
   532  000029                     ___ftmul@f3_as_product:
   533                           	opt stack 0
   534                           
   535                           ; 3 bytes @ 0x28
   536  000029                     	ds	1
   537  00002A                     _getCalCNY$678:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x29
   541  00002A                     	ds	2
   542  00002C                     ___ftmul@cntr:
   543                           	opt stack 0
   544  00002C                     getCalCNY@val:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x2B
   548  00002C                     	ds	1
   549  00002D                     ___ftmul@sign:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x2C
   553  00002D                     	ds	1
   554  00002E                     ?___fttol:
   555                           	opt stack 0
   556  00002E                     ___fttol@f1:
   557                           	opt stack 0
   558                           
   559                           ; 3 bytes @ 0x2D
   560  00002E                     	ds	4
   561  000032                     ??___fttol:
   562                           
   563                           ; 1 bytes @ 0x31
   564  000032                     	ds	5
   565  000037                     ??___ftadd:
   566                           
   567                           ; 1 bytes @ 0x36
   568  000037                     	ds	3
   569  00003A                     ??_calcPID:
   570                           
   571                           ; 1 bytes @ 0x39
   572  00003A                     	ds	2
   573  00003C                     tblptru	equ	0xFF8
   574                           postinc0	equ	0xFEE
   575                           wreg	equ	0xFE8
   576                           
   577                           ; 1 bytes @ 0x3B
   578 ;;
   579 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   580 ;;
   581 ;; *************** function _main *****************
   582 ;; Defined at:
   583 ;;		line 88 in file "main.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;		None
   586 ;; Auto vars:     Size  Location     Type
   587 ;;		None
   588 ;; Return value:  Size  Location     Type
   589 ;;                  1    wreg      void 
   590 ;; Registers used:
   591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   597 ;;      Params:         0       0       0       0       0       0       0       0       0
   598 ;;      Locals:         0       0       0       0       0       0       0       0       0
   599 ;;      Temps:          0       0       0       0       0       0       0       0       0
   600 ;;      Totals:         0       0       0       0       0       0       0       0       0
   601 ;;Total ram usage:        0 bytes
   602 ;; Hardware stack levels required when called:    6
   603 ;; This function calls:
   604 ;;		_initCNY
   605 ;;		_initCal
   606 ;;		_initInterrupts
   607 ;;		_initMotors
   608 ;;		_initTimer
   609 ;;		_initUI
   610 ;;		_loop
   611 ;; This function is called by:
   612 ;;		Startup code after reset
   613 ;; This function uses a non-reentrant model
   614 ;;
   615                           
   616                           	psect	text0
   617  0017E8                     __ptext0:
   618                           	opt stack 0
   619  0017E8                     _main:
   620                           	opt stack 25
   621                           
   622                           ;main.c: 89: initInterrupts();
   623                           
   624                           ;incstack = 0
   625  0017E8  EC54  F00C         	call	_initInterrupts	;wreg free
   626                           
   627                           ;main.c: 90: initTimer();
   628  0017EC  EC4F  F00C         	call	_initTimer	;wreg free
   629                           
   630                           ;main.c: 91: initUI();
   631  0017F0  EC25  F00C         	call	_initUI	;wreg free
   632                           
   633                           ;main.c: 92: initMotors();
   634  0017F4  EC9A  F00B         	call	_initMotors	;wreg free
   635                           
   636                           ;main.c: 93: initCNY();
   637  0017F8  EC1B  F00C         	call	_initCNY	;wreg free
   638                           
   639                           ;main.c: 94: initCal();
   640  0017FC  EC2B  F00B         	call	_initCal	;wreg free
   641  001800  EC09  F004         	call	_loop	;wreg free
   642  001804  D7FD               	goto	l169
   643  001806                     __end_of_main:
   644                           	opt stack 0
   645                           tblptru	equ	0xFF8
   646                           postinc0	equ	0xFEE
   647                           wreg	equ	0xFE8
   648                           
   649 ;; *************** function _loop *****************
   650 ;; Defined at:
   651 ;;		line 36 in file "main.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;		None
   654 ;; Auto vars:     Size  Location     Type
   655 ;;  i               2   55[BANK0 ] int 
   656 ;;  i               2   53[BANK0 ] int 
   657 ;;  i               2   51[BANK0 ] int 
   658 ;;  pid             2   49[BANK0 ] int 
   659 ;; Return value:  Size  Location     Type
   660 ;;                  1    wreg      void 
   661 ;; Registers used:
   662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   668 ;;      Params:         0       0       0       0       0       0       0       0       0
   669 ;;      Locals:         0       8       0       0       0       0       0       0       0
   670 ;;      Temps:          0       4       0       0       0       0       0       0       0
   671 ;;      Totals:         0      12       0       0       0       0       0       0       0
   672 ;;Total ram usage:       12 bytes
   673 ;; Hardware stack levels used:    1
   674 ;; Hardware stack levels required when called:    5
   675 ;; This function calls:
   676 ;;		___awmod
   677 ;;		_calcPID
   678 ;;		_calibrateCNY
   679 ;;		_getBTN1
   680 ;;		_getBTN2
   681 ;;		_setLEDs
   682 ;;		_setMotors
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text1
   689  000812                     __ptext1:
   690                           	opt stack 0
   691  000812                     _loop:
   692                           	opt stack 25
   693                           
   694                           ;main.c: 37: static char status = MENU;
   695                           ;main.c: 38: static bit cal = 0;
   696                           ;main.c: 39: int pid;
   697                           ;main.c: 40: switch(status){
   698                           
   699                           ;incstack = 0
   700  000812  D158               	goto	l138
   701  000814                     
   702                           ;main.c: 42: setMotors(0, 0);
   703  000814  0E00               	movlw	0
   704  000816  6E18               	movwf	setMotors@left+1,c
   705  000818  0E00               	movlw	0
   706  00081A  6E17               	movwf	setMotors@left,c
   707  00081C  0E00               	movlw	0
   708  00081E  6E1A               	movwf	setMotors@right+1,c
   709  000820  0E00               	movlw	0
   710  000822  6E19               	movwf	setMotors@right,c
   711  000824  EC03  F00C         	call	_setMotors	;wreg free
   712                           
   713                           ;main.c: 43: setLEDs(1, cal, 0);
   714  000828  0E00               	movlw	0
   715  00082A  B04C               	btfsc	loop@cal/(0+8),loop@cal& (0+7),c
   716  00082C  0E01               	movlw	1
   717  00082E  6E14               	movwf	setLEDs@y,c
   718  000830  0E00               	movlw	0
   719  000832  6E15               	movwf	setLEDs@g,c
   720  000834  0E01               	movlw	1
   721  000836  EC10  F00C         	call	_setLEDs
   722                           
   723                           ;main.c: 46: if(getBTN1()){
   724  00083A  EC49  F00C         	call	_getBTN1	;wreg free
   725  00083E  A0D8               	btfss	status,0,c
   726  000840  D009               	goto	l140
   727  000842                     u2390:
   728                           
   729                           ;main.c: 47: while(getBTN1()) continue;
   730  000842  EC49  F00C         	call	_getBTN1	;wreg free
   731  000846  B0D8               	btfsc	status,0,c
   732  000848  D7FC               	goto	u2390
   733                           
   734                           ;main.c: 48: cal = 1;
   735  00084A  804C               	bsf	loop@cal/(0+8),loop@cal& (0+7),c
   736                           
   737                           ;main.c: 49: status = CALIB;
   738  00084C  0E01               	movlw	1
   739  00084E  0100               	movlb	0	; () banked
   740  000850  6FA9               	movwf	loop@status& (0+255),b
   741                           
   742                           ;main.c: 50: break;
   743  000852  0012               	return	
   744  000854                     l140:
   745                           
   746                           ;main.c: 51: }
   747                           ;main.c: 52: if(getBTN2()){
   748                           
   749                           ; BSR set to: 0
   750  000854  EC43  F00C         	call	_getBTN2	;wreg free
   751  000858  A0D8               	btfss	status,0,c
   752  00085A  0012               	return	
   753                           
   754                           ;main.c: 53: if(cal) status = RUN;
   755  00085C  A04C               	btfss	loop@cal/(0+8),loop@cal& (0+7),c
   756  00085E  D004               	goto	l146
   757  000860  0E02               	movlw	2
   758  000862  0100               	movlb	0	; () banked
   759  000864  6FA9               	movwf	loop@status& (0+255),b
   760  000866  D011               	goto	l147
   761  000868                     l146:
   762                           
   763                           ;main.c: 54: else {
   764                           ;main.c: 55: setMotors(1000, 1000);
   765                           
   766                           ; BSR set to: 0
   767  000868  0E03               	movlw	3
   768  00086A  6E18               	movwf	setMotors@left+1,c
   769  00086C  0EE8               	movlw	232
   770  00086E  6E17               	movwf	setMotors@left,c
   771  000870  0E03               	movlw	3
   772  000872  6E1A               	movwf	setMotors@right+1,c
   773  000874  0EE8               	movlw	232
   774  000876  6E19               	movwf	setMotors@right,c
   775  000878  EC03  F00C         	call	_setMotors	;wreg free
   776                           
   777                           ;main.c: 56: setLEDs(1, 1, 1);
   778  00087C  0E01               	movlw	1
   779  00087E  6E14               	movwf	setLEDs@y,c
   780  000880  0E01               	movlw	1
   781  000882  6E15               	movwf	setLEDs@g,c
   782  000884  0E01               	movlw	1
   783  000886  EC10  F00C         	call	_setLEDs
   784  00088A                     l147:
   785                           
   786                           ;main.c: 57: }
   787                           ;main.c: 58: while(getBTN2()) continue;
   788  00088A  EC43  F00C         	call	_getBTN2	;wreg free
   789  00088E  A0D8               	btfss	status,0,c
   790  000890  0012               	return	
   791  000892  D7FB               	goto	l147
   792  000894                     
   793                           ;main.c: 64: setLEDs(0, 1, 0);
   794  000894  0E01               	movlw	1
   795  000896  6E14               	movwf	setLEDs@y,c
   796  000898  0E00               	movlw	0
   797  00089A  6E15               	movwf	setLEDs@g,c
   798  00089C  0E00               	movlw	0
   799  00089E  EC10  F00C         	call	_setLEDs
   800                           
   801                           ;main.c: 65: setMotors(-250, 250);
   802  0008A2  0EFF               	movlw	255
   803  0008A4  6E18               	movwf	setMotors@left+1,c
   804  0008A6  0E06               	movlw	6
   805  0008A8  6E17               	movwf	setMotors@left,c
   806  0008AA  0E00               	movlw	0
   807  0008AC  6E1A               	movwf	setMotors@right+1,c
   808  0008AE  0EFA               	movlw	250
   809  0008B0  6E19               	movwf	setMotors@right,c
   810  0008B2  EC03  F00C         	call	_setMotors	;wreg free
   811                           
   812                           ;main.c: 66: for(int i = 0; i < 10000; i++) calibrateCNY(i % 5);
   813  0008B6  0E00               	movlw	0
   814  0008B8  0100               	movlb	0	; () banked
   815  0008BA  6F94               	movwf	(loop@i+1)& (0+255),b
   816  0008BC  0E00               	movlw	0
   817  0008BE  6F93               	movwf	loop@i& (0+255),b
   818  0008C0  BF94               	btfsc	(loop@i+1)& (0+255),7,b
   819  0008C2  D006               	goto	l152
   820  0008C4  0E10               	movlw	16
   821  0008C6  5D93               	subwf	loop@i& (0+255),w,b
   822  0008C8  0E27               	movlw	39
   823  0008CA  5994               	subwfb	(loop@i+1)& (0+255),w,b
   824  0008CC  B0D8               	btfsc	status,0,c
   825  0008CE  D014               	goto	u2450
   826  0008D0                     l152:
   827                           
   828                           ; BSR set to: 0
   829                           
   830                           ; BSR set to: 0
   831  0008D0  C093  F013         	movff	loop@i,___awmod@dividend
   832  0008D4  C094  F014         	movff	loop@i+1,___awmod@dividend+1
   833  0008D8  0E00               	movlw	0
   834  0008DA  6E16               	movwf	___awmod@divisor+1,c
   835  0008DC  0E05               	movlw	5
   836  0008DE  6E15               	movwf	___awmod@divisor,c
   837  0008E0  ECC7  F00A         	call	___awmod	;wreg free
   838  0008E4  C013  F019         	movff	?___awmod,calibrateCNY@channel
   839  0008E8  C014  F01A         	movff	?___awmod+1,calibrateCNY@channel+1
   840  0008EC  ECF9  F008         	call	_calibrateCNY	;wreg free
   841  0008F0  0100               	movlb	0	; () banked
   842  0008F2  4B93               	infsnz	loop@i& (0+255),f,b
   843  0008F4  2B94               	incf	(loop@i+1)& (0+255),f,b
   844  0008F6  D7E4               	goto	L1
   845  0008F8                     u2450:
   846                           
   847                           ; BSR set to: 0
   848                           ;main.c: 67: setMotors(250, -250);
   849                           
   850                           ; BSR set to: 0
   851  0008F8  0E00               	movlw	0
   852  0008FA  6E18               	movwf	setMotors@left+1,c
   853  0008FC  0EFA               	movlw	250
   854  0008FE  6E17               	movwf	setMotors@left,c
   855  000900  0EFF               	movlw	255
   856  000902  6E1A               	movwf	setMotors@right+1,c
   857  000904  0E06               	movlw	6
   858  000906  6E19               	movwf	setMotors@right,c
   859  000908  EC03  F00C         	call	_setMotors	;wreg free
   860                           
   861                           ;main.c: 68: for(int i = 0; i < 20000; i++) calibrateCNY(i % 5);
   862  00090C  0E00               	movlw	0
   863  00090E  0100               	movlb	0	; () banked
   864  000910  6F96               	movwf	(loop@i_451+1)& (0+255),b
   865  000912  0E00               	movlw	0
   866  000914  6F95               	movwf	loop@i_451& (0+255),b
   867  000916                     l2377:
   868                           
   869                           ; BSR set to: 0
   870  000916  BF96               	btfsc	(loop@i_451+1)& (0+255),7,b
   871  000918  D006               	goto	l154
   872  00091A  0E20               	movlw	32
   873  00091C  5D95               	subwf	loop@i_451& (0+255),w,b
   874  00091E  0E4E               	movlw	78
   875  000920  5996               	subwfb	(loop@i_451+1)& (0+255),w,b
   876  000922  B0D8               	btfsc	status,0,c
   877  000924  D014               	goto	u2470
   878  000926                     l154:
   879                           
   880                           ; BSR set to: 0
   881                           
   882                           ; BSR set to: 0
   883  000926  C095  F013         	movff	loop@i_451,___awmod@dividend
   884  00092A  C096  F014         	movff	loop@i_451+1,___awmod@dividend+1
   885  00092E  0E00               	movlw	0
   886  000930  6E16               	movwf	___awmod@divisor+1,c
   887  000932  0E05               	movlw	5
   888  000934  6E15               	movwf	___awmod@divisor,c
   889  000936  ECC7  F00A         	call	___awmod	;wreg free
   890  00093A  C013  F019         	movff	?___awmod,calibrateCNY@channel
   891  00093E  C014  F01A         	movff	?___awmod+1,calibrateCNY@channel+1
   892  000942  ECF9  F008         	call	_calibrateCNY	;wreg free
   893  000946  0100               	movlb	0	; () banked
   894  000948  4B95               	infsnz	loop@i_451& (0+255),f,b
   895  00094A  2B96               	incf	(loop@i_451+1)& (0+255),f,b
   896  00094C  D7E4               	goto	l2377
   897  00094E                     u2470:
   898                           
   899                           ; BSR set to: 0
   900                           ;main.c: 69: setMotors(-250, 250);
   901                           
   902                           ; BSR set to: 0
   903  00094E  0EFF               	movlw	255
   904  000950  6E18               	movwf	setMotors@left+1,c
   905  000952  0E06               	movlw	6
   906  000954  6E17               	movwf	setMotors@left,c
   907  000956  0E00               	movlw	0
   908  000958  6E1A               	movwf	setMotors@right+1,c
   909  00095A  0EFA               	movlw	250
   910  00095C  6E19               	movwf	setMotors@right,c
   911  00095E  EC03  F00C         	call	_setMotors	;wreg free
   912                           
   913                           ;main.c: 70: for(int i = 0; i < 10000; i++) calibrateCNY(i % 5);
   914  000962  0E00               	movlw	0
   915  000964  0100               	movlb	0	; () banked
   916  000966  6F98               	movwf	(loop@i_452+1)& (0+255),b
   917  000968  0E00               	movlw	0
   918  00096A  6F97               	movwf	loop@i_452& (0+255),b
   919  00096C                     l2391:
   920                           
   921                           ; BSR set to: 0
   922  00096C  BF98               	btfsc	(loop@i_452+1)& (0+255),7,b
   923  00096E  D006               	goto	l156
   924  000970  0E10               	movlw	16
   925  000972  5D97               	subwf	loop@i_452& (0+255),w,b
   926  000974  0E27               	movlw	39
   927  000976  5998               	subwfb	(loop@i_452+1)& (0+255),w,b
   928  000978  B0D8               	btfsc	status,0,c
   929  00097A  D014               	goto	u2490
   930  00097C                     l156:
   931                           
   932                           ; BSR set to: 0
   933                           
   934                           ; BSR set to: 0
   935  00097C  C097  F013         	movff	loop@i_452,___awmod@dividend
   936  000980  C098  F014         	movff	loop@i_452+1,___awmod@dividend+1
   937  000984  0E00               	movlw	0
   938  000986  6E16               	movwf	___awmod@divisor+1,c
   939  000988  0E05               	movlw	5
   940  00098A  6E15               	movwf	___awmod@divisor,c
   941  00098C  ECC7  F00A         	call	___awmod	;wreg free
   942  000990  C013  F019         	movff	?___awmod,calibrateCNY@channel
   943  000994  C014  F01A         	movff	?___awmod+1,calibrateCNY@channel+1
   944  000998  ECF9  F008         	call	_calibrateCNY	;wreg free
   945  00099C  0100               	movlb	0	; () banked
   946  00099E  4B97               	infsnz	loop@i_452& (0+255),f,b
   947  0009A0  2B98               	incf	(loop@i_452+1)& (0+255),f,b
   948  0009A2  D7E4               	goto	l2391
   949  0009A4                     u2490:
   950                           
   951                           ; BSR set to: 0
   952                           ;main.c: 71: setMotors(0, 0);
   953                           
   954                           ; BSR set to: 0
   955  0009A4  0E00               	movlw	0
   956  0009A6  6E18               	movwf	setMotors@left+1,c
   957  0009A8  0E00               	movlw	0
   958  0009AA  6E17               	movwf	setMotors@left,c
   959  0009AC  0E00               	movlw	0
   960  0009AE  6E1A               	movwf	setMotors@right+1,c
   961  0009B0  0E00               	movlw	0
   962  0009B2  6E19               	movwf	setMotors@right,c
   963  0009B4  EC03  F00C         	call	_setMotors	;wreg free
   964                           
   965                           ;main.c: 72: status = MENU;
   966  0009B8  0E00               	movlw	0
   967  0009BA  0100               	movlb	0	; () banked
   968  0009BC  6FA9               	movwf	loop@status& (0+255),b
   969                           
   970                           ;main.c: 73: break;
   971  0009BE  0012               	return	
   972  0009C0                     
   973                           ; BSR set to: 0
   974                           ;main.c: 76: setLEDs(0, 0, 1);
   975                           
   976                           ; BSR set to: 0
   977  0009C0  0E00               	movlw	0
   978  0009C2  6E14               	movwf	setLEDs@y,c
   979  0009C4  0E01               	movlw	1
   980  0009C6  6E15               	movwf	setLEDs@g,c
   981  0009C8  0E00               	movlw	0
   982  0009CA  EC10  F00C         	call	_setLEDs
   983                           
   984                           ;main.c: 77: pid = calcPID(kp, ki, kd);
   985  0009CE  0E0C               	movlw	low _kp
   986  0009D0  6EF6               	movwf	tblptrl,c
   987  0009D2                     	if	1	;There is more than 1 active tblptr byte
   988  0009D2  0E08               	movlw	high _kp
   989  0009D4  6EF7               	movwf	tblptrh,c
   990  0009D6                     	endif
   991  0009D6                     	if	0	;There are less than 3 active tblptr bytes
   992  0009D6                     	endif
   993  0009D6  0009               	tblrd		*+
   994  0009D8  CFF5 F06F          	movff	tablat,calcPID@Kp
   995  0009DC  0009               	tblrd		*+
   996  0009DE  CFF5 F070          	movff	tablat,calcPID@Kp+1
   997  0009E2  000A               	tblrd		*-
   998  0009E4  CFF5 F071          	movff	tablat,calcPID@Kp+2
   999  0009E8  0E09               	movlw	low _ki
  1000  0009EA  6EF6               	movwf	tblptrl,c
  1001  0009EC                     	if	1	;There is more than 1 active tblptr byte
  1002  0009EC  0E08               	movlw	high _ki
  1003  0009EE  6EF7               	movwf	tblptrh,c
  1004  0009F0                     	endif
  1005  0009F0                     	if	0	;There are less than 3 active tblptr bytes
  1006  0009F0                     	endif
  1007  0009F0  0009               	tblrd		*+
  1008  0009F2  CFF5 F072          	movff	tablat,calcPID@Ki
  1009  0009F6  0009               	tblrd		*+
  1010  0009F8  CFF5 F073          	movff	tablat,calcPID@Ki+1
  1011  0009FC  000A               	tblrd		*-
  1012  0009FE  CFF5 F074          	movff	tablat,calcPID@Ki+2
  1013  000A02  0E06               	movlw	low _kd
  1014  000A04  6EF6               	movwf	tblptrl,c
  1015  000A06                     	if	1	;There is more than 1 active tblptr byte
  1016  000A06  0E08               	movlw	high _kd
  1017  000A08  6EF7               	movwf	tblptrh,c
  1018  000A0A                     	endif
  1019  000A0A                     	if	0	;There are less than 3 active tblptr bytes
  1020  000A0A                     	endif
  1021  000A0A  0009               	tblrd		*+
  1022  000A0C  CFF5 F075          	movff	tablat,calcPID@Kd
  1023  000A10  0009               	tblrd		*+
  1024  000A12  CFF5 F076          	movff	tablat,calcPID@Kd+1
  1025  000A16  000A               	tblrd		*-
  1026  000A18  CFF5 F077          	movff	tablat,calcPID@Kd+2
  1027  000A1C  EC6E  F005         	call	_calcPID	;wreg free
  1028  000A20  C06F  F091         	movff	?_calcPID,loop@pid
  1029  000A24  C070  F092         	movff	?_calcPID+1,loop@pid+1
  1030                           
  1031                           ;main.c: 78: if(pid < 0) setMotors((maxSpeed - pid), maxSpeed);
  1032  000A28  0100               	movlb	0	; () banked
  1033  000A2A  AF92               	btfss	(loop@pid+1)& (0+255),7,b
  1034  000A2C  D025               	goto	l159
  1035                           
  1036                           ; BSR set to: 0
  1037  000A2E  0E0F               	movlw	low _maxSpeed
  1038  000A30  6EF6               	movwf	tblptrl,c
  1039  000A32                     	if	1	;There is more than 1 active tblptr byte
  1040  000A32  0E08               	movlw	high _maxSpeed
  1041  000A34  6EF7               	movwf	tblptrh,c
  1042  000A36                     	endif
  1043  000A36                     	if	0	;There are less than 3 active tblptr bytes
  1044  000A36                     	endif
  1045  000A36  0009               	tblrd		*+
  1046  000A38  CFF5 F08D          	movff	tablat,??_loop
  1047  000A3C  0009               	tblrd		*+
  1048  000A3E  CFF5 F08E          	movff	tablat,??_loop+1
  1049  000A42  C091  F08F         	movff	loop@pid,??_loop+2
  1050  000A46  C092  F090         	movff	loop@pid+1,??_loop+3
  1051  000A4A  1F8F               	comf	(??_loop+2)& (0+255),f,b
  1052  000A4C  1F90               	comf	(??_loop+3)& (0+255),f,b
  1053  000A4E  4B8F               	infsnz	(??_loop+2)& (0+255),f,b
  1054  000A50  2B90               	incf	(??_loop+3)& (0+255),f,b
  1055  000A52  518D               	movf	??_loop& (0+255),w,b
  1056  000A54  258F               	addwf	(??_loop+2)& (0+255),w,b
  1057  000A56  6E17               	movwf	setMotors@left,c
  1058  000A58  518E               	movf	(??_loop+1)& (0+255),w,b
  1059  000A5A  2190               	addwfc	(??_loop+3)& (0+255),w,b
  1060  000A5C  6E18               	movwf	setMotors@left+1,c
  1061  000A5E  0E0F               	movlw	low _maxSpeed
  1062  000A60  6EF6               	movwf	tblptrl,c
  1063  000A62                     	if	1	;There is more than 1 active tblptr byte
  1064  000A62  0E08               	movlw	high _maxSpeed
  1065  000A64  6EF7               	movwf	tblptrh,c
  1066  000A66                     	endif
  1067  000A66                     	if	0	;There are less than 3 active tblptr bytes
  1068  000A66                     	endif
  1069  000A66  0009               	tblrd		*+
  1070  000A68  CFF5 F019          	movff	tablat,setMotors@right
  1071  000A6C  000A               	tblrd		*-
  1072  000A6E  CFF5 F01A          	movff	tablat,setMotors@right+1
  1073  000A72  EC03  F00C         	call	_setMotors	;wreg free
  1074  000A76  0012               	return	
  1075  000A78                     l159:
  1076                           
  1077                           ;main.c: 79: else setMotors(maxSpeed, (maxSpeed - pid));
  1078  000A78  0E0F               	movlw	low _maxSpeed
  1079  000A7A  6EF6               	movwf	tblptrl,c
  1080  000A7C                     	if	1	;There is more than 1 active tblptr byte
  1081  000A7C  0E08               	movlw	high _maxSpeed
  1082  000A7E  6EF7               	movwf	tblptrh,c
  1083  000A80                     	endif
  1084  000A80                     	if	0	;There are less than 3 active tblptr bytes
  1085  000A80                     	endif
  1086  000A80  0009               	tblrd		*+
  1087  000A82  CFF5 F017          	movff	tablat,setMotors@left
  1088  000A86  000A               	tblrd		*-
  1089  000A88  CFF5 F018          	movff	tablat,setMotors@left+1
  1090  000A8C  0E0F               	movlw	low _maxSpeed
  1091  000A8E  6EF6               	movwf	tblptrl,c
  1092  000A90                     	if	1	;There is more than 1 active tblptr byte
  1093  000A90  0E08               	movlw	high _maxSpeed
  1094  000A92  6EF7               	movwf	tblptrh,c
  1095  000A94                     	endif
  1096  000A94                     	if	0	;There are less than 3 active tblptr bytes
  1097  000A94                     	endif
  1098  000A94  0009               	tblrd		*+
  1099  000A96  CFF5 F08D          	movff	tablat,??_loop
  1100  000A9A  0009               	tblrd		*+
  1101  000A9C  CFF5 F08E          	movff	tablat,??_loop+1
  1102  000AA0  C091  F08F         	movff	loop@pid,??_loop+2
  1103  000AA4  C092  F090         	movff	loop@pid+1,??_loop+3
  1104  000AA8  0100               	movlb	0	; () banked
  1105  000AAA  1F8F               	comf	(??_loop+2)& (0+255),f,b
  1106  000AAC  1F90               	comf	(??_loop+3)& (0+255),f,b
  1107  000AAE  4B8F               	infsnz	(??_loop+2)& (0+255),f,b
  1108  000AB0  2B90               	incf	(??_loop+3)& (0+255),f,b
  1109  000AB2  518D               	movf	??_loop& (0+255),w,b
  1110  000AB4  258F               	addwf	(??_loop+2)& (0+255),w,b
  1111  000AB6  6E19               	movwf	setMotors@right,c
  1112  000AB8  518E               	movf	(??_loop+1)& (0+255),w,b
  1113  000ABA  2190               	addwfc	(??_loop+3)& (0+255),w,b
  1114  000ABC  6E1A               	movwf	setMotors@right+1,c
  1115  000ABE  EC03  F00C         	call	_setMotors	;wreg free
  1116                           
  1117                           ;main.c: 81: }
  1118                           
  1119                           ;main.c: 80: break;
  1120  000AC2  0012               	return	
  1121  000AC4                     l138:
  1122  000AC4  0100               	movlb	0	; () banked
  1123  000AC6  51A9               	movf	loop@status& (0+255),w,b
  1124                           
  1125                           ; Switch size 1, requested type "space"
  1126                           ; Number of cases is 3, Range of values is 0 to 2
  1127                           ; switch strategies available:
  1128                           ; Name         Instructions Cycles
  1129                           ; simple_byte           10     6 (average)
  1130                           ;	Chosen strategy is simple_byte
  1131  000AC8  0A00               	xorlw	0	; case 0
  1132  000ACA  B4D8               	btfsc	status,2,c
  1133  000ACC  D6A3               	goto	l139
  1134  000ACE  0A01               	xorlw	1	; case 1
  1135  000AD0  B4D8               	btfsc	status,2,c
  1136  000AD2  D6E0               	goto	l151
  1137  000AD4  0A03               	xorlw	3	; case 2
  1138  000AD6  A4D8               	btfss	status,2,c
  1139  000AD8  0012               	return	
  1140  000ADA  D772               	goto	l158
  1141  000ADC                     __end_of_loop:
  1142                           	opt stack 0
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           postinc0	equ	0xFEE
  1148                           wreg	equ	0xFE8
  1149                           status	equ	0xFD8
  1150                           
  1151 ;; *************** function _setMotors *****************
  1152 ;; Defined at:
  1153 ;;		line 34 in file "motors.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;  left            2   22[COMRAM] int 
  1156 ;;  right           2   24[COMRAM] int 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1168 ;;      Params:         4       0       0       0       0       0       0       0       0
  1169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1171 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1172 ;;Total ram usage:        4 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    3
  1175 ;; This function calls:
  1176 ;;		_setLMotor
  1177 ;;		_setRMotor
  1178 ;; This function is called by:
  1179 ;;		_loop
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           	psect	text2
  1184  001806                     __ptext2:
  1185                           	opt stack 0
  1186  001806                     _setMotors:
  1187                           	opt stack 26
  1188                           
  1189                           ;motors.c: 35: setLMotor(left);
  1190                           
  1191                           ;incstack = 0
  1192  001806  C017  F013         	movff	setMotors@left,setLMotor@speed
  1193  00180A  C018  F014         	movff	setMotors@left+1,setLMotor@speed+1
  1194  00180E  EC03  F00A         	call	_setLMotor	;wreg free
  1195                           
  1196                           ;motors.c: 36: setRMotor(right);
  1197  001812  C019  F013         	movff	setMotors@right,setRMotor@speed
  1198  001816  C01A  F014         	movff	setMotors@right+1,setRMotor@speed+1
  1199  00181A  EC87  F00A         	call	_setRMotor	;wreg free
  1200  00181E  0012               	return		;funcret
  1201  001820                     __end_of_setMotors:
  1202                           	opt stack 0
  1203                           tblptru	equ	0xFF8
  1204                           tblptrh	equ	0xFF7
  1205                           tblptrl	equ	0xFF6
  1206                           tablat	equ	0xFF5
  1207                           postinc0	equ	0xFEE
  1208                           wreg	equ	0xFE8
  1209                           status	equ	0xFD8
  1210                           
  1211 ;; *************** function _setRMotor *****************
  1212 ;; Defined at:
  1213 ;;		line 49 in file "motors.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;  speed           2   18[COMRAM] int 
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;		None
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg, status,2, status,0
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1227 ;;      Params:         2       0       0       0       0       0       0       0       0
  1228 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1229 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1230 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1231 ;;Total ram usage:        4 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    2
  1234 ;; This function calls:
  1235 ;;		Nothing
  1236 ;; This function is called by:
  1237 ;;		_setMotors
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           	psect	text3
  1242  00150E                     __ptext3:
  1243                           	opt stack 0
  1244  00150E                     _setRMotor:
  1245                           	opt stack 26
  1246                           
  1247                           ;motors.c: 50: LATCbits.LATC0 = speed < 0;
  1248                           
  1249                           ;incstack = 0
  1250  00150E  AE14               	btfss	setRMotor@speed+1,7,c
  1251  001510  D003               	goto	u1160
  1252  001512  6A15               	clrf	??_setRMotor& (0+255),c
  1253  001514  2A15               	incf	??_setRMotor& (0+255),f,c
  1254  001516  D001               	goto	u1178
  1255  001518                     u1160:
  1256  001518  6A15               	clrf	??_setRMotor& (0+255),c
  1257  00151A                     u1178:
  1258  00151A  508B               	movf	3979,w,c	;volatile
  1259  00151C  1815               	xorwf	??_setRMotor,w,c
  1260  00151E  0BFE               	andlw	-2
  1261  001520  1815               	xorwf	??_setRMotor,w,c
  1262  001522  6E8B               	movwf	3979,c	;volatile
  1263                           
  1264                           ;motors.c: 51: if(speed < -1000) speed = -1000;
  1265  001524  AE14               	btfss	setRMotor@speed+1,7,c
  1266  001526  D00A               	goto	l62
  1267  001528  0E18               	movlw	24
  1268  00152A  5C13               	subwf	setRMotor@speed,w,c
  1269  00152C  0EFC               	movlw	252
  1270  00152E  5814               	subwfb	setRMotor@speed+1,w,c
  1271  001530  B0D8               	btfsc	status,0,c
  1272  001532  D004               	goto	l62
  1273  001534  0EFC               	movlw	252
  1274  001536  6E14               	movwf	setRMotor@speed+1,c
  1275  001538  0E18               	movlw	24
  1276  00153A  6E13               	movwf	setRMotor@speed,c
  1277  00153C                     l62:
  1278                           
  1279                           ;motors.c: 52: if(speed > 1000) speed = 1000;
  1280  00153C  BE14               	btfsc	setRMotor@speed+1,7,c
  1281  00153E  D00A               	goto	l63
  1282  001540  0EE9               	movlw	233
  1283  001542  5C13               	subwf	setRMotor@speed,w,c
  1284  001544  0E03               	movlw	3
  1285  001546  5814               	subwfb	setRMotor@speed+1,w,c
  1286  001548  A0D8               	btfss	status,0,c
  1287  00154A  D004               	goto	l63
  1288  00154C  0E03               	movlw	3
  1289  00154E  6E14               	movwf	setRMotor@speed+1,c
  1290  001550  0EE8               	movlw	232
  1291  001552  6E13               	movwf	setRMotor@speed,c
  1292  001554                     l63:
  1293                           
  1294                           ;motors.c: 53: if(speed < 0) speed += 1000;
  1295  001554  AE14               	btfss	setRMotor@speed+1,7,c
  1296  001556  D004               	goto	l64
  1297  001558  0EE8               	movlw	232
  1298  00155A  2613               	addwf	setRMotor@speed,f,c
  1299  00155C  0E03               	movlw	3
  1300  00155E  2214               	addwfc	setRMotor@speed+1,f,c
  1301  001560                     l64:
  1302                           
  1303                           ;motors.c: 55: CCP2CONbits.DC2B = speed & 3;
  1304  001560  C013  F015         	movff	setRMotor@speed,??_setRMotor
  1305  001564  0E03               	movlw	3
  1306  001566  1615               	andwf	??_setRMotor,f,c
  1307  001568  3A15               	swapf	??_setRMotor,f,c
  1308  00156A  50BA               	movf	4026,w,c	;volatile
  1309  00156C  1815               	xorwf	??_setRMotor,w,c
  1310  00156E  0BCF               	andlw	-49
  1311  001570  1815               	xorwf	??_setRMotor,w,c
  1312  001572  6EBA               	movwf	4026,c	;volatile
  1313                           
  1314                           ;motors.c: 56: CCPR2L = speed >> 2;
  1315  001574  C013  F015         	movff	setRMotor@speed,??_setRMotor
  1316  001578  C014  F016         	movff	setRMotor@speed+1,??_setRMotor+1
  1317  00157C  3416               	rlcf	??_setRMotor+1,w,c
  1318  00157E  3216               	rrcf	??_setRMotor+1,f,c
  1319  001580  3215               	rrcf	??_setRMotor,f,c
  1320  001582  3416               	rlcf	??_setRMotor+1,w,c
  1321  001584  3216               	rrcf	??_setRMotor+1,f,c
  1322  001586  3215               	rrcf	??_setRMotor,f,c
  1323  001588  5015               	movf	??_setRMotor,w,c
  1324  00158A  6EBB               	movwf	4027,c	;volatile
  1325  00158C  0012               	return		;funcret
  1326  00158E                     __end_of_setRMotor:
  1327                           	opt stack 0
  1328                           tblptru	equ	0xFF8
  1329                           tblptrh	equ	0xFF7
  1330                           tblptrl	equ	0xFF6
  1331                           tablat	equ	0xFF5
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           status	equ	0xFD8
  1335                           
  1336 ;; *************** function _setLMotor *****************
  1337 ;; Defined at:
  1338 ;;		line 39 in file "motors.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  speed           2   18[COMRAM] int 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;		None
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2, status,0
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1352 ;;      Params:         2       0       0       0       0       0       0       0       0
  1353 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1354 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1355 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1356 ;;Total ram usage:        4 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    2
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_setMotors
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text4
  1367  001406                     __ptext4:
  1368                           	opt stack 0
  1369  001406                     _setLMotor:
  1370                           	opt stack 26
  1371                           
  1372                           ;motors.c: 40: LATCbits.LATC6 = speed < 0;
  1373                           
  1374                           ;incstack = 0
  1375  001406  AE14               	btfss	setLMotor@speed+1,7,c
  1376  001408  D003               	goto	u1110
  1377  00140A  6A15               	clrf	??_setLMotor& (0+255),c
  1378  00140C  2A15               	incf	??_setLMotor& (0+255),f,c
  1379  00140E  D001               	goto	u1128
  1380  001410                     u1110:
  1381  001410  6A15               	clrf	??_setLMotor& (0+255),c
  1382  001412                     u1128:
  1383  001412  3A15               	swapf	??_setLMotor,f,c
  1384  001414  4615               	rlncf	??_setLMotor,f,c
  1385  001416  4615               	rlncf	??_setLMotor,f,c
  1386  001418  508B               	movf	3979,w,c	;volatile
  1387  00141A  1815               	xorwf	??_setLMotor,w,c
  1388  00141C  0BBF               	andlw	-65
  1389  00141E  1815               	xorwf	??_setLMotor,w,c
  1390  001420  6E8B               	movwf	3979,c	;volatile
  1391                           
  1392                           ;motors.c: 41: if(speed < -1000) speed = -1000;
  1393  001422  AE14               	btfss	setLMotor@speed+1,7,c
  1394  001424  D00A               	goto	l56
  1395  001426  0E18               	movlw	24
  1396  001428  5C13               	subwf	setLMotor@speed,w,c
  1397  00142A  0EFC               	movlw	252
  1398  00142C  5814               	subwfb	setLMotor@speed+1,w,c
  1399  00142E  B0D8               	btfsc	status,0,c
  1400  001430  D004               	goto	l56
  1401  001432  0EFC               	movlw	252
  1402  001434  6E14               	movwf	setLMotor@speed+1,c
  1403  001436  0E18               	movlw	24
  1404  001438  6E13               	movwf	setLMotor@speed,c
  1405  00143A                     l56:
  1406                           
  1407                           ;motors.c: 42: if(speed > 1000) speed = 1000;
  1408  00143A  BE14               	btfsc	setLMotor@speed+1,7,c
  1409  00143C  D00A               	goto	l57
  1410  00143E  0EE9               	movlw	233
  1411  001440  5C13               	subwf	setLMotor@speed,w,c
  1412  001442  0E03               	movlw	3
  1413  001444  5814               	subwfb	setLMotor@speed+1,w,c
  1414  001446  A0D8               	btfss	status,0,c
  1415  001448  D004               	goto	l57
  1416  00144A  0E03               	movlw	3
  1417  00144C  6E14               	movwf	setLMotor@speed+1,c
  1418  00144E  0EE8               	movlw	232
  1419  001450  6E13               	movwf	setLMotor@speed,c
  1420  001452                     l57:
  1421                           
  1422                           ;motors.c: 43: if(speed < 0) speed += 1000;
  1423  001452  AE14               	btfss	setLMotor@speed+1,7,c
  1424  001454  D004               	goto	l58
  1425  001456  0EE8               	movlw	232
  1426  001458  2613               	addwf	setLMotor@speed,f,c
  1427  00145A  0E03               	movlw	3
  1428  00145C  2214               	addwfc	setLMotor@speed+1,f,c
  1429  00145E                     l58:
  1430                           
  1431                           ;motors.c: 45: CCP1CONbits.DC1B = speed & 3;
  1432  00145E  C013  F015         	movff	setLMotor@speed,??_setLMotor
  1433  001462  0E03               	movlw	3
  1434  001464  1615               	andwf	??_setLMotor,f,c
  1435  001466  3A15               	swapf	??_setLMotor,f,c
  1436  001468  50BD               	movf	4029,w,c	;volatile
  1437  00146A  1815               	xorwf	??_setLMotor,w,c
  1438  00146C  0BCF               	andlw	-49
  1439  00146E  1815               	xorwf	??_setLMotor,w,c
  1440  001470  6EBD               	movwf	4029,c	;volatile
  1441                           
  1442                           ;motors.c: 46: CCPR1L = speed >> 2;
  1443  001472  C013  F015         	movff	setLMotor@speed,??_setLMotor
  1444  001476  C014  F016         	movff	setLMotor@speed+1,??_setLMotor+1
  1445  00147A  3416               	rlcf	??_setLMotor+1,w,c
  1446  00147C  3216               	rrcf	??_setLMotor+1,f,c
  1447  00147E  3215               	rrcf	??_setLMotor,f,c
  1448  001480  3416               	rlcf	??_setLMotor+1,w,c
  1449  001482  3216               	rrcf	??_setLMotor+1,f,c
  1450  001484  3215               	rrcf	??_setLMotor,f,c
  1451  001486  5015               	movf	??_setLMotor,w,c
  1452  001488  6EBE               	movwf	4030,c	;volatile
  1453  00148A  0012               	return		;funcret
  1454  00148C                     __end_of_setLMotor:
  1455                           	opt stack 0
  1456                           tblptru	equ	0xFF8
  1457                           tblptrh	equ	0xFF7
  1458                           tblptrl	equ	0xFF6
  1459                           tablat	equ	0xFF5
  1460                           postinc0	equ	0xFEE
  1461                           wreg	equ	0xFE8
  1462                           status	equ	0xFD8
  1463                           
  1464 ;; *************** function _setLEDs *****************
  1465 ;; Defined at:
  1466 ;;		line 32 in file "ui.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  r               1    wreg     unsigned char 
  1469 ;;  y               1   19[COMRAM] unsigned char 
  1470 ;;  g               1   20[COMRAM] unsigned char 
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;  r               1   21[COMRAM] unsigned char 
  1473 ;; Return value:  Size  Location     Type
  1474 ;;                  1    wreg      void 
  1475 ;; Registers used:
  1476 ;;		wreg, status,2, cstack
  1477 ;; Tracked objects:
  1478 ;;		On entry : 0/0
  1479 ;;		On exit  : 0/0
  1480 ;;		Unchanged: 0/0
  1481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1482 ;;      Params:         2       0       0       0       0       0       0       0       0
  1483 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1484 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1485 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1486 ;;Total ram usage:        3 bytes
  1487 ;; Hardware stack levels used:    1
  1488 ;; Hardware stack levels required when called:    3
  1489 ;; This function calls:
  1490 ;;		_setLEDG
  1491 ;;		_setLEDR
  1492 ;;		_setLEDY
  1493 ;; This function is called by:
  1494 ;;		_loop
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text5
  1499  001820                     __ptext5:
  1500                           	opt stack 0
  1501  001820                     _setLEDs:
  1502                           	opt stack 26
  1503                           
  1504                           ;incstack = 0
  1505                           ;setLEDs@r stored from wreg
  1506  001820  6E16               	movwf	setLEDs@r,c
  1507                           
  1508                           ;ui.c: 33: setLEDR(r);
  1509  001822  5016               	movf	setLEDs@r,w,c
  1510  001824  EC35  F00C         	call	_setLEDR
  1511                           
  1512                           ;ui.c: 34: setLEDY(y);
  1513  001828  5014               	movf	setLEDs@y,w,c
  1514  00182A  EC2E  F00C         	call	_setLEDY
  1515                           
  1516                           ;ui.c: 35: setLEDG(g);
  1517  00182E  5015               	movf	setLEDs@g,w,c
  1518  001830  EC3C  F00C         	call	_setLEDG
  1519  001834  0012               	return		;funcret
  1520  001836                     __end_of_setLEDs:
  1521                           	opt stack 0
  1522                           tblptru	equ	0xFF8
  1523                           tblptrh	equ	0xFF7
  1524                           tblptrl	equ	0xFF6
  1525                           tablat	equ	0xFF5
  1526                           postinc0	equ	0xFEE
  1527                           wreg	equ	0xFE8
  1528                           status	equ	0xFD8
  1529                           
  1530 ;; *************** function _setLEDY *****************
  1531 ;; Defined at:
  1532 ;;		line 54 in file "ui.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;  v               1    wreg     unsigned char 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;  v               1   18[COMRAM] unsigned char 
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      void 
  1539 ;; Registers used:
  1540 ;;		wreg
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1546 ;;      Params:         0       0       0       0       0       0       0       0       0
  1547 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1548 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1549 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1550 ;;Total ram usage:        1 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    2
  1553 ;; This function calls:
  1554 ;;		Nothing
  1555 ;; This function is called by:
  1556 ;;		_setLEDs
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text6
  1561  00185C                     __ptext6:
  1562                           	opt stack 0
  1563  00185C                     _setLEDY:
  1564                           	opt stack 26
  1565                           
  1566                           ;incstack = 0
  1567                           ;setLEDY@v stored from wreg
  1568  00185C  6E13               	movwf	setLEDY@v,c
  1569                           
  1570                           ;ui.c: 55: LATBbits.LB2 = v;
  1571  00185E  B013               	btfsc	setLEDY@v,0,c
  1572  001860  D002               	bra	u1245
  1573  001862  948A               	bcf	3978,2,c	;volatile
  1574  001864  D001               	bra	u1246
  1575  001866                     u1245:
  1576  001866  848A               	bsf	3978,2,c	;volatile
  1577  001868                     u1246:
  1578  001868  0012               	return		;funcret
  1579  00186A                     __end_of_setLEDY:
  1580                           	opt stack 0
  1581                           tblptru	equ	0xFF8
  1582                           tblptrh	equ	0xFF7
  1583                           tblptrl	equ	0xFF6
  1584                           tablat	equ	0xFF5
  1585                           postinc0	equ	0xFEE
  1586                           wreg	equ	0xFE8
  1587                           status	equ	0xFD8
  1588                           
  1589 ;; *************** function _setLEDR *****************
  1590 ;; Defined at:
  1591 ;;		line 50 in file "ui.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;  v               1    wreg     unsigned char 
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;  v               1   18[COMRAM] unsigned char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  1    wreg      void 
  1598 ;; Registers used:
  1599 ;;		wreg
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1605 ;;      Params:         0       0       0       0       0       0       0       0       0
  1606 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1607 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1608 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1609 ;;Total ram usage:        1 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    2
  1612 ;; This function calls:
  1613 ;;		Nothing
  1614 ;; This function is called by:
  1615 ;;		_setLEDs
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           	psect	text7
  1620  00186A                     __ptext7:
  1621                           	opt stack 0
  1622  00186A                     _setLEDR:
  1623                           	opt stack 26
  1624                           
  1625                           ;incstack = 0
  1626                           ;setLEDR@v stored from wreg
  1627  00186A  6E13               	movwf	setLEDR@v,c
  1628                           
  1629                           ;ui.c: 51: LATBbits.LB1 = v;
  1630  00186C  B013               	btfsc	setLEDR@v,0,c
  1631  00186E  D002               	bra	u1235
  1632  001870  928A               	bcf	3978,1,c	;volatile
  1633  001872  D001               	bra	u1236
  1634  001874                     u1235:
  1635  001874  828A               	bsf	3978,1,c	;volatile
  1636  001876                     u1236:
  1637  001876  0012               	return		;funcret
  1638  001878                     __end_of_setLEDR:
  1639                           	opt stack 0
  1640                           tblptru	equ	0xFF8
  1641                           tblptrh	equ	0xFF7
  1642                           tblptrl	equ	0xFF6
  1643                           tablat	equ	0xFF5
  1644                           postinc0	equ	0xFEE
  1645                           wreg	equ	0xFE8
  1646                           status	equ	0xFD8
  1647                           
  1648 ;; *************** function _setLEDG *****************
  1649 ;; Defined at:
  1650 ;;		line 58 in file "ui.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;  v               1    wreg     unsigned char 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  v               1   18[COMRAM] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1664 ;;      Params:         0       0       0       0       0       0       0       0       0
  1665 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1667 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1668 ;;Total ram usage:        1 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    2
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_setLEDs
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text8
  1679  001878                     __ptext8:
  1680                           	opt stack 0
  1681  001878                     _setLEDG:
  1682                           	opt stack 26
  1683                           
  1684                           ;incstack = 0
  1685                           ;setLEDG@v stored from wreg
  1686  001878  6E13               	movwf	setLEDG@v,c
  1687                           
  1688                           ;ui.c: 59: LATBbits.LB3 = v;
  1689  00187A  B013               	btfsc	setLEDG@v,0,c
  1690  00187C  D002               	bra	u1255
  1691  00187E  968A               	bcf	3978,3,c	;volatile
  1692  001880  D001               	bra	u1256
  1693  001882                     u1255:
  1694  001882  868A               	bsf	3978,3,c	;volatile
  1695  001884                     u1256:
  1696  001884  0012               	return		;funcret
  1697  001886                     __end_of_setLEDG:
  1698                           	opt stack 0
  1699                           tblptru	equ	0xFF8
  1700                           tblptrh	equ	0xFF7
  1701                           tblptrl	equ	0xFF6
  1702                           tablat	equ	0xFF5
  1703                           postinc0	equ	0xFEE
  1704                           wreg	equ	0xFE8
  1705                           status	equ	0xFD8
  1706                           
  1707 ;; *************** function _getBTN2 *****************
  1708 ;; Defined at:
  1709 ;;		line 42 in file "ui.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;		None
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;		None
  1714 ;; Return value:  Size  Location     Type
  1715 ;;		None               void
  1716 ;; Registers used:
  1717 ;;		status,0
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1723 ;;      Params:         0       0       0       0       0       0       0       0       0
  1724 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1725 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1726 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1727 ;;Total ram usage:        0 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; Hardware stack levels required when called:    2
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		_loop
  1734 ;;		_getBTNs
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text9
  1739  001886                     __ptext9:
  1740                           	opt stack 0
  1741  001886                     _getBTN2:
  1742                           	opt stack 27
  1743                           
  1744                           ;ui.c: 43: return !PORTBbits.RB5;
  1745                           
  1746                           ;incstack = 0
  1747  001886  AA81               	btfss	3969,5,c	;volatile
  1748  001888  D002               	goto	l1547
  1749  00188A  90D8               	bcf	status,0,c
  1750  00188C  0012               	return	
  1751  00188E                     l1547:
  1752  00188E  80D8               	bsf	status,0,c
  1753  001890  0012               	return	
  1754  001892                     __end_of_getBTN2:
  1755                           	opt stack 0
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           status	equ	0xFD8
  1763                           
  1764 ;; *************** function _getBTN1 *****************
  1765 ;; Defined at:
  1766 ;;		line 38 in file "ui.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;		None
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;		None               void
  1773 ;; Registers used:
  1774 ;;		status,0
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1780 ;;      Params:         0       0       0       0       0       0       0       0       0
  1781 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1783 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1784 ;;Total ram usage:        0 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    2
  1787 ;; This function calls:
  1788 ;;		Nothing
  1789 ;; This function is called by:
  1790 ;;		_loop
  1791 ;;		_getBTNs
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text10
  1796  001892                     __ptext10:
  1797                           	opt stack 0
  1798  001892                     _getBTN1:
  1799                           	opt stack 27
  1800                           
  1801                           ;ui.c: 39: return !PORTBbits.RB0;
  1802                           
  1803                           ;incstack = 0
  1804  001892  A081               	btfss	3969,0,c	;volatile
  1805  001894  D002               	goto	l1551
  1806  001896  90D8               	bcf	status,0,c
  1807  001898  0012               	return	
  1808  00189A                     l1551:
  1809  00189A  80D8               	bsf	status,0,c
  1810  00189C  0012               	return	
  1811  00189E                     __end_of_getBTN1:
  1812                           	opt stack 0
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           postinc0	equ	0xFEE
  1818                           wreg	equ	0xFE8
  1819                           status	equ	0xFD8
  1820                           
  1821 ;; *************** function _calibrateCNY *****************
  1822 ;; Defined at:
  1823 ;;		line 18 in file "calibration.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;  channel         2   24[COMRAM] unsigned int 
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;  val             2   32[COMRAM] unsigned int 
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      void 
  1830 ;; Registers used:
  1831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1837 ;;      Params:         2       0       0       0       0       0       0       0       0
  1838 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1839 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1840 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1841 ;;Total ram usage:       10 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    3
  1844 ;; This function calls:
  1845 ;;		_getCNY
  1846 ;; This function is called by:
  1847 ;;		_loop
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text11
  1852  0011F2                     __ptext11:
  1853                           	opt stack 0
  1854  0011F2                     _calibrateCNY:
  1855                           	opt stack 26
  1856                           
  1857                           ;calibration.c: 19: unsigned int val = getCNY(channel);
  1858                           
  1859                           ;incstack = 0
  1860  0011F2  5019               	movf	calibrateCNY@channel,w,c
  1861  0011F4  ECFF  F00A         	call	_getCNY
  1862  0011F8  C013  F021         	movff	?_getCNY,calibrateCNY@val
  1863  0011FC  C014  F022         	movff	?_getCNY+1,calibrateCNY@val+1
  1864                           
  1865                           ;calibration.c: 20: mins[channel] = ((val) < (mins[channel]) ? (val) : (mins[channel]));
  1866  001200  90D8               	bcf	status,0,c
  1867  001202  3419               	rlcf	calibrateCNY@channel,w,c
  1868  001204  6ED9               	movwf	fsr2l,c
  1869  001206  341A               	rlcf	calibrateCNY@channel+1,w,c
  1870  001208  6EDA               	movwf	fsr2h,c
  1871  00120A  0E3C               	movlw	low _mins
  1872  00120C  26D9               	addwf	fsr2l,f,c
  1873  00120E  0E00               	movlw	high _mins
  1874  001210  22DA               	addwfc	fsr2h,f,c
  1875  001212  50DE               	movf	postinc2,w,c
  1876  001214  5C21               	subwf	calibrateCNY@val,w,c
  1877  001216  50DE               	movf	postinc2,w,c
  1878  001218  5822               	subwfb	calibrateCNY@val+1,w,c
  1879  00121A  A0D8               	btfss	status,0,c
  1880  00121C  D00E               	goto	l239
  1881  00121E  90D8               	bcf	status,0,c
  1882  001220  3419               	rlcf	calibrateCNY@channel,w,c
  1883  001222  6ED9               	movwf	fsr2l,c
  1884  001224  341A               	rlcf	calibrateCNY@channel+1,w,c
  1885  001226  6EDA               	movwf	fsr2h,c
  1886  001228  0E3C               	movlw	low _mins
  1887  00122A  26D9               	addwf	fsr2l,f,c
  1888  00122C  0E00               	movlw	high _mins
  1889  00122E  22DA               	addwfc	fsr2h,f,c
  1890  001230  CFDE F01D          	movff	postinc2,_calibrateCNY$672
  1891  001234  CFDD F01E          	movff	postdec2,_calibrateCNY$672+1
  1892  001238  D004               	goto	l241
  1893  00123A                     l239:
  1894  00123A  C021  F01D         	movff	calibrateCNY@val,_calibrateCNY$672
  1895  00123E  C022  F01E         	movff	calibrateCNY@val+1,_calibrateCNY$672+1
  1896  001242                     l241:
  1897  001242  90D8               	bcf	status,0,c
  1898  001244  3419               	rlcf	calibrateCNY@channel,w,c
  1899  001246  6ED9               	movwf	fsr2l,c
  1900  001248  341A               	rlcf	calibrateCNY@channel+1,w,c
  1901  00124A  6EDA               	movwf	fsr2h,c
  1902  00124C  0E3C               	movlw	low _mins
  1903  00124E  26D9               	addwf	fsr2l,f,c
  1904  001250  0E00               	movlw	high _mins
  1905  001252  22DA               	addwfc	fsr2h,f,c
  1906  001254  C01D  FFDE         	movff	_calibrateCNY$672,postinc2
  1907  001258  C01E  FFDD         	movff	_calibrateCNY$672+1,postdec2
  1908                           
  1909                           ;calibration.c: 21: maxs[channel] = ((val) > (maxs[channel]) ? (val) : (maxs[channel]));
  1910  00125C  90D8               	bcf	status,0,c
  1911  00125E  3419               	rlcf	calibrateCNY@channel,w,c
  1912  001260  6ED9               	movwf	fsr2l,c
  1913  001262  341A               	rlcf	calibrateCNY@channel+1,w,c
  1914  001264  6EDA               	movwf	fsr2h,c
  1915  001266  0E99               	movlw	low _maxs
  1916  001268  26D9               	addwf	fsr2l,f,c
  1917  00126A  0E00               	movlw	high _maxs
  1918  00126C  22DA               	addwfc	fsr2h,f,c
  1919  00126E  5021               	movf	calibrateCNY@val,w,c
  1920  001270  5CDE               	subwf	postinc2,w,c
  1921  001272  5022               	movf	calibrateCNY@val+1,w,c
  1922  001274  58DE               	subwfb	postinc2,w,c
  1923  001276  A0D8               	btfss	status,0,c
  1924  001278  D00E               	goto	l243
  1925  00127A  90D8               	bcf	status,0,c
  1926  00127C  3419               	rlcf	calibrateCNY@channel,w,c
  1927  00127E  6ED9               	movwf	fsr2l,c
  1928  001280  341A               	rlcf	calibrateCNY@channel+1,w,c
  1929  001282  6EDA               	movwf	fsr2h,c
  1930  001284  0E99               	movlw	low _maxs
  1931  001286  26D9               	addwf	fsr2l,f,c
  1932  001288  0E00               	movlw	high _maxs
  1933  00128A  22DA               	addwfc	fsr2h,f,c
  1934  00128C  CFDE F01F          	movff	postinc2,_calibrateCNY$673
  1935  001290  CFDD F020          	movff	postdec2,_calibrateCNY$673+1
  1936  001294  D004               	goto	l245
  1937  001296                     l243:
  1938  001296  C021  F01F         	movff	calibrateCNY@val,_calibrateCNY$673
  1939  00129A  C022  F020         	movff	calibrateCNY@val+1,_calibrateCNY$673+1
  1940  00129E                     l245:
  1941  00129E  90D8               	bcf	status,0,c
  1942  0012A0  3419               	rlcf	calibrateCNY@channel,w,c
  1943  0012A2  6ED9               	movwf	fsr2l,c
  1944  0012A4  341A               	rlcf	calibrateCNY@channel+1,w,c
  1945  0012A6  6EDA               	movwf	fsr2h,c
  1946  0012A8  0E99               	movlw	low _maxs
  1947  0012AA  26D9               	addwf	fsr2l,f,c
  1948  0012AC  0E00               	movlw	high _maxs
  1949  0012AE  22DA               	addwfc	fsr2h,f,c
  1950  0012B0  C01F  FFDE         	movff	_calibrateCNY$673,postinc2
  1951  0012B4  C020  FFDD         	movff	_calibrateCNY$673+1,postdec2
  1952  0012B8  0012               	return		;funcret
  1953  0012BA                     __end_of_calibrateCNY:
  1954                           	opt stack 0
  1955                           tblptru	equ	0xFF8
  1956                           tblptrh	equ	0xFF7
  1957                           tblptrl	equ	0xFF6
  1958                           tablat	equ	0xFF5
  1959                           postinc0	equ	0xFEE
  1960                           wreg	equ	0xFE8
  1961                           postinc2	equ	0xFDE
  1962                           postdec2	equ	0xFDD
  1963                           fsr2h	equ	0xFDA
  1964                           fsr2l	equ	0xFD9
  1965                           status	equ	0xFD8
  1966                           
  1967 ;; *************** function _calcPID *****************
  1968 ;; Defined at:
  1969 ;;		line 20 in file "main.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  Kp              3   15[BANK0 ] const float 
  1972 ;;  Ki              3   18[BANK0 ] const float 
  1973 ;;  Kd              3   21[BANK0 ] const float 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  val             2   41[BANK0 ] const unsigned int 
  1976 ;;  i               2   43[BANK0 ] int 
  1977 ;;  s2              4   37[BANK0 ] unsigned long 
  1978 ;;  s1              4   33[BANK0 ] unsigned long 
  1979 ;;  pos             2   27[BANK0 ] const int 
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  2   15[BANK0 ] int 
  1982 ;; Registers used:
  1983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1989 ;;      Params:         0       9       0       0       0       0       0       0       0
  1990 ;;      Locals:         0      21       0       0       0       0       0       0       0
  1991 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1992 ;;      Totals:         2      30       0       0       0       0       0       0       0
  1993 ;;Total ram usage:       32 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    4
  1996 ;; This function calls:
  1997 ;;		___awtoft
  1998 ;;		___ftadd
  1999 ;;		___ftmul
  2000 ;;		___fttol
  2001 ;;		___lldiv
  2002 ;;		___wmul
  2003 ;;		_getCalCNY
  2004 ;; This function is called by:
  2005 ;;		_loop
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009                           	psect	text12
  2010  000ADC                     __ptext12:
  2011                           	opt stack 0
  2012  000ADC                     _calcPID:
  2013                           	opt stack 25
  2014                           
  2015                           ;main.c: 21: static int prevErr = 0, integral = 0, err;
  2016                           ;main.c: 22: unsigned long long s1 = 0, s2 = 0;
  2017                           
  2018                           ;incstack = 0
  2019  000ADC  0E00               	movlw	0
  2020  000ADE  0100               	movlb	0	; () banked
  2021  000AE0  6F81               	movwf	calcPID@s1& (0+255),b
  2022  000AE2  0E00               	movlw	0
  2023  000AE4  6F82               	movwf	(calcPID@s1+1)& (0+255),b
  2024  000AE6  0E00               	movlw	0
  2025  000AE8  6F83               	movwf	(calcPID@s1+2)& (0+255),b
  2026  000AEA  0E00               	movlw	0
  2027  000AEC  6F84               	movwf	(calcPID@s1+3)& (0+255),b
  2028  000AEE  0E00               	movlw	0
  2029  000AF0  6F85               	movwf	calcPID@s2& (0+255),b
  2030  000AF2  0E00               	movlw	0
  2031  000AF4  6F86               	movwf	(calcPID@s2+1)& (0+255),b
  2032  000AF6  0E00               	movlw	0
  2033  000AF8  6F87               	movwf	(calcPID@s2+2)& (0+255),b
  2034  000AFA  0E00               	movlw	0
  2035  000AFC  6F88               	movwf	(calcPID@s2+3)& (0+255),b
  2036                           
  2037                           ;main.c: 23: for(int i = 0; i < 5; i++){
  2038  000AFE  0E00               	movlw	0
  2039  000B00  6F8C               	movwf	(calcPID@i+1)& (0+255),b
  2040  000B02  0E00               	movlw	0
  2041  000B04  6F8B               	movwf	calcPID@i& (0+255),b
  2042  000B06                     l2307:
  2043                           
  2044                           ; BSR set to: 0
  2045  000B06  BF8C               	btfsc	(calcPID@i+1)& (0+255),7,b
  2046  000B08  D006               	goto	l129
  2047  000B0A  518C               	movf	(calcPID@i+1)& (0+255),w,b
  2048  000B0C  E13D               	bnz	l2323
  2049  000B0E  0E05               	movlw	5
  2050  000B10  5D8B               	subwf	calcPID@i& (0+255),w,b
  2051  000B12  B0D8               	btfsc	status,0,c
  2052  000B14  D039               	goto	u2380
  2053  000B16                     l129:
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;main.c: 24: const unsigned int val = getCalCNY(i);
  2057                           
  2058                           ; BSR set to: 0
  2059  000B16  C08B  F020         	movff	calcPID@i,getCalCNY@channel
  2060  000B1A  C08C  F021         	movff	calcPID@i+1,getCalCNY@channel+1
  2061  000B1E  EC50  F007         	call	_getCalCNY	;wreg free
  2062  000B22  C020  F089         	movff	?_getCalCNY,calcPID@val
  2063  000B26  C021  F08A         	movff	?_getCalCNY+1,calcPID@val+1
  2064                           
  2065                           ;main.c: 25: s1 += val * (i + 1) * 100;
  2066  000B2A  0E01               	movlw	1
  2067  000B2C  0100               	movlb	0	; () banked
  2068  000B2E  258B               	addwf	calcPID@i& (0+255),w,b
  2069  000B30  6E1A               	movwf	___wmul@multiplier,c
  2070  000B32  0E00               	movlw	0
  2071  000B34  218C               	addwfc	(calcPID@i+1)& (0+255),w,b
  2072  000B36  6E1B               	movwf	___wmul@multiplier+1,c
  2073  000B38  C089  F01C         	movff	calcPID@val,___wmul@multiplicand
  2074  000B3C  C08A  F01D         	movff	calcPID@val+1,___wmul@multiplicand+1
  2075  000B40  ECE1  F00B         	call	___wmul	;wreg free
  2076  000B44  C01A  F07D         	movff	?___wmul,_calcPID$1248
  2077  000B48  C01B  F07E         	movff	?___wmul+1,_calcPID$1248+1
  2078                           
  2079                           ;main.c: 25: s1 += val * (i + 1) * 100;
  2080  000B4C  C07D  F01A         	movff	_calcPID$1248,___wmul@multiplier
  2081  000B50  C07E  F01B         	movff	_calcPID$1248+1,___wmul@multiplier+1
  2082  000B54  0E00               	movlw	0
  2083  000B56  6E1D               	movwf	___wmul@multiplicand+1,c
  2084  000B58  0E64               	movlw	100
  2085  000B5A  6E1C               	movwf	___wmul@multiplicand,c
  2086  000B5C  ECE1  F00B         	call	___wmul	;wreg free
  2087  000B60  501A               	movf	?___wmul,w,c
  2088  000B62  0100               	movlb	0	; () banked
  2089  000B64  2781               	addwf	calcPID@s1& (0+255),f,b
  2090  000B66  501B               	movf	?___wmul+1,w,c
  2091  000B68  2382               	addwfc	(calcPID@s1+1)& (0+255),f,b
  2092  000B6A  0E00               	movlw	0
  2093  000B6C  2383               	addwfc	(calcPID@s1+2)& (0+255),f,b
  2094  000B6E  0E00               	movlw	0
  2095  000B70  2384               	addwfc	(calcPID@s1+3)& (0+255),f,b
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;main.c: 26: s2 += val;
  2099  000B72  5189               	movf	calcPID@val& (0+255),w,b
  2100  000B74  2785               	addwf	calcPID@s2& (0+255),f,b
  2101  000B76  518A               	movf	(calcPID@val+1)& (0+255),w,b
  2102  000B78  2386               	addwfc	(calcPID@s2+1)& (0+255),f,b
  2103  000B7A  0E00               	movlw	0
  2104  000B7C  2387               	addwfc	(calcPID@s2+2)& (0+255),f,b
  2105  000B7E  0E00               	movlw	0
  2106  000B80  2388               	addwfc	(calcPID@s2+3)& (0+255),f,b
  2107                           
  2108                           ; BSR set to: 0
  2109  000B82  4B8B               	infsnz	calcPID@i& (0+255),f,b
  2110  000B84  2B8C               	incf	(calcPID@i+1)& (0+255),f,b
  2111  000B86  D7BF               	goto	l2307
  2112  000B88                     u2380:
  2113  000B88                     l2323:
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;main.c: 27: }
  2117                           ;main.c: 28: const int pos = s1 / s2;
  2118  000B88  C081  F013         	movff	calcPID@s1,___lldiv@dividend
  2119  000B8C  C082  F014         	movff	calcPID@s1+1,___lldiv@dividend+1
  2120  000B90  C083  F015         	movff	calcPID@s1+2,___lldiv@dividend+2
  2121  000B94  C084  F016         	movff	calcPID@s1+3,___lldiv@dividend+3
  2122  000B98  C085  F017         	movff	calcPID@s2,___lldiv@divisor
  2123  000B9C  C086  F018         	movff	calcPID@s2+1,___lldiv@divisor+1
  2124  000BA0  C087  F019         	movff	calcPID@s2+2,___lldiv@divisor+2
  2125  000BA4  C088  F01A         	movff	calcPID@s2+3,___lldiv@divisor+3
  2126  000BA8  EC46  F00A         	call	___lldiv	;wreg free
  2127  000BAC  C013  F07B         	movff	?___lldiv,calcPID@pos
  2128  000BB0  C014  F07C         	movff	?___lldiv+1,calcPID@pos+1
  2129                           
  2130                           ;main.c: 29: prevErr = err;
  2131  000BB4  C0A3  F0A7         	movff	calcPID@err,calcPID@prevErr
  2132  000BB8  C0A4  F0A8         	movff	calcPID@err+1,calcPID@prevErr+1
  2133                           
  2134                           ;main.c: 30: err = 300 - pos;
  2135  000BBC  C07B  F03A         	movff	calcPID@pos,??_calcPID
  2136  000BC0  C07C  F03B         	movff	calcPID@pos+1,??_calcPID+1
  2137  000BC4  1E3A               	comf	??_calcPID,f,c
  2138  000BC6  1E3B               	comf	??_calcPID+1,f,c
  2139  000BC8  4A3A               	infsnz	??_calcPID,f,c
  2140  000BCA  2A3B               	incf	??_calcPID+1,f,c
  2141  000BCC  0E2C               	movlw	44
  2142  000BCE  243A               	addwf	??_calcPID,w,c
  2143  000BD0  0100               	movlb	0	; () banked
  2144  000BD2  6FA3               	movwf	calcPID@err& (0+255),b
  2145  000BD4  0E01               	movlw	1
  2146  000BD6  203B               	addwfc	??_calcPID+1,w,c
  2147  000BD8  6FA4               	movwf	(calcPID@err+1)& (0+255),b
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;main.c: 31: integral += err;
  2151  000BDA  51A3               	movf	calcPID@err& (0+255),w,b
  2152  000BDC  27A5               	addwf	calcPID@integral& (0+255),f,b
  2153  000BDE  51A4               	movf	(calcPID@err+1)& (0+255),w,b
  2154  000BE0  23A6               	addwfc	(calcPID@integral+1)& (0+255),f,b
  2155                           
  2156                           ;main.c: 32: return ((int) (Kp * (float) err) + (Ki * (float) integral) + (Kd * (float) 
      +                          (err - prevErr)));
  2157  000BE2  C06F  F022         	movff	calcPID@Kp,___ftmul@f2
  2158  000BE6  C070  F023         	movff	calcPID@Kp+1,___ftmul@f2+1
  2159  000BEA  C071  F024         	movff	calcPID@Kp+2,___ftmul@f2+2
  2160  000BEE  C0A3  F01B         	movff	calcPID@err,___awtoft@c
  2161  000BF2  C0A4  F01C         	movff	calcPID@err+1,___awtoft@c+1
  2162  000BF6  EC7E  F00B         	call	___awtoft	;wreg free
  2163  000BFA  C01B  F01F         	movff	?___awtoft,___ftmul@f1
  2164  000BFE  C01C  F020         	movff	?___awtoft+1,___ftmul@f1+1
  2165  000C02  C01D  F021         	movff	?___awtoft+2,___ftmul@f1+2
  2166  000C06  EC7F  F008         	call	___ftmul	;wreg free
  2167  000C0A  C01F  F02E         	movff	?___ftmul,___fttol@f1
  2168  000C0E  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  2169  000C12  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  2170  000C16  EC03  F008         	call	___fttol	;wreg free
  2171  000C1A  C02E  F07F         	movff	?___fttol,_calcPID$1249
  2172  000C1E  C02F  F080         	movff	?___fttol+1,_calcPID$1249+1
  2173                           
  2174                           ;main.c: 32: return ((int) (Kp * (float) err) + (Ki * (float) integral) + (Kd * (float) 
      +                          (err - prevErr)));
  2175  000C22  C072  F022         	movff	calcPID@Ki,___ftmul@f2
  2176  000C26  C073  F023         	movff	calcPID@Ki+1,___ftmul@f2+1
  2177  000C2A  C074  F024         	movff	calcPID@Ki+2,___ftmul@f2+2
  2178  000C2E  C0A5  F01B         	movff	calcPID@integral,___awtoft@c
  2179  000C32  C0A6  F01C         	movff	calcPID@integral+1,___awtoft@c+1
  2180  000C36  EC7E  F00B         	call	___awtoft	;wreg free
  2181  000C3A  C01B  F01F         	movff	?___awtoft,___ftmul@f1
  2182  000C3E  C01C  F020         	movff	?___awtoft+1,___ftmul@f1+1
  2183  000C42  C01D  F021         	movff	?___awtoft+2,___ftmul@f1+2
  2184  000C46  EC7F  F008         	call	___ftmul	;wreg free
  2185  000C4A  C01F  F069         	movff	?___ftmul,___ftadd@f2
  2186  000C4E  C020  F06A         	movff	?___ftmul+1,___ftadd@f2+1
  2187  000C52  C021  F06B         	movff	?___ftmul+2,___ftadd@f2+2
  2188  000C56  C07F  F01B         	movff	_calcPID$1249,___awtoft@c
  2189  000C5A  C080  F01C         	movff	_calcPID$1249+1,___awtoft@c+1
  2190  000C5E  EC7E  F00B         	call	___awtoft	;wreg free
  2191  000C62  C01B  F066         	movff	?___awtoft,___ftadd@f1
  2192  000C66  C01C  F067         	movff	?___awtoft+1,___ftadd@f1+1
  2193  000C6A  C01D  F068         	movff	?___awtoft+2,___ftadd@f1+2
  2194  000C6E  EC79  F006         	call	___ftadd	;wreg free
  2195  000C72  C066  F078         	movff	?___ftadd,_calcPID$1250
  2196  000C76  C067  F079         	movff	?___ftadd+1,_calcPID$1250+1
  2197  000C7A  C068  F07A         	movff	?___ftadd+2,_calcPID$1250+2
  2198                           
  2199                           ;main.c: 32: return ((int) (Kp * (float) err) + (Ki * (float) integral) + (Kd * (float) 
      +                          (err - prevErr)));
  2200  000C7E  C075  F022         	movff	calcPID@Kd,___ftmul@f2
  2201  000C82  C076  F023         	movff	calcPID@Kd+1,___ftmul@f2+1
  2202  000C86  C077  F024         	movff	calcPID@Kd+2,___ftmul@f2+2
  2203  000C8A  C0A7  F03A         	movff	calcPID@prevErr,??_calcPID
  2204  000C8E  C0A8  F03B         	movff	calcPID@prevErr+1,??_calcPID+1
  2205  000C92  1E3A               	comf	??_calcPID,f,c
  2206  000C94  1E3B               	comf	??_calcPID+1,f,c
  2207  000C96  4A3A               	infsnz	??_calcPID,f,c
  2208  000C98  2A3B               	incf	??_calcPID+1,f,c
  2209  000C9A  0100               	movlb	0	; () banked
  2210  000C9C  51A3               	movf	calcPID@err& (0+255),w,b
  2211  000C9E  243A               	addwf	??_calcPID,w,c
  2212  000CA0  6E1B               	movwf	___awtoft@c,c
  2213  000CA2  51A4               	movf	(calcPID@err+1)& (0+255),w,b
  2214  000CA4  203B               	addwfc	??_calcPID+1,w,c
  2215  000CA6  6E1C               	movwf	___awtoft@c+1,c
  2216  000CA8  EC7E  F00B         	call	___awtoft	;wreg free
  2217  000CAC  C01B  F01F         	movff	?___awtoft,___ftmul@f1
  2218  000CB0  C01C  F020         	movff	?___awtoft+1,___ftmul@f1+1
  2219  000CB4  C01D  F021         	movff	?___awtoft+2,___ftmul@f1+2
  2220  000CB8  EC7F  F008         	call	___ftmul	;wreg free
  2221  000CBC  C01F  F069         	movff	?___ftmul,___ftadd@f2
  2222  000CC0  C020  F06A         	movff	?___ftmul+1,___ftadd@f2+1
  2223  000CC4  C021  F06B         	movff	?___ftmul+2,___ftadd@f2+2
  2224  000CC8  C078  F066         	movff	_calcPID$1250,___ftadd@f1
  2225  000CCC  C079  F067         	movff	_calcPID$1250+1,___ftadd@f1+1
  2226  000CD0  C07A  F068         	movff	_calcPID$1250+2,___ftadd@f1+2
  2227  000CD4  EC79  F006         	call	___ftadd	;wreg free
  2228  000CD8  C066  F02E         	movff	?___ftadd,___fttol@f1
  2229  000CDC  C067  F02F         	movff	?___ftadd+1,___fttol@f1+1
  2230  000CE0  C068  F030         	movff	?___ftadd+2,___fttol@f1+2
  2231  000CE4  EC03  F008         	call	___fttol	;wreg free
  2232  000CE8  C02E  F06F         	movff	?___fttol,?_calcPID
  2233  000CEC  C02F  F070         	movff	?___fttol+1,?_calcPID+1
  2234  000CF0  0012               	return	
  2235  000CF2                     __end_of_calcPID:
  2236                           	opt stack 0
  2237                           tblptru	equ	0xFF8
  2238                           tblptrh	equ	0xFF7
  2239                           tblptrl	equ	0xFF6
  2240                           tablat	equ	0xFF5
  2241                           postinc0	equ	0xFEE
  2242                           wreg	equ	0xFE8
  2243                           postinc2	equ	0xFDE
  2244                           postdec2	equ	0xFDD
  2245                           fsr2h	equ	0xFDA
  2246                           fsr2l	equ	0xFD9
  2247                           status	equ	0xFD8
  2248                           
  2249 ;; *************** function _getCalCNY *****************
  2250 ;; Defined at:
  2251 ;;		line 24 in file "calibration.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;  channel         2   31[COMRAM] unsigned int 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  val             2   43[COMRAM] unsigned int 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  2   31[COMRAM] unsigned int 
  2258 ;; Registers used:
  2259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2265 ;;      Params:         2       0       0       0       0       0       0       0       0
  2266 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2267 ;;      Temps:          6       0       0       0       0       0       0       0       0
  2268 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2269 ;;Total ram usage:       14 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    3
  2272 ;; This function calls:
  2273 ;;		___lwdiv
  2274 ;;		___wmul
  2275 ;;		_getCNY
  2276 ;; This function is called by:
  2277 ;;		_calcPID
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text13
  2282  000EA0                     __ptext13:
  2283                           	opt stack 0
  2284  000EA0                     _getCalCNY:
  2285                           	opt stack 25
  2286                           
  2287                           ;calibration.c: 25: unsigned int val = getCNY(channel);
  2288                           
  2289                           ;incstack = 0
  2290  000EA0  5020               	movf	getCalCNY@channel,w,c
  2291  000EA2  ECFF  F00A         	call	_getCNY
  2292  000EA6  C013  F02C         	movff	?_getCNY,getCalCNY@val
  2293  000EAA  C014  F02D         	movff	?_getCNY+1,getCalCNY@val+1
  2294                           
  2295                           ;calibration.c: 26: mins[channel] = ((val) < (mins[channel]) ? (val) : (mins[channel]));
  2296  000EAE  90D8               	bcf	status,0,c
  2297  000EB0  3420               	rlcf	getCalCNY@channel,w,c
  2298  000EB2  6ED9               	movwf	fsr2l,c
  2299  000EB4  3421               	rlcf	getCalCNY@channel+1,w,c
  2300  000EB6  6EDA               	movwf	fsr2h,c
  2301  000EB8  0E3C               	movlw	low _mins
  2302  000EBA  26D9               	addwf	fsr2l,f,c
  2303  000EBC  0E00               	movlw	high _mins
  2304  000EBE  22DA               	addwfc	fsr2h,f,c
  2305  000EC0  50DE               	movf	postinc2,w,c
  2306  000EC2  5C2C               	subwf	getCalCNY@val,w,c
  2307  000EC4  50DE               	movf	postinc2,w,c
  2308  000EC6  582D               	subwfb	getCalCNY@val+1,w,c
  2309  000EC8  A0D8               	btfss	status,0,c
  2310  000ECA  D00E               	goto	l250
  2311  000ECC  90D8               	bcf	status,0,c
  2312  000ECE  3420               	rlcf	getCalCNY@channel,w,c
  2313  000ED0  6ED9               	movwf	fsr2l,c
  2314  000ED2  3421               	rlcf	getCalCNY@channel+1,w,c
  2315  000ED4  6EDA               	movwf	fsr2h,c
  2316  000ED6  0E3C               	movlw	low _mins
  2317  000ED8  26D9               	addwf	fsr2l,f,c
  2318  000EDA  0E00               	movlw	high _mins
  2319  000EDC  22DA               	addwfc	fsr2h,f,c
  2320  000EDE  CFDE F028          	movff	postinc2,_getCalCNY$677
  2321  000EE2  CFDD F029          	movff	postdec2,_getCalCNY$677+1
  2322  000EE6  D004               	goto	l252
  2323  000EE8                     l250:
  2324  000EE8  C02C  F028         	movff	getCalCNY@val,_getCalCNY$677
  2325  000EEC  C02D  F029         	movff	getCalCNY@val+1,_getCalCNY$677+1
  2326  000EF0                     l252:
  2327  000EF0  90D8               	bcf	status,0,c
  2328  000EF2  3420               	rlcf	getCalCNY@channel,w,c
  2329  000EF4  6ED9               	movwf	fsr2l,c
  2330  000EF6  3421               	rlcf	getCalCNY@channel+1,w,c
  2331  000EF8  6EDA               	movwf	fsr2h,c
  2332  000EFA  0E3C               	movlw	low _mins
  2333  000EFC  26D9               	addwf	fsr2l,f,c
  2334  000EFE  0E00               	movlw	high _mins
  2335  000F00  22DA               	addwfc	fsr2h,f,c
  2336  000F02  C028  FFDE         	movff	_getCalCNY$677,postinc2
  2337  000F06  C029  FFDD         	movff	_getCalCNY$677+1,postdec2
  2338                           
  2339                           ;calibration.c: 27: maxs[channel] = ((val) > (maxs[channel]) ? (val) : (maxs[channel]));
  2340  000F0A  90D8               	bcf	status,0,c
  2341  000F0C  3420               	rlcf	getCalCNY@channel,w,c
  2342  000F0E  6ED9               	movwf	fsr2l,c
  2343  000F10  3421               	rlcf	getCalCNY@channel+1,w,c
  2344  000F12  6EDA               	movwf	fsr2h,c
  2345  000F14  0E99               	movlw	low _maxs
  2346  000F16  26D9               	addwf	fsr2l,f,c
  2347  000F18  0E00               	movlw	high _maxs
  2348  000F1A  22DA               	addwfc	fsr2h,f,c
  2349  000F1C  502C               	movf	getCalCNY@val,w,c
  2350  000F1E  5CDE               	subwf	postinc2,w,c
  2351  000F20  502D               	movf	getCalCNY@val+1,w,c
  2352  000F22  58DE               	subwfb	postinc2,w,c
  2353  000F24  A0D8               	btfss	status,0,c
  2354  000F26  D00E               	goto	l254
  2355  000F28  90D8               	bcf	status,0,c
  2356  000F2A  3420               	rlcf	getCalCNY@channel,w,c
  2357  000F2C  6ED9               	movwf	fsr2l,c
  2358  000F2E  3421               	rlcf	getCalCNY@channel+1,w,c
  2359  000F30  6EDA               	movwf	fsr2h,c
  2360  000F32  0E99               	movlw	low _maxs
  2361  000F34  26D9               	addwf	fsr2l,f,c
  2362  000F36  0E00               	movlw	high _maxs
  2363  000F38  22DA               	addwfc	fsr2h,f,c
  2364  000F3A  CFDE F02A          	movff	postinc2,_getCalCNY$678
  2365  000F3E  CFDD F02B          	movff	postdec2,_getCalCNY$678+1
  2366  000F42  D004               	goto	l256
  2367  000F44                     l254:
  2368  000F44  C02C  F02A         	movff	getCalCNY@val,_getCalCNY$678
  2369  000F48  C02D  F02B         	movff	getCalCNY@val+1,_getCalCNY$678+1
  2370  000F4C                     l256:
  2371  000F4C  90D8               	bcf	status,0,c
  2372  000F4E  3420               	rlcf	getCalCNY@channel,w,c
  2373  000F50  6ED9               	movwf	fsr2l,c
  2374  000F52  3421               	rlcf	getCalCNY@channel+1,w,c
  2375  000F54  6EDA               	movwf	fsr2h,c
  2376  000F56  0E99               	movlw	low _maxs
  2377  000F58  26D9               	addwf	fsr2l,f,c
  2378  000F5A  0E00               	movlw	high _maxs
  2379  000F5C  22DA               	addwfc	fsr2h,f,c
  2380  000F5E  C02A  FFDE         	movff	_getCalCNY$678,postinc2
  2381  000F62  C02B  FFDD         	movff	_getCalCNY$678+1,postdec2
  2382                           
  2383                           ;calibration.c: 28: val = (0 + ((1000 - 0) / (maxs[channel] - mins[channel])) * (val - m
      +                          ins[channel]));
  2384  000F66  90D8               	bcf	status,0,c
  2385  000F68  3420               	rlcf	getCalCNY@channel,w,c
  2386  000F6A  6ED9               	movwf	fsr2l,c
  2387  000F6C  3421               	rlcf	getCalCNY@channel+1,w,c
  2388  000F6E  6EDA               	movwf	fsr2h,c
  2389  000F70  0E3C               	movlw	low _mins
  2390  000F72  26D9               	addwf	fsr2l,f,c
  2391  000F74  0E00               	movlw	high _mins
  2392  000F76  22DA               	addwfc	fsr2h,f,c
  2393  000F78  CFDE F022          	movff	postinc2,??_getCalCNY
  2394  000F7C  CFDD F023          	movff	postdec2,??_getCalCNY+1
  2395  000F80  1E22               	comf	??_getCalCNY,f,c
  2396  000F82  1E23               	comf	??_getCalCNY+1,f,c
  2397  000F84  4A22               	infsnz	??_getCalCNY,f,c
  2398  000F86  2A23               	incf	??_getCalCNY+1,f,c
  2399  000F88  502C               	movf	getCalCNY@val,w,c
  2400  000F8A  2422               	addwf	??_getCalCNY,w,c
  2401  000F8C  6E1A               	movwf	___wmul@multiplier,c
  2402  000F8E  502D               	movf	getCalCNY@val+1,w,c
  2403  000F90  2023               	addwfc	??_getCalCNY+1,w,c
  2404  000F92  6E1B               	movwf	___wmul@multiplier+1,c
  2405  000F94  90D8               	bcf	status,0,c
  2406  000F96  3420               	rlcf	getCalCNY@channel,w,c
  2407  000F98  6ED9               	movwf	fsr2l,c
  2408  000F9A  3421               	rlcf	getCalCNY@channel+1,w,c
  2409  000F9C  6EDA               	movwf	fsr2h,c
  2410  000F9E  0E99               	movlw	low _maxs
  2411  000FA0  26D9               	addwf	fsr2l,f,c
  2412  000FA2  0E00               	movlw	high _maxs
  2413  000FA4  22DA               	addwfc	fsr2h,f,c
  2414  000FA6  CFDE F024          	movff	postinc2,??_getCalCNY+2
  2415  000FAA  CFDD F025          	movff	postdec2,??_getCalCNY+3
  2416  000FAE  90D8               	bcf	status,0,c
  2417  000FB0  3420               	rlcf	getCalCNY@channel,w,c
  2418  000FB2  6ED9               	movwf	fsr2l,c
  2419  000FB4  3421               	rlcf	getCalCNY@channel+1,w,c
  2420  000FB6  6EDA               	movwf	fsr2h,c
  2421  000FB8  0E3C               	movlw	low _mins
  2422  000FBA  26D9               	addwf	fsr2l,f,c
  2423  000FBC  0E00               	movlw	high _mins
  2424  000FBE  22DA               	addwfc	fsr2h,f,c
  2425  000FC0  CFDE F026          	movff	postinc2,??_getCalCNY+4
  2426  000FC4  CFDD F027          	movff	postdec2,??_getCalCNY+5
  2427  000FC8  1E26               	comf	??_getCalCNY+4,f,c
  2428  000FCA  1E27               	comf	??_getCalCNY+5,f,c
  2429  000FCC  4A26               	infsnz	??_getCalCNY+4,f,c
  2430  000FCE  2A27               	incf	??_getCalCNY+5,f,c
  2431  000FD0  5024               	movf	??_getCalCNY+2,w,c
  2432  000FD2  2426               	addwf	??_getCalCNY+4,w,c
  2433  000FD4  6E15               	movwf	___lwdiv@divisor,c
  2434  000FD6  5025               	movf	??_getCalCNY+3,w,c
  2435  000FD8  2027               	addwfc	??_getCalCNY+5,w,c
  2436  000FDA  6E16               	movwf	___lwdiv@divisor+1,c
  2437  000FDC  0E03               	movlw	3
  2438  000FDE  6E14               	movwf	___lwdiv@dividend+1,c
  2439  000FE0  0EE8               	movlw	232
  2440  000FE2  6E13               	movwf	___lwdiv@dividend,c
  2441  000FE4  EC55  F00B         	call	___lwdiv	;wreg free
  2442  000FE8  C013  F01C         	movff	?___lwdiv,___wmul@multiplicand
  2443  000FEC  C014  F01D         	movff	?___lwdiv+1,___wmul@multiplicand+1
  2444  000FF0  ECE1  F00B         	call	___wmul	;wreg free
  2445  000FF4  C01A  F02C         	movff	?___wmul,getCalCNY@val
  2446  000FF8  C01B  F02D         	movff	?___wmul+1,getCalCNY@val+1
  2447                           
  2448                           ;calibration.c: 29: return val;
  2449  000FFC  C02C  F020         	movff	getCalCNY@val,?_getCalCNY
  2450  001000  C02D  F021         	movff	getCalCNY@val+1,?_getCalCNY+1
  2451  001004  0012               	return	
  2452  001006                     __end_of_getCalCNY:
  2453                           	opt stack 0
  2454                           tblptru	equ	0xFF8
  2455                           tblptrh	equ	0xFF7
  2456                           tblptrl	equ	0xFF6
  2457                           tablat	equ	0xFF5
  2458                           postinc0	equ	0xFEE
  2459                           wreg	equ	0xFE8
  2460                           postinc2	equ	0xFDE
  2461                           postdec2	equ	0xFDD
  2462                           fsr2h	equ	0xFDA
  2463                           fsr2l	equ	0xFD9
  2464                           status	equ	0xFD8
  2465                           
  2466 ;; *************** function _getCNY *****************
  2467 ;; Defined at:
  2468 ;;		line 56 in file "CNY.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;  channel         1    wreg     unsigned char 
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;  channel         1   22[COMRAM] unsigned char 
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  2   18[COMRAM] unsigned int 
  2475 ;; Registers used:
  2476 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2482 ;;      Params:         2       0       0       0       0       0       0       0       0
  2483 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2484 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2485 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2486 ;;Total ram usage:        5 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    2
  2489 ;; This function calls:
  2490 ;;		Nothing
  2491 ;; This function is called by:
  2492 ;;		_calibrateCNY
  2493 ;;		_getCalCNY
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           	psect	text14
  2498  0015FE                     __ptext14:
  2499                           	opt stack 0
  2500  0015FE                     _getCNY:
  2501                           	opt stack 26
  2502                           
  2503                           ;incstack = 0
  2504                           ;getCNY@channel stored from wreg
  2505  0015FE  6E17               	movwf	getCNY@channel,c
  2506                           
  2507                           ;CNY.c: 57: if(channel >= 5) return 0;
  2508  001600  0E04               	movlw	4
  2509  001602  6417               	cpfsgt	getCNY@channel,c
  2510  001604  D005               	goto	l23
  2511  001606  0E00               	movlw	0
  2512  001608  6E14               	movwf	?_getCNY+1,c
  2513  00160A  0E00               	movlw	0
  2514  00160C  6E13               	movwf	?_getCNY,c
  2515  00160E  0012               	return	
  2516  001610                     l23:
  2517                           
  2518                           ;CNY.c: 58: ADCON0bits.CHS = channels[channel];
  2519  001610  5017               	movf	getCNY@channel,w,c
  2520  001612  0D01               	mullw	1
  2521  001614  0E01               	movlw	low _channels
  2522  001616  24F3               	addwf	prodl,w,c
  2523  001618  6EF6               	movwf	tblptrl,c
  2524  00161A  0E08               	movlw	high _channels
  2525  00161C  20F4               	addwfc	prodh,w,c
  2526  00161E  6EF7               	movwf	tblptrh,c
  2527  001620                     	if	0	;There are less than 3 active tblptr bytes
  2528  001620                     	endif
  2529  001620  0008               	tblrd		*
  2530  001622  CFF5 F015          	movff	tablat,??_getCNY
  2531  001626  4615               	rlncf	??_getCNY,f,c
  2532  001628  4615               	rlncf	??_getCNY,f,c
  2533  00162A  50C2               	movf	4034,w,c	;volatile
  2534  00162C  1815               	xorwf	??_getCNY,w,c
  2535  00162E  0BC3               	andlw	-61
  2536  001630  1815               	xorwf	??_getCNY,w,c
  2537  001632  6EC2               	movwf	4034,c	;volatile
  2538                           
  2539                           ;CNY.c: 59: ADCON0bits.ADON = 1;
  2540  001634  80C2               	bsf	4034,0,c	;volatile
  2541                           
  2542                           ;CNY.c: 60: ADCON0bits.GO = 1;
  2543  001636  82C2               	bsf	4034,1,c	;volatile
  2544  001638  B2C2               	btfsc	4034,1,c	;volatile
  2545  00163A  D7FE               	goto	l26
  2546                           
  2547                           ;CNY.c: 62: ADCON0bits.ADON = 0;
  2548  00163C  90C2               	bcf	4034,0,c	;volatile
  2549                           
  2550                           ;CNY.c: 63: return (unsigned int)((ADRESH << 8) | ADRESL);
  2551  00163E  50C3               	movf	4035,w,c	;volatile
  2552  001640  CFC4 F015          	movff	4036,??_getCNY	;volatile
  2553  001644  6A16               	clrf	(??_getCNY+1)& (0+255),c
  2554  001646  C015  F016         	movff	??_getCNY,??_getCNY+1
  2555  00164A  6A15               	clrf	??_getCNY,c
  2556  00164C  1015               	iorwf	??_getCNY,w,c
  2557  00164E  6E13               	movwf	?_getCNY,c
  2558  001650  5016               	movf	??_getCNY+1,w,c
  2559  001652  6E14               	movwf	?_getCNY+1,c
  2560  001654  0012               	return	
  2561  001656                     __end_of_getCNY:
  2562                           	opt stack 0
  2563                           tblptru	equ	0xFF8
  2564                           tblptrh	equ	0xFF7
  2565                           tblptrl	equ	0xFF6
  2566                           tablat	equ	0xFF5
  2567                           prodh	equ	0xFF4
  2568                           prodl	equ	0xFF3
  2569                           postinc0	equ	0xFEE
  2570                           wreg	equ	0xFE8
  2571                           postinc2	equ	0xFDE
  2572                           postdec2	equ	0xFDD
  2573                           fsr2h	equ	0xFDA
  2574                           fsr2l	equ	0xFD9
  2575                           status	equ	0xFD8
  2576                           
  2577 ;; *************** function ___wmul *****************
  2578 ;; Defined at:
  2579 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;  multiplier      2   25[COMRAM] unsigned int 
  2582 ;;  multiplicand    2   27[COMRAM] unsigned int 
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;  product         2   29[COMRAM] unsigned int 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  2   25[COMRAM] unsigned int 
  2587 ;; Registers used:
  2588 ;;		wreg, status,2, status,0, prodl, prodh
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2594 ;;      Params:         4       0       0       0       0       0       0       0       0
  2595 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2596 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2597 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2598 ;;Total ram usage:        6 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    2
  2601 ;; This function calls:
  2602 ;;		Nothing
  2603 ;; This function is called by:
  2604 ;;		_calcPID
  2605 ;;		_getCalCNY
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text15
  2610  0017C2                     __ptext15:
  2611                           	opt stack 0
  2612  0017C2                     ___wmul:
  2613                           	opt stack 25
  2614                           
  2615                           ;incstack = 0
  2616  0017C2  501A               	movf	___wmul@multiplier,w,c
  2617  0017C4  021C               	mulwf	___wmul@multiplicand,c
  2618  0017C6  CFF3 F01E          	movff	prodl,___wmul@product
  2619  0017CA  CFF4 F01F          	movff	prodh,___wmul@product+1
  2620  0017CE  501A               	movf	___wmul@multiplier,w,c
  2621  0017D0  021D               	mulwf	___wmul@multiplicand+1,c
  2622  0017D2  50F3               	movf	prodl,w,c
  2623  0017D4  261F               	addwf	___wmul@product+1,f,c
  2624  0017D6  501B               	movf	___wmul@multiplier+1,w,c
  2625  0017D8  021C               	mulwf	___wmul@multiplicand,c
  2626  0017DA  50F3               	movf	prodl,w,c
  2627  0017DC  261F               	addwf	___wmul@product+1,f,c
  2628  0017DE  C01E  F01A         	movff	___wmul@product,?___wmul
  2629  0017E2  C01F  F01B         	movff	___wmul@product+1,?___wmul+1
  2630  0017E6  0012               	return	
  2631  0017E8                     __end_of___wmul:
  2632                           	opt stack 0
  2633                           tblptru	equ	0xFF8
  2634                           tblptrh	equ	0xFF7
  2635                           tblptrl	equ	0xFF6
  2636                           tablat	equ	0xFF5
  2637                           prodh	equ	0xFF4
  2638                           prodl	equ	0xFF3
  2639                           postinc0	equ	0xFEE
  2640                           wreg	equ	0xFE8
  2641                           postinc2	equ	0xFDE
  2642                           postdec2	equ	0xFDD
  2643                           fsr2h	equ	0xFDA
  2644                           fsr2l	equ	0xFD9
  2645                           status	equ	0xFD8
  2646                           
  2647 ;; *************** function ___lwdiv *****************
  2648 ;; Defined at:
  2649 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  dividend        2   18[COMRAM] unsigned int 
  2652 ;;  divisor         2   20[COMRAM] unsigned int 
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;  quotient        2   22[COMRAM] unsigned int 
  2655 ;;  counter         1   24[COMRAM] unsigned char 
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  2   18[COMRAM] unsigned int 
  2658 ;; Registers used:
  2659 ;;		wreg, status,2, status,0
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2665 ;;      Params:         4       0       0       0       0       0       0       0       0
  2666 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2667 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2668 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2669 ;;Total ram usage:        7 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; Hardware stack levels required when called:    2
  2672 ;; This function calls:
  2673 ;;		Nothing
  2674 ;; This function is called by:
  2675 ;;		_getCalCNY
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text16
  2680  0016AA                     __ptext16:
  2681                           	opt stack 0
  2682  0016AA                     ___lwdiv:
  2683                           	opt stack 25
  2684                           
  2685                           ;incstack = 0
  2686  0016AA  0E00               	movlw	0
  2687  0016AC  6E18               	movwf	___lwdiv@quotient+1,c
  2688  0016AE  0E00               	movlw	0
  2689  0016B0  6E17               	movwf	___lwdiv@quotient,c
  2690  0016B2  5015               	movf	___lwdiv@divisor,w,c
  2691  0016B4  1016               	iorwf	___lwdiv@divisor+1,w,c
  2692  0016B6  B4D8               	btfsc	status,2,c
  2693  0016B8  D01C               	goto	l666
  2694  0016BA  0E01               	movlw	1
  2695  0016BC  6E19               	movwf	___lwdiv@counter,c
  2696  0016BE  D004               	goto	l661
  2697  0016C0  90D8               	bcf	status,0,c
  2698  0016C2  3615               	rlcf	___lwdiv@divisor,f,c
  2699  0016C4  3616               	rlcf	___lwdiv@divisor+1,f,c
  2700  0016C6  2A19               	incf	___lwdiv@counter,f,c
  2701  0016C8                     l661:
  2702  0016C8  AE16               	btfss	___lwdiv@divisor+1,7,c
  2703  0016CA  D7FA               	goto	l662
  2704  0016CC                     u1090:
  2705  0016CC  90D8               	bcf	status,0,c
  2706  0016CE  3617               	rlcf	___lwdiv@quotient,f,c
  2707  0016D0  3618               	rlcf	___lwdiv@quotient+1,f,c
  2708  0016D2  5015               	movf	___lwdiv@divisor,w,c
  2709  0016D4  5C13               	subwf	___lwdiv@dividend,w,c
  2710  0016D6  5016               	movf	___lwdiv@divisor+1,w,c
  2711  0016D8  5814               	subwfb	___lwdiv@dividend+1,w,c
  2712  0016DA  A0D8               	btfss	status,0,c
  2713  0016DC  D005               	goto	l665
  2714  0016DE  5015               	movf	___lwdiv@divisor,w,c
  2715  0016E0  5E13               	subwf	___lwdiv@dividend,f,c
  2716  0016E2  5016               	movf	___lwdiv@divisor+1,w,c
  2717  0016E4  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2718  0016E6  8017               	bsf	___lwdiv@quotient,0,c
  2719  0016E8                     l665:
  2720  0016E8  90D8               	bcf	status,0,c
  2721  0016EA  3216               	rrcf	___lwdiv@divisor+1,f,c
  2722  0016EC  3215               	rrcf	___lwdiv@divisor,f,c
  2723  0016EE  2E19               	decfsz	___lwdiv@counter,f,c
  2724  0016F0  D7ED               	goto	u1090
  2725  0016F2                     l666:
  2726  0016F2  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2727  0016F6  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2728  0016FA  0012               	return		;funcret
  2729  0016FC                     __end_of___lwdiv:
  2730                           	opt stack 0
  2731                           tblptru	equ	0xFF8
  2732                           tblptrh	equ	0xFF7
  2733                           tblptrl	equ	0xFF6
  2734                           tablat	equ	0xFF5
  2735                           prodh	equ	0xFF4
  2736                           prodl	equ	0xFF3
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           postinc2	equ	0xFDE
  2740                           postdec2	equ	0xFDD
  2741                           fsr2h	equ	0xFDA
  2742                           fsr2l	equ	0xFD9
  2743                           status	equ	0xFD8
  2744                           
  2745 ;; *************** function ___lldiv *****************
  2746 ;; Defined at:
  2747 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  dividend        4   18[COMRAM] unsigned long 
  2750 ;;  divisor         4   22[COMRAM] unsigned long 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  quotient        4   26[COMRAM] unsigned long 
  2753 ;;  counter         1   30[COMRAM] unsigned char 
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  4   18[COMRAM] unsigned long 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2763 ;;      Params:         8       0       0       0       0       0       0       0       0
  2764 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2766 ;;      Totals:        13       0       0       0       0       0       0       0       0
  2767 ;;Total ram usage:       13 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    2
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_calcPID
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text17
  2778  00148C                     __ptext17:
  2779                           	opt stack 0
  2780  00148C                     ___lldiv:
  2781                           	opt stack 26
  2782                           
  2783                           ;incstack = 0
  2784  00148C  0E00               	movlw	0
  2785  00148E  6E1B               	movwf	___lldiv@quotient,c
  2786  001490  0E00               	movlw	0
  2787  001492  6E1C               	movwf	___lldiv@quotient+1,c
  2788  001494  0E00               	movlw	0
  2789  001496  6E1D               	movwf	___lldiv@quotient+2,c
  2790  001498  0E00               	movlw	0
  2791  00149A  6E1E               	movwf	___lldiv@quotient+3,c
  2792  00149C  5017               	movf	___lldiv@divisor,w,c
  2793  00149E  1018               	iorwf	___lldiv@divisor+1,w,c
  2794  0014A0  1019               	iorwf	___lldiv@divisor+2,w,c
  2795  0014A2  101A               	iorwf	___lldiv@divisor+3,w,c
  2796  0014A4  B4D8               	btfsc	status,2,c
  2797  0014A6  D02A               	goto	l613
  2798  0014A8  0E01               	movlw	1
  2799  0014AA  6E1F               	movwf	___lldiv@counter,c
  2800  0014AC  D006               	goto	l608
  2801  0014AE  90D8               	bcf	status,0,c
  2802  0014B0  3617               	rlcf	___lldiv@divisor,f,c
  2803  0014B2  3618               	rlcf	___lldiv@divisor+1,f,c
  2804  0014B4  3619               	rlcf	___lldiv@divisor+2,f,c
  2805  0014B6  361A               	rlcf	___lldiv@divisor+3,f,c
  2806  0014B8  2A1F               	incf	___lldiv@counter,f,c
  2807  0014BA                     l608:
  2808  0014BA  AE1A               	btfss	___lldiv@divisor+3,7,c
  2809  0014BC  D7F8               	goto	l609
  2810  0014BE                     u1630:
  2811  0014BE  90D8               	bcf	status,0,c
  2812  0014C0  361B               	rlcf	___lldiv@quotient,f,c
  2813  0014C2  361C               	rlcf	___lldiv@quotient+1,f,c
  2814  0014C4  361D               	rlcf	___lldiv@quotient+2,f,c
  2815  0014C6  361E               	rlcf	___lldiv@quotient+3,f,c
  2816  0014C8  5017               	movf	___lldiv@divisor,w,c
  2817  0014CA  5C13               	subwf	___lldiv@dividend,w,c
  2818  0014CC  5018               	movf	___lldiv@divisor+1,w,c
  2819  0014CE  5814               	subwfb	___lldiv@dividend+1,w,c
  2820  0014D0  5019               	movf	___lldiv@divisor+2,w,c
  2821  0014D2  5815               	subwfb	___lldiv@dividend+2,w,c
  2822  0014D4  501A               	movf	___lldiv@divisor+3,w,c
  2823  0014D6  5816               	subwfb	___lldiv@dividend+3,w,c
  2824  0014D8  A0D8               	btfss	status,0,c
  2825  0014DA  D009               	goto	l612
  2826  0014DC  5017               	movf	___lldiv@divisor,w,c
  2827  0014DE  5E13               	subwf	___lldiv@dividend,f,c
  2828  0014E0  5018               	movf	___lldiv@divisor+1,w,c
  2829  0014E2  5A14               	subwfb	___lldiv@dividend+1,f,c
  2830  0014E4  5019               	movf	___lldiv@divisor+2,w,c
  2831  0014E6  5A15               	subwfb	___lldiv@dividend+2,f,c
  2832  0014E8  501A               	movf	___lldiv@divisor+3,w,c
  2833  0014EA  5A16               	subwfb	___lldiv@dividend+3,f,c
  2834  0014EC  801B               	bsf	___lldiv@quotient,0,c
  2835  0014EE                     l612:
  2836  0014EE  90D8               	bcf	status,0,c
  2837  0014F0  321A               	rrcf	___lldiv@divisor+3,f,c
  2838  0014F2  3219               	rrcf	___lldiv@divisor+2,f,c
  2839  0014F4  3218               	rrcf	___lldiv@divisor+1,f,c
  2840  0014F6  3217               	rrcf	___lldiv@divisor,f,c
  2841  0014F8  2E1F               	decfsz	___lldiv@counter,f,c
  2842  0014FA  D7E1               	goto	u1630
  2843  0014FC                     l613:
  2844  0014FC  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  2845  001500  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  2846  001504  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  2847  001508  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  2848  00150C  0012               	return		;funcret
  2849  00150E                     __end_of___lldiv:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           prodh	equ	0xFF4
  2856                           prodl	equ	0xFF3
  2857                           postinc0	equ	0xFEE
  2858                           wreg	equ	0xFE8
  2859                           postinc2	equ	0xFDE
  2860                           postdec2	equ	0xFDD
  2861                           fsr2h	equ	0xFDA
  2862                           fsr2l	equ	0xFD9
  2863                           status	equ	0xFD8
  2864                           
  2865 ;; *************** function ___fttol *****************
  2866 ;; Defined at:
  2867 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  f1              3   45[COMRAM] float 
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;  lval            4    1[BANK0 ] unsigned long 
  2872 ;;  exp1            1    5[BANK0 ] unsigned char 
  2873 ;;  sign1           1    0[BANK0 ] unsigned char 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  4   45[COMRAM] long 
  2876 ;; Registers used:
  2877 ;;		wreg, status,2, status,0
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2883 ;;      Params:         4       0       0       0       0       0       0       0       0
  2884 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2885 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2886 ;;      Totals:         9       6       0       0       0       0       0       0       0
  2887 ;;Total ram usage:       15 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    2
  2890 ;; This function calls:
  2891 ;;		Nothing
  2892 ;; This function is called by:
  2893 ;;		_calcPID
  2894 ;; This function uses a non-reentrant model
  2895 ;;
  2896                           
  2897                           	psect	text18
  2898  001006                     __ptext18:
  2899                           	opt stack 0
  2900  001006                     ___fttol:
  2901                           	opt stack 26
  2902                           
  2903                           ;incstack = 0
  2904  001006  C030  F032         	movff	___fttol@f1+2,??___fttol
  2905  00100A  6A33               	clrf	(??___fttol+1)& (0+255),c
  2906  00100C  6A34               	clrf	(??___fttol+2)& (0+255),c
  2907  00100E  342F               	rlcf	___fttol@f1+1,w,c
  2908  001010  3632               	rlcf	??___fttol& (0+255),f,c
  2909  001012  E301               	bnc	u2291
  2910  001014  8033               	bsf	(??___fttol+1)& (0+255),0,c
  2911  001016                     u2291:
  2912  001016  5032               	movf	??___fttol,w,c
  2913  001018  0100               	movlb	0	; () banked
  2914  00101A  6F65               	movwf	___fttol@exp1& (0+255),b
  2915  00101C  5165               	movf	___fttol@exp1& (0+255),w,b
  2916  00101E  A4D8               	btfss	status,2,c
  2917  001020  D009               	goto	l572
  2918                           
  2919                           ; BSR set to: 0
  2920  001022  0E00               	movlw	0
  2921  001024  6E2E               	movwf	?___fttol,c
  2922  001026  0E00               	movlw	0
  2923  001028  6E2F               	movwf	?___fttol+1,c
  2924  00102A  0E00               	movlw	0
  2925  00102C  6E30               	movwf	?___fttol+2,c
  2926  00102E  0E00               	movlw	0
  2927  001030  6E31               	movwf	?___fttol+3,c
  2928                           
  2929                           ; BSR set to: 0
  2930  001032  0012               	return	
  2931  001034                     l572:
  2932                           
  2933                           ; BSR set to: 0
  2934                           
  2935                           ; BSR set to: 0
  2936  001034  0E17               	movlw	23
  2937  001036  6E32               	movwf	??___fttol& (0+255),c
  2938  001038  C02E  F033         	movff	___fttol@f1,??___fttol+1
  2939  00103C  C02F  F034         	movff	___fttol@f1+1,??___fttol+2
  2940  001040  C030  F035         	movff	___fttol@f1+2,??___fttol+3
  2941  001044  2832               	incf	??___fttol,w,c
  2942  001046  6E36               	movwf	(??___fttol+4)& (0+255),c
  2943  001048  D004               	goto	u2310
  2944  00104A                     u2315:
  2945  00104A  90D8               	bcf	status,0,c
  2946  00104C  3235               	rrcf	??___fttol+3,f,c
  2947  00104E  3234               	rrcf	??___fttol+2,f,c
  2948  001050  3233               	rrcf	??___fttol+1,f,c
  2949  001052                     u2310:
  2950  001052  2E36               	decfsz	(??___fttol+4)& (0+255),f,c
  2951  001054  D7FA               	goto	u2315
  2952  001056  5033               	movf	??___fttol+1,w,c
  2953  001058  0100               	movlb	0	; () banked
  2954  00105A  6F60               	movwf	___fttol@sign1& (0+255),b
  2955                           
  2956                           ; BSR set to: 0
  2957  00105C  8E2F               	bsf	___fttol@f1+1,7,c
  2958                           
  2959                           ; BSR set to: 0
  2960  00105E  0EFF               	movlw	255
  2961  001060  162E               	andwf	___fttol@f1,f,c
  2962  001062  0EFF               	movlw	255
  2963  001064  162F               	andwf	___fttol@f1+1,f,c
  2964  001066  0E00               	movlw	0
  2965  001068  1630               	andwf	___fttol@f1+2,f,c
  2966                           
  2967                           ; BSR set to: 0
  2968  00106A  502E               	movf	___fttol@f1,w,c
  2969  00106C  6F61               	movwf	___fttol@lval& (0+255),b
  2970  00106E  502F               	movf	___fttol@f1+1,w,c
  2971  001070  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  2972  001072  5030               	movf	___fttol@f1+2,w,c
  2973  001074  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  2974  001076  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  2975                           
  2976                           ; BSR set to: 0
  2977  001078  0E8E               	movlw	142
  2978  00107A  5F65               	subwf	___fttol@exp1& (0+255),f,b
  2979                           
  2980                           ; BSR set to: 0
  2981  00107C  AF65               	btfss	___fttol@exp1& (0+255),7,b
  2982  00107E  D016               	goto	l574
  2983                           
  2984                           ; BSR set to: 0
  2985  001080  5165               	movf	___fttol@exp1& (0+255),w,b
  2986  001082  0A80               	xorlw	128
  2987  001084  0F8F               	addlw	143
  2988  001086  B0D8               	btfsc	status,0,c
  2989  001088  D009               	goto	l575
  2990                           
  2991                           ; BSR set to: 0
  2992  00108A  0E00               	movlw	0
  2993  00108C  6E2E               	movwf	?___fttol,c
  2994  00108E  0E00               	movlw	0
  2995  001090  6E2F               	movwf	?___fttol+1,c
  2996  001092  0E00               	movlw	0
  2997  001094  6E30               	movwf	?___fttol+2,c
  2998  001096  0E00               	movlw	0
  2999  001098  6E31               	movwf	?___fttol+3,c
  3000                           
  3001                           ; BSR set to: 0
  3002  00109A  0012               	return	
  3003  00109C                     l575:
  3004                           
  3005                           ; BSR set to: 0
  3006                           
  3007                           ; BSR set to: 0
  3008                           
  3009                           ; BSR set to: 0
  3010  00109C  90D8               	bcf	status,0,c
  3011  00109E  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  3012  0010A0  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  3013  0010A2  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  3014  0010A4  3361               	rrcf	___fttol@lval& (0+255),f,b
  3015                           
  3016                           ; BSR set to: 0
  3017  0010A6  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  3018  0010A8  D7F9               	goto	l575
  3019                           
  3020                           ; BSR set to: 0
  3021  0010AA  D015               	goto	u2350
  3022  0010AC                     l574:
  3023                           
  3024                           ; BSR set to: 0
  3025                           
  3026                           ; BSR set to: 0
  3027  0010AC  0E17               	movlw	23
  3028  0010AE  6565               	cpfsgt	___fttol@exp1& (0+255),b
  3029  0010B0  D00F               	goto	l580
  3030                           
  3031                           ; BSR set to: 0
  3032  0010B2  0E00               	movlw	0
  3033  0010B4  6E2E               	movwf	?___fttol,c
  3034  0010B6  0E00               	movlw	0
  3035  0010B8  6E2F               	movwf	?___fttol+1,c
  3036  0010BA  0E00               	movlw	0
  3037  0010BC  6E30               	movwf	?___fttol+2,c
  3038  0010BE  0E00               	movlw	0
  3039  0010C0  6E31               	movwf	?___fttol+3,c
  3040                           
  3041                           ; BSR set to: 0
  3042  0010C2  0012               	return	
  3043  0010C4                     
  3044                           ; BSR set to: 0
  3045                           
  3046                           ; BSR set to: 0
  3047  0010C4  90D8               	bcf	status,0,c
  3048  0010C6  3761               	rlcf	___fttol@lval& (0+255),f,b
  3049  0010C8  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3050  0010CA  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3051  0010CC  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3052  0010CE  0765               	decf	___fttol@exp1& (0+255),f,b
  3053  0010D0                     l580:
  3054                           
  3055                           ; BSR set to: 0
  3056                           
  3057                           ; BSR set to: 0
  3058  0010D0  5165               	movf	___fttol@exp1& (0+255),w,b
  3059  0010D2  A4D8               	btfss	status,2,c
  3060  0010D4  D7F7               	goto	l581
  3061  0010D6                     u2350:
  3062                           
  3063                           ; BSR set to: 0
  3064                           
  3065                           ; BSR set to: 0
  3066                           
  3067                           ; BSR set to: 0
  3068  0010D6  5160               	movf	___fttol@sign1& (0+255),w,b
  3069  0010D8  B4D8               	btfsc	status,2,c
  3070  0010DA  D008               	goto	l583
  3071                           
  3072                           ; BSR set to: 0
  3073  0010DC  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  3074  0010DE  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  3075  0010E0  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  3076  0010E2  6D61               	negf	___fttol@lval& (0+255),b
  3077  0010E4  0E00               	movlw	0
  3078  0010E6  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3079  0010E8  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3080  0010EA  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3081  0010EC                     l583:
  3082                           
  3083                           ; BSR set to: 0
  3084                           
  3085                           ; BSR set to: 0
  3086  0010EC  C061  F02E         	movff	___fttol@lval,?___fttol
  3087  0010F0  C062  F02F         	movff	___fttol@lval+1,?___fttol+1
  3088  0010F4  C063  F030         	movff	___fttol@lval+2,?___fttol+2
  3089  0010F8  C064  F031         	movff	___fttol@lval+3,?___fttol+3
  3090  0010FC  0012               	return	
  3091  0010FE                     __end_of___fttol:
  3092                           	opt stack 0
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           prodh	equ	0xFF4
  3098                           prodl	equ	0xFF3
  3099                           postinc0	equ	0xFEE
  3100                           wreg	equ	0xFE8
  3101                           postinc2	equ	0xFDE
  3102                           postdec2	equ	0xFDD
  3103                           fsr2h	equ	0xFDA
  3104                           fsr2l	equ	0xFD9
  3105                           status	equ	0xFD8
  3106                           
  3107 ;; *************** function ___ftmul *****************
  3108 ;; Defined at:
  3109 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;  f1              3   30[COMRAM] float 
  3112 ;;  f2              3   33[COMRAM] float 
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  f3_as_produc    3   40[COMRAM] unsigned um
  3115 ;;  sign            1   44[COMRAM] unsigned char 
  3116 ;;  cntr            1   43[COMRAM] unsigned char 
  3117 ;;  exp             1   39[COMRAM] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  3   30[COMRAM] float 
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3127 ;;      Params:         6       0       0       0       0       0       0       0       0
  3128 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3129 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3130 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3131 ;;Total ram usage:       15 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    3
  3134 ;; This function calls:
  3135 ;;		___ftpack
  3136 ;; This function is called by:
  3137 ;;		_calcPID
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text19
  3142  0010FE                     __ptext19:
  3143                           	opt stack 0
  3144  0010FE                     ___ftmul:
  3145                           	opt stack 25
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;incstack = 0
  3149  0010FE  C021  F025         	movff	___ftmul@f1+2,??___ftmul
  3150  001102  6A26               	clrf	(??___ftmul+1)& (0+255),c
  3151  001104  6A27               	clrf	(??___ftmul+2)& (0+255),c
  3152  001106  3420               	rlcf	___ftmul@f1+1,w,c
  3153  001108  3625               	rlcf	??___ftmul& (0+255),f,c
  3154  00110A  E301               	bnc	u2221
  3155  00110C  8026               	bsf	(??___ftmul+1)& (0+255),0,c
  3156  00110E                     u2221:
  3157  00110E  5025               	movf	??___ftmul,w,c
  3158  001110  6E28               	movwf	___ftmul@exp,c
  3159  001112  5028               	movf	___ftmul@exp,w,c
  3160  001114  A4D8               	btfss	status,2,c
  3161  001116  D007               	goto	l551
  3162  001118  0E00               	movlw	0
  3163  00111A  6E1F               	movwf	?___ftmul,c
  3164  00111C  0E00               	movlw	0
  3165  00111E  6E20               	movwf	?___ftmul+1,c
  3166  001120  0E00               	movlw	0
  3167  001122  6E21               	movwf	?___ftmul+2,c
  3168  001124  0012               	return	
  3169  001126                     l551:
  3170  001126  C024  F025         	movff	___ftmul@f2+2,??___ftmul
  3171  00112A  6A26               	clrf	(??___ftmul+1)& (0+255),c
  3172  00112C  6A27               	clrf	(??___ftmul+2)& (0+255),c
  3173  00112E  3423               	rlcf	___ftmul@f2+1,w,c
  3174  001130  3625               	rlcf	??___ftmul& (0+255),f,c
  3175  001132  E301               	bnc	u2241
  3176  001134  8026               	bsf	(??___ftmul+1)& (0+255),0,c
  3177  001136                     u2241:
  3178  001136  5025               	movf	??___ftmul,w,c
  3179  001138  6E2D               	movwf	___ftmul@sign,c
  3180  00113A  502D               	movf	___ftmul@sign,w,c
  3181  00113C  A4D8               	btfss	status,2,c
  3182  00113E  D007               	goto	l553
  3183  001140  0E00               	movlw	0
  3184  001142  6E1F               	movwf	?___ftmul,c
  3185  001144  0E00               	movlw	0
  3186  001146  6E20               	movwf	?___ftmul+1,c
  3187  001148  0E00               	movlw	0
  3188  00114A  6E21               	movwf	?___ftmul+2,c
  3189  00114C  0012               	return	
  3190  00114E                     l553:
  3191  00114E  502D               	movf	___ftmul@sign,w,c
  3192  001150  0F7B               	addlw	123
  3193  001152  2628               	addwf	___ftmul@exp,f,c
  3194  001154  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
  3195  001158  5024               	movf	___ftmul@f2+2,w,c
  3196  00115A  1A2D               	xorwf	___ftmul@sign,f,c
  3197  00115C  0E80               	movlw	128
  3198  00115E  162D               	andwf	___ftmul@sign,f,c
  3199  001160  8E20               	bsf	___ftmul@f1+1,7,c
  3200  001162  8E23               	bsf	___ftmul@f2+1,7,c
  3201  001164  0EFF               	movlw	255
  3202  001166  1622               	andwf	___ftmul@f2,f,c
  3203  001168  0EFF               	movlw	255
  3204  00116A  1623               	andwf	___ftmul@f2+1,f,c
  3205  00116C  0E00               	movlw	0
  3206  00116E  1624               	andwf	___ftmul@f2+2,f,c
  3207  001170  0E00               	movlw	0
  3208  001172  6E29               	movwf	___ftmul@f3_as_product,c
  3209  001174  0E00               	movlw	0
  3210  001176  6E2A               	movwf	___ftmul@f3_as_product+1,c
  3211  001178  0E00               	movlw	0
  3212  00117A  6E2B               	movwf	___ftmul@f3_as_product+2,c
  3213  00117C  0E07               	movlw	7
  3214  00117E  6E2C               	movwf	___ftmul@cntr,c
  3215  001180  A01F               	btfss	___ftmul@f1,0,c
  3216  001182  D006               	goto	l555
  3217  001184  5022               	movf	___ftmul@f2,w,c
  3218  001186  2629               	addwf	___ftmul@f3_as_product,f,c
  3219  001188  5023               	movf	___ftmul@f2+1,w,c
  3220  00118A  222A               	addwfc	___ftmul@f3_as_product+1,f,c
  3221  00118C  5024               	movf	___ftmul@f2+2,w,c
  3222  00118E  222B               	addwfc	___ftmul@f3_as_product+2,f,c
  3223  001190                     l555:
  3224  001190  90D8               	bcf	status,0,c
  3225  001192  3221               	rrcf	___ftmul@f1+2,f,c
  3226  001194  3220               	rrcf	___ftmul@f1+1,f,c
  3227  001196  321F               	rrcf	___ftmul@f1,f,c
  3228  001198  90D8               	bcf	status,0,c
  3229  00119A  3622               	rlcf	___ftmul@f2,f,c
  3230  00119C  3623               	rlcf	___ftmul@f2+1,f,c
  3231  00119E  3624               	rlcf	___ftmul@f2+2,f,c
  3232  0011A0  2E2C               	decfsz	___ftmul@cntr,f,c
  3233  0011A2  D7EE               	goto	l554
  3234  0011A4  0E09               	movlw	9
  3235  0011A6  6E2C               	movwf	___ftmul@cntr,c
  3236  0011A8  A01F               	btfss	___ftmul@f1,0,c
  3237  0011AA  D006               	goto	l558
  3238  0011AC  5022               	movf	___ftmul@f2,w,c
  3239  0011AE  2629               	addwf	___ftmul@f3_as_product,f,c
  3240  0011B0  5023               	movf	___ftmul@f2+1,w,c
  3241  0011B2  222A               	addwfc	___ftmul@f3_as_product+1,f,c
  3242  0011B4  5024               	movf	___ftmul@f2+2,w,c
  3243  0011B6  222B               	addwfc	___ftmul@f3_as_product+2,f,c
  3244  0011B8                     l558:
  3245  0011B8  90D8               	bcf	status,0,c
  3246  0011BA  3221               	rrcf	___ftmul@f1+2,f,c
  3247  0011BC  3220               	rrcf	___ftmul@f1+1,f,c
  3248  0011BE  321F               	rrcf	___ftmul@f1,f,c
  3249  0011C0  90D8               	bcf	status,0,c
  3250  0011C2  322B               	rrcf	___ftmul@f3_as_product+2,f,c
  3251  0011C4  322A               	rrcf	___ftmul@f3_as_product+1,f,c
  3252  0011C6  3229               	rrcf	___ftmul@f3_as_product,f,c
  3253  0011C8  2E2C               	decfsz	___ftmul@cntr,f,c
  3254  0011CA  D7EE               	goto	l557
  3255  0011CC  C029  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  3256  0011D0  C02A  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3257  0011D4  C02B  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3258  0011D8  C028  F016         	movff	___ftmul@exp,___ftpack@exp
  3259  0011DC  C02D  F017         	movff	___ftmul@sign,___ftpack@sign
  3260  0011E0  EC5D  F009         	call	___ftpack	;wreg free
  3261  0011E4  C013  F01F         	movff	?___ftpack,?___ftmul
  3262  0011E8  C014  F020         	movff	?___ftpack+1,?___ftmul+1
  3263  0011EC  C015  F021         	movff	?___ftpack+2,?___ftmul+2
  3264  0011F0  0012               	return	
  3265  0011F2                     __end_of___ftmul:
  3266                           	opt stack 0
  3267                           tblptru	equ	0xFF8
  3268                           tblptrh	equ	0xFF7
  3269                           tblptrl	equ	0xFF6
  3270                           tablat	equ	0xFF5
  3271                           prodh	equ	0xFF4
  3272                           prodl	equ	0xFF3
  3273                           postinc0	equ	0xFEE
  3274                           wreg	equ	0xFE8
  3275                           postinc2	equ	0xFDE
  3276                           postdec2	equ	0xFDD
  3277                           fsr2h	equ	0xFDA
  3278                           fsr2l	equ	0xFD9
  3279                           status	equ	0xFD8
  3280                           
  3281 ;; *************** function ___ftadd *****************
  3282 ;; Defined at:
  3283 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  f1              3    6[BANK0 ] float 
  3286 ;;  f2              3    9[BANK0 ] float 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;  exp1            1   14[BANK0 ] unsigned char 
  3289 ;;  exp2            1   13[BANK0 ] unsigned char 
  3290 ;;  sign            1   12[BANK0 ] unsigned char 
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  3    6[BANK0 ] float 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0, cstack
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3300 ;;      Params:         0       6       0       0       0       0       0       0       0
  3301 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3302 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3303 ;;      Totals:         3       9       0       0       0       0       0       0       0
  3304 ;;Total ram usage:       12 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    3
  3307 ;; This function calls:
  3308 ;;		___ftpack
  3309 ;; This function is called by:
  3310 ;;		_calcPID
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text20
  3315  000CF2                     __ptext20:
  3316                           	opt stack 0
  3317  000CF2                     ___ftadd:
  3318                           	opt stack 25
  3319                           
  3320                           ;incstack = 0
  3321  000CF2  C068  F037         	movff	___ftadd@f1+2,??___ftadd
  3322  000CF6  6A38               	clrf	(??___ftadd+1)& (0+255),c
  3323  000CF8  6A39               	clrf	(??___ftadd+2)& (0+255),c
  3324  000CFA  0100               	movlb	0	; () banked
  3325  000CFC  3567               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  3326  000CFE  3637               	rlcf	??___ftadd& (0+255),f,c
  3327  000D00  E301               	bnc	u2011
  3328  000D02  8038               	bsf	(??___ftadd+1)& (0+255),0,c
  3329  000D04                     u2011:
  3330  000D04  5037               	movf	??___ftadd,w,c
  3331  000D06  6F6E               	movwf	___ftadd@exp1& (0+255),b
  3332  000D08  C06B  F037         	movff	___ftadd@f2+2,??___ftadd
  3333  000D0C  6A38               	clrf	(??___ftadd+1)& (0+255),c
  3334  000D0E  6A39               	clrf	(??___ftadd+2)& (0+255),c
  3335  000D10  356A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  3336  000D12  3637               	rlcf	??___ftadd& (0+255),f,c
  3337  000D14  E301               	bnc	u2021
  3338  000D16  8038               	bsf	(??___ftadd+1)& (0+255),0,c
  3339  000D18                     u2021:
  3340  000D18  5037               	movf	??___ftadd,w,c
  3341  000D1A  6F6D               	movwf	___ftadd@exp2& (0+255),b
  3342                           
  3343                           ; BSR set to: 0
  3344  000D1C  516E               	movf	___ftadd@exp1& (0+255),w,b
  3345  000D1E  B4D8               	btfsc	status,2,c
  3346  000D20  D00B               	goto	u2050
  3347                           
  3348                           ; BSR set to: 0
  3349  000D22  516D               	movf	___ftadd@exp2& (0+255),w,b
  3350  000D24  5D6E               	subwf	___ftadd@exp1& (0+255),w,b
  3351  000D26  B0D8               	btfsc	status,0,c
  3352  000D28  D00E               	goto	l503
  3353                           
  3354                           ; BSR set to: 0
  3355  000D2A  516E               	movf	___ftadd@exp1& (0+255),w,b
  3356  000D2C  0800               	sublw	0
  3357  000D2E  256D               	addwf	___ftadd@exp2& (0+255),w,b
  3358  000D30  6E37               	movwf	??___ftadd& (0+255),c
  3359  000D32  0E18               	movlw	24
  3360  000D34  6437               	cpfsgt	??___ftadd,c
  3361  000D36  D007               	goto	l503
  3362  000D38                     u2050:
  3363                           
  3364                           ; BSR set to: 0
  3365  000D38  C069  F066         	movff	___ftadd@f2,?___ftadd
  3366  000D3C  C06A  F067         	movff	___ftadd@f2+1,?___ftadd+1
  3367  000D40  C06B  F068         	movff	___ftadd@f2+2,?___ftadd+2
  3368  000D44  0012               	return	
  3369  000D46                     l503:
  3370                           
  3371                           ; BSR set to: 0
  3372                           
  3373                           ; BSR set to: 0
  3374  000D46  516D               	movf	___ftadd@exp2& (0+255),w,b
  3375  000D48  B4D8               	btfsc	status,2,c
  3376  000D4A  D00B               	goto	u2080
  3377                           
  3378                           ; BSR set to: 0
  3379  000D4C  516E               	movf	___ftadd@exp1& (0+255),w,b
  3380  000D4E  5D6D               	subwf	___ftadd@exp2& (0+255),w,b
  3381  000D50  B0D8               	btfsc	status,0,c
  3382  000D52  D00E               	goto	l507
  3383                           
  3384                           ; BSR set to: 0
  3385  000D54  516D               	movf	___ftadd@exp2& (0+255),w,b
  3386  000D56  0800               	sublw	0
  3387  000D58  256E               	addwf	___ftadd@exp1& (0+255),w,b
  3388  000D5A  6E37               	movwf	??___ftadd& (0+255),c
  3389  000D5C  0E18               	movlw	24
  3390  000D5E  6437               	cpfsgt	??___ftadd,c
  3391  000D60  D007               	goto	l507
  3392  000D62                     u2080:
  3393                           
  3394                           ; BSR set to: 0
  3395  000D62  C066  F066         	movff	___ftadd@f1,?___ftadd
  3396  000D66  C067  F067         	movff	___ftadd@f1+1,?___ftadd+1
  3397  000D6A  C068  F068         	movff	___ftadd@f1+2,?___ftadd+2
  3398  000D6E  0012               	return	
  3399  000D70                     l507:
  3400                           
  3401                           ; BSR set to: 0
  3402                           
  3403                           ; BSR set to: 0
  3404  000D70  0E06               	movlw	6
  3405  000D72  6F6C               	movwf	___ftadd@sign& (0+255),b
  3406                           
  3407                           ; BSR set to: 0
  3408  000D74  BF68               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  3409                           
  3410                           ; BSR set to: 0
  3411  000D76  8F6C               	bsf	___ftadd@sign& (0+255),7,b
  3412                           
  3413                           ; BSR set to: 0
  3414                           
  3415                           ; BSR set to: 0
  3416  000D78  BF6B               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  3417                           
  3418                           ; BSR set to: 0
  3419  000D7A  8D6C               	bsf	___ftadd@sign& (0+255),6,b
  3420                           
  3421                           ; BSR set to: 0
  3422  000D7C  8F67               	bsf	(___ftadd@f1+1)& (0+255),7,b
  3423                           
  3424                           ; BSR set to: 0
  3425  000D7E  0EFF               	movlw	255
  3426  000D80  1766               	andwf	___ftadd@f1& (0+255),f,b
  3427  000D82  0EFF               	movlw	255
  3428  000D84  1767               	andwf	(___ftadd@f1+1)& (0+255),f,b
  3429  000D86  0E00               	movlw	0
  3430  000D88  1768               	andwf	(___ftadd@f1+2)& (0+255),f,b
  3431  000D8A  8F6A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  3432                           
  3433                           ; BSR set to: 0
  3434  000D8C  0EFF               	movlw	255
  3435  000D8E  1769               	andwf	___ftadd@f2& (0+255),f,b
  3436  000D90  0EFF               	movlw	255
  3437  000D92  176A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  3438  000D94  0E00               	movlw	0
  3439  000D96  176B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  3440                           
  3441                           ; BSR set to: 0
  3442  000D98  516D               	movf	___ftadd@exp2& (0+255),w,b
  3443  000D9A  5D6E               	subwf	___ftadd@exp1& (0+255),w,b
  3444  000D9C  B0D8               	btfsc	status,0,c
  3445  000D9E  D01B               	goto	l512
  3446  000DA0                     u2110:
  3447                           
  3448                           ; BSR set to: 0
  3449                           
  3450                           ; BSR set to: 0
  3451  000DA0  90D8               	bcf	status,0,c
  3452  000DA2  3769               	rlcf	___ftadd@f2& (0+255),f,b
  3453  000DA4  376A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  3454  000DA6  376B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  3455  000DA8  076D               	decf	___ftadd@exp2& (0+255),f,b
  3456                           
  3457                           ; BSR set to: 0
  3458  000DAA  516E               	movf	___ftadd@exp1& (0+255),w,b
  3459  000DAC  196D               	xorwf	___ftadd@exp2& (0+255),w,b
  3460  000DAE  B4D8               	btfsc	status,2,c
  3461  000DB0  D00D               	goto	l517
  3462                           
  3463                           ; BSR set to: 0
  3464  000DB2  076C               	decf	___ftadd@sign& (0+255),f,b
  3465  000DB4  C06C  F037         	movff	___ftadd@sign,??___ftadd
  3466  000DB8  0E07               	movlw	7
  3467  000DBA  1637               	andwf	??___ftadd,f,c
  3468  000DBC  B4D8               	btfsc	status,2,c
  3469  000DBE  D006               	goto	l517
  3470  000DC0  D7EF               	goto	u2110
  3471  000DC2                     
  3472                           ; BSR set to: 0
  3473                           
  3474                           ; BSR set to: 0
  3475  000DC2  90D8               	bcf	status,0,c
  3476  000DC4  3368               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  3477  000DC6  3367               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  3478  000DC8  3366               	rrcf	___ftadd@f1& (0+255),f,b
  3479  000DCA  2B6E               	incf	___ftadd@exp1& (0+255),f,b
  3480  000DCC                     l517:
  3481                           
  3482                           ; BSR set to: 0
  3483                           
  3484                           ; BSR set to: 0
  3485  000DCC  516D               	movf	___ftadd@exp2& (0+255),w,b
  3486  000DCE  196E               	xorwf	___ftadd@exp1& (0+255),w,b
  3487  000DD0  B4D8               	btfsc	status,2,c
  3488  000DD2  D01F               	goto	u2180
  3489  000DD4  D7F6               	goto	l518
  3490  000DD6                     l512:
  3491                           
  3492                           ; BSR set to: 0
  3493                           
  3494                           ; BSR set to: 0
  3495  000DD6  516E               	movf	___ftadd@exp1& (0+255),w,b
  3496  000DD8  5D6D               	subwf	___ftadd@exp2& (0+255),w,b
  3497  000DDA  B0D8               	btfsc	status,0,c
  3498  000DDC  D01A               	goto	u2180
  3499  000DDE                     u2150:
  3500                           
  3501                           ; BSR set to: 0
  3502                           
  3503                           ; BSR set to: 0
  3504  000DDE  90D8               	bcf	status,0,c
  3505  000DE0  3766               	rlcf	___ftadd@f1& (0+255),f,b
  3506  000DE2  3767               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  3507  000DE4  3768               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  3508  000DE6  076E               	decf	___ftadd@exp1& (0+255),f,b
  3509                           
  3510                           ; BSR set to: 0
  3511  000DE8  516E               	movf	___ftadd@exp1& (0+255),w,b
  3512  000DEA  196D               	xorwf	___ftadd@exp2& (0+255),w,b
  3513  000DEC  B4D8               	btfsc	status,2,c
  3514  000DEE  D00D               	goto	l526
  3515                           
  3516                           ; BSR set to: 0
  3517  000DF0  076C               	decf	___ftadd@sign& (0+255),f,b
  3518  000DF2  C06C  F037         	movff	___ftadd@sign,??___ftadd
  3519  000DF6  0E07               	movlw	7
  3520  000DF8  1637               	andwf	??___ftadd,f,c
  3521  000DFA  B4D8               	btfsc	status,2,c
  3522  000DFC  D006               	goto	l526
  3523  000DFE  D7EF               	goto	u2150
  3524  000E00                     
  3525                           ; BSR set to: 0
  3526                           
  3527                           ; BSR set to: 0
  3528  000E00  90D8               	bcf	status,0,c
  3529  000E02  336B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  3530  000E04  336A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  3531  000E06  3369               	rrcf	___ftadd@f2& (0+255),f,b
  3532  000E08  2B6D               	incf	___ftadd@exp2& (0+255),f,b
  3533  000E0A                     l526:
  3534                           
  3535                           ; BSR set to: 0
  3536                           
  3537                           ; BSR set to: 0
  3538  000E0A  516D               	movf	___ftadd@exp2& (0+255),w,b
  3539  000E0C  196E               	xorwf	___ftadd@exp1& (0+255),w,b
  3540  000E0E  A4D8               	btfss	status,2,c
  3541  000E10  D7F7               	goto	l527
  3542  000E12                     u2180:
  3543                           
  3544                           ; BSR set to: 0
  3545                           
  3546                           ; BSR set to: 0
  3547                           
  3548                           ; BSR set to: 0
  3549  000E12  AF6C               	btfss	___ftadd@sign& (0+255),7,b
  3550  000E14  D00C               	goto	l529
  3551                           
  3552                           ; BSR set to: 0
  3553  000E16  0EFF               	movlw	255
  3554  000E18  1B66               	xorwf	___ftadd@f1& (0+255),f,b
  3555  000E1A  0EFF               	movlw	255
  3556  000E1C  1B67               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  3557  000E1E  0EFF               	movlw	255
  3558  000E20  1B68               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  3559  000E22  0E01               	movlw	1
  3560  000E24  2766               	addwf	___ftadd@f1& (0+255),f,b
  3561  000E26  0E00               	movlw	0
  3562  000E28  2367               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  3563  000E2A  0E00               	movlw	0
  3564  000E2C  2368               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  3565  000E2E                     l529:
  3566                           
  3567                           ; BSR set to: 0
  3568  000E2E  AD6C               	btfss	___ftadd@sign& (0+255),6,b
  3569  000E30  D00C               	goto	l530
  3570                           
  3571                           ; BSR set to: 0
  3572  000E32  0EFF               	movlw	255
  3573  000E34  1B69               	xorwf	___ftadd@f2& (0+255),f,b
  3574  000E36  0EFF               	movlw	255
  3575  000E38  1B6A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3576  000E3A  0EFF               	movlw	255
  3577  000E3C  1B6B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3578  000E3E  0E01               	movlw	1
  3579  000E40  2769               	addwf	___ftadd@f2& (0+255),f,b
  3580  000E42  0E00               	movlw	0
  3581  000E44  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3582  000E46  0E00               	movlw	0
  3583  000E48  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3584  000E4A                     l530:
  3585                           
  3586                           ; BSR set to: 0
  3587                           
  3588                           ; BSR set to: 0
  3589  000E4A  0E00               	movlw	0
  3590  000E4C  6F6C               	movwf	___ftadd@sign& (0+255),b
  3591                           
  3592                           ; BSR set to: 0
  3593  000E4E  5166               	movf	___ftadd@f1& (0+255),w,b
  3594  000E50  2769               	addwf	___ftadd@f2& (0+255),f,b
  3595  000E52  5167               	movf	(___ftadd@f1+1)& (0+255),w,b
  3596  000E54  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3597  000E56  5168               	movf	(___ftadd@f1+2)& (0+255),w,b
  3598  000E58  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3599                           
  3600                           ; BSR set to: 0
  3601  000E5A  AF6B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3602  000E5C  D00E               	goto	l531
  3603                           
  3604                           ; BSR set to: 0
  3605  000E5E  0EFF               	movlw	255
  3606  000E60  1B69               	xorwf	___ftadd@f2& (0+255),f,b
  3607  000E62  0EFF               	movlw	255
  3608  000E64  1B6A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3609  000E66  0EFF               	movlw	255
  3610  000E68  1B6B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3611  000E6A  0E01               	movlw	1
  3612  000E6C  2769               	addwf	___ftadd@f2& (0+255),f,b
  3613  000E6E  0E00               	movlw	0
  3614  000E70  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3615  000E72  0E00               	movlw	0
  3616  000E74  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3617                           
  3618                           ; BSR set to: 0
  3619  000E76  0E01               	movlw	1
  3620  000E78  6F6C               	movwf	___ftadd@sign& (0+255),b
  3621  000E7A                     l531:
  3622                           
  3623                           ; BSR set to: 0
  3624                           
  3625                           ; BSR set to: 0
  3626  000E7A  C069  F013         	movff	___ftadd@f2,___ftpack@arg
  3627  000E7E  C06A  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  3628  000E82  C06B  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  3629  000E86  C06E  F016         	movff	___ftadd@exp1,___ftpack@exp
  3630  000E8A  C06C  F017         	movff	___ftadd@sign,___ftpack@sign
  3631  000E8E  EC5D  F009         	call	___ftpack	;wreg free
  3632  000E92  C013  F066         	movff	?___ftpack,?___ftadd
  3633  000E96  C014  F067         	movff	?___ftpack+1,?___ftadd+1
  3634  000E9A  C015  F068         	movff	?___ftpack+2,?___ftadd+2
  3635  000E9E  0012               	return	
  3636  000EA0                     __end_of___ftadd:
  3637                           	opt stack 0
  3638                           tblptru	equ	0xFF8
  3639                           tblptrh	equ	0xFF7
  3640                           tblptrl	equ	0xFF6
  3641                           tablat	equ	0xFF5
  3642                           prodh	equ	0xFF4
  3643                           prodl	equ	0xFF3
  3644                           postinc0	equ	0xFEE
  3645                           wreg	equ	0xFE8
  3646                           postinc2	equ	0xFDE
  3647                           postdec2	equ	0xFDD
  3648                           fsr2h	equ	0xFDA
  3649                           fsr2l	equ	0xFD9
  3650                           status	equ	0xFD8
  3651                           
  3652 ;; *************** function ___awtoft *****************
  3653 ;; Defined at:
  3654 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;  c               2   26[COMRAM] int 
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;  sign            1   29[COMRAM] unsigned char 
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  3   26[COMRAM] float 
  3661 ;; Registers used:
  3662 ;;		wreg, status,2, status,0, cstack
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3668 ;;      Params:         3       0       0       0       0       0       0       0       0
  3669 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3670 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3671 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3672 ;;Total ram usage:        4 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:    3
  3675 ;; This function calls:
  3676 ;;		___ftpack
  3677 ;; This function is called by:
  3678 ;;		_calcPID
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           	psect	text21
  3683  0016FC                     __ptext21:
  3684                           	opt stack 0
  3685  0016FC                     ___awtoft:
  3686                           	opt stack 25
  3687                           
  3688                           ;incstack = 0
  3689  0016FC  0E00               	movlw	0
  3690  0016FE  6E1E               	movwf	___awtoft@sign,c
  3691  001700  AE1C               	btfss	___awtoft@c+1,7,c
  3692  001702  D006               	goto	l453
  3693  001704  6C1B               	negf	___awtoft@c,c
  3694  001706  1E1C               	comf	___awtoft@c+1,f,c
  3695  001708  B0D8               	btfsc	status,0,c
  3696  00170A  2A1C               	incf	___awtoft@c+1,f,c
  3697  00170C  0E01               	movlw	1
  3698  00170E  6E1E               	movwf	___awtoft@sign,c
  3699  001710                     l453:
  3700  001710  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  3701  001714  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  3702  001718  6A15               	clrf	___ftpack@arg+2,c
  3703  00171A  0E8E               	movlw	142
  3704  00171C  6E16               	movwf	___ftpack@exp,c
  3705  00171E  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  3706  001722  EC5D  F009         	call	___ftpack	;wreg free
  3707  001726  C013  F01B         	movff	?___ftpack,?___awtoft
  3708  00172A  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  3709  00172E  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  3710  001732  0012               	return	
  3711  001734                     __end_of___awtoft:
  3712                           	opt stack 0
  3713                           tblptru	equ	0xFF8
  3714                           tblptrh	equ	0xFF7
  3715                           tblptrl	equ	0xFF6
  3716                           tablat	equ	0xFF5
  3717                           prodh	equ	0xFF4
  3718                           prodl	equ	0xFF3
  3719                           postinc0	equ	0xFEE
  3720                           wreg	equ	0xFE8
  3721                           postinc2	equ	0xFDE
  3722                           postdec2	equ	0xFDD
  3723                           fsr2h	equ	0xFDA
  3724                           fsr2l	equ	0xFD9
  3725                           status	equ	0xFD8
  3726                           
  3727 ;; *************** function ___ftpack *****************
  3728 ;; Defined at:
  3729 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;  arg             3   18[COMRAM] unsigned um
  3732 ;;  exp             1   21[COMRAM] unsigned char 
  3733 ;;  sign            1   22[COMRAM] unsigned char 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;		None
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  3   18[COMRAM] float 
  3738 ;; Registers used:
  3739 ;;		wreg, status,2, status,0
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3745 ;;      Params:         5       0       0       0       0       0       0       0       0
  3746 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3747 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3748 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3749 ;;Total ram usage:        8 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:    2
  3752 ;; This function calls:
  3753 ;;		Nothing
  3754 ;; This function is called by:
  3755 ;;		___awtoft
  3756 ;;		___ftadd
  3757 ;;		___ftmul
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text22
  3762  0012BA                     __ptext22:
  3763                           	opt stack 0
  3764  0012BA                     ___ftpack:
  3765                           	opt stack 25
  3766                           
  3767                           ;incstack = 0
  3768  0012BA  5016               	movf	___ftpack@exp,w,c
  3769  0012BC  B4D8               	btfsc	status,2,c
  3770  0012BE  D005               	goto	u1940
  3771  0012C0  5013               	movf	___ftpack@arg,w,c
  3772  0012C2  1014               	iorwf	___ftpack@arg+1,w,c
  3773  0012C4  1015               	iorwf	___ftpack@arg+2,w,c
  3774  0012C6  A4D8               	btfss	status,2,c
  3775  0012C8  D00C               	goto	l472
  3776  0012CA                     u1940:
  3777  0012CA  0E00               	movlw	0
  3778  0012CC  6E13               	movwf	?___ftpack,c
  3779  0012CE  0E00               	movlw	0
  3780  0012D0  6E14               	movwf	?___ftpack+1,c
  3781  0012D2  0E00               	movlw	0
  3782  0012D4  6E15               	movwf	?___ftpack+2,c
  3783  0012D6  0012               	return	
  3784  0012D8  2A16               	incf	___ftpack@exp,f,c
  3785  0012DA  90D8               	bcf	status,0,c
  3786  0012DC  3215               	rrcf	___ftpack@arg+2,f,c
  3787  0012DE  3214               	rrcf	___ftpack@arg+1,f,c
  3788  0012E0  3213               	rrcf	___ftpack@arg,f,c
  3789  0012E2                     l472:
  3790  0012E2  0E00               	movlw	0
  3791  0012E4  1413               	andwf	___ftpack@arg,w,c
  3792  0012E6  6E18               	movwf	??___ftpack& (0+255),c
  3793  0012E8  0E00               	movlw	0
  3794  0012EA  1414               	andwf	___ftpack@arg+1,w,c
  3795  0012EC  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3796  0012EE  0EFE               	movlw	254
  3797  0012F0  1415               	andwf	___ftpack@arg+2,w,c
  3798  0012F2  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3799  0012F4  5018               	movf	??___ftpack,w,c
  3800  0012F6  1019               	iorwf	??___ftpack+1,w,c
  3801  0012F8  101A               	iorwf	??___ftpack+2,w,c
  3802  0012FA  B4D8               	btfsc	status,2,c
  3803  0012FC  D00C               	goto	l475
  3804  0012FE  D7EC               	goto	l473
  3805  001300  2A16               	incf	___ftpack@exp,f,c
  3806  001302  0E01               	movlw	1
  3807  001304  2613               	addwf	___ftpack@arg,f,c
  3808  001306  0E00               	movlw	0
  3809  001308  2214               	addwfc	___ftpack@arg+1,f,c
  3810  00130A  0E00               	movlw	0
  3811  00130C  2215               	addwfc	___ftpack@arg+2,f,c
  3812  00130E  90D8               	bcf	status,0,c
  3813  001310  3215               	rrcf	___ftpack@arg+2,f,c
  3814  001312  3214               	rrcf	___ftpack@arg+1,f,c
  3815  001314  3213               	rrcf	___ftpack@arg,f,c
  3816  001316                     l475:
  3817  001316  0E00               	movlw	0
  3818  001318  1413               	andwf	___ftpack@arg,w,c
  3819  00131A  6E18               	movwf	??___ftpack& (0+255),c
  3820  00131C  0E00               	movlw	0
  3821  00131E  1414               	andwf	___ftpack@arg+1,w,c
  3822  001320  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3823  001322  0EFF               	movlw	255
  3824  001324  1415               	andwf	___ftpack@arg+2,w,c
  3825  001326  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3826  001328  5018               	movf	??___ftpack,w,c
  3827  00132A  1019               	iorwf	??___ftpack+1,w,c
  3828  00132C  101A               	iorwf	??___ftpack+2,w,c
  3829  00132E  B4D8               	btfsc	status,2,c
  3830  001330  D006               	goto	l478
  3831  001332  D7E6               	goto	l476
  3832  001334  0616               	decf	___ftpack@exp,f,c
  3833  001336  90D8               	bcf	status,0,c
  3834  001338  3613               	rlcf	___ftpack@arg,f,c
  3835  00133A  3614               	rlcf	___ftpack@arg+1,f,c
  3836  00133C  3615               	rlcf	___ftpack@arg+2,f,c
  3837  00133E                     l478:
  3838  00133E  BE14               	btfsc	___ftpack@arg+1,7,c
  3839  001340  D003               	goto	u1980
  3840  001342  0E02               	movlw	2
  3841  001344  6016               	cpfslt	___ftpack@exp,c
  3842  001346  D7F6               	goto	l479
  3843  001348                     u1980:
  3844  001348  A016               	btfss	___ftpack@exp,0,c
  3845  00134A  9E14               	bcf	___ftpack@arg+1,7,c
  3846  00134C  90D8               	bcf	status,0,c
  3847  00134E  3216               	rrcf	___ftpack@exp,f,c
  3848  001350  5016               	movf	___ftpack@exp,w,c
  3849  001352  1215               	iorwf	___ftpack@arg+2,f,c
  3850  001354  5017               	movf	___ftpack@sign,w,c
  3851  001356  A4D8               	btfss	status,2,c
  3852  001358  8E15               	bsf	___ftpack@arg+2,7,c
  3853  00135A  C013  F013         	movff	___ftpack@arg,?___ftpack
  3854  00135E  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  3855  001362  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  3856  001366  0012               	return	
  3857  001368                     __end_of___ftpack:
  3858                           	opt stack 0
  3859                           tblptru	equ	0xFF8
  3860                           tblptrh	equ	0xFF7
  3861                           tblptrl	equ	0xFF6
  3862                           tablat	equ	0xFF5
  3863                           prodh	equ	0xFF4
  3864                           prodl	equ	0xFF3
  3865                           postinc0	equ	0xFEE
  3866                           wreg	equ	0xFE8
  3867                           postinc2	equ	0xFDE
  3868                           postdec2	equ	0xFDD
  3869                           fsr2h	equ	0xFDA
  3870                           fsr2l	equ	0xFD9
  3871                           status	equ	0xFD8
  3872                           
  3873 ;; *************** function ___awmod *****************
  3874 ;; Defined at:
  3875 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  dividend        2   18[COMRAM] int 
  3878 ;;  divisor         2   20[COMRAM] int 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  sign            1   23[COMRAM] unsigned char 
  3881 ;;  counter         1   22[COMRAM] unsigned char 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  2   18[COMRAM] int 
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, status,0
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3891 ;;      Params:         4       0       0       0       0       0       0       0       0
  3892 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3893 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3894 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3895 ;;Total ram usage:        6 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    2
  3898 ;; This function calls:
  3899 ;;		Nothing
  3900 ;; This function is called by:
  3901 ;;		_loop
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           	psect	text23
  3906  00158E                     __ptext23:
  3907                           	opt stack 0
  3908  00158E                     ___awmod:
  3909                           	opt stack 27
  3910                           
  3911                           ;incstack = 0
  3912  00158E  0E00               	movlw	0
  3913  001590  6E18               	movwf	___awmod@sign,c
  3914  001592  AE14               	btfss	___awmod@dividend+1,7,c
  3915  001594  D006               	goto	l438
  3916  001596  6C13               	negf	___awmod@dividend,c
  3917  001598  1E14               	comf	___awmod@dividend+1,f,c
  3918  00159A  B0D8               	btfsc	status,0,c
  3919  00159C  2A14               	incf	___awmod@dividend+1,f,c
  3920  00159E  0E01               	movlw	1
  3921  0015A0  6E18               	movwf	___awmod@sign,c
  3922  0015A2                     l438:
  3923  0015A2  AE16               	btfss	___awmod@divisor+1,7,c
  3924  0015A4  D004               	goto	l439
  3925  0015A6  6C15               	negf	___awmod@divisor,c
  3926  0015A8  1E16               	comf	___awmod@divisor+1,f,c
  3927  0015AA  B0D8               	btfsc	status,0,c
  3928  0015AC  2A16               	incf	___awmod@divisor+1,f,c
  3929  0015AE                     l439:
  3930  0015AE  5015               	movf	___awmod@divisor,w,c
  3931  0015B0  1016               	iorwf	___awmod@divisor+1,w,c
  3932  0015B2  B4D8               	btfsc	status,2,c
  3933  0015B4  D018               	goto	l446
  3934  0015B6  0E01               	movlw	1
  3935  0015B8  6E17               	movwf	___awmod@counter,c
  3936  0015BA  D004               	goto	l441
  3937  0015BC  90D8               	bcf	status,0,c
  3938  0015BE  3615               	rlcf	___awmod@divisor,f,c
  3939  0015C0  3616               	rlcf	___awmod@divisor+1,f,c
  3940  0015C2  2A17               	incf	___awmod@counter,f,c
  3941  0015C4                     l441:
  3942  0015C4  AE16               	btfss	___awmod@divisor+1,7,c
  3943  0015C6  D7FA               	goto	l442
  3944  0015C8                     u1740:
  3945  0015C8  5015               	movf	___awmod@divisor,w,c
  3946  0015CA  5C13               	subwf	___awmod@dividend,w,c
  3947  0015CC  5016               	movf	___awmod@divisor+1,w,c
  3948  0015CE  5814               	subwfb	___awmod@dividend+1,w,c
  3949  0015D0  A0D8               	btfss	status,0,c
  3950  0015D2  D004               	goto	l445
  3951  0015D4  5015               	movf	___awmod@divisor,w,c
  3952  0015D6  5E13               	subwf	___awmod@dividend,f,c
  3953  0015D8  5016               	movf	___awmod@divisor+1,w,c
  3954  0015DA  5A14               	subwfb	___awmod@dividend+1,f,c
  3955  0015DC                     l445:
  3956  0015DC  90D8               	bcf	status,0,c
  3957  0015DE  3216               	rrcf	___awmod@divisor+1,f,c
  3958  0015E0  3215               	rrcf	___awmod@divisor,f,c
  3959  0015E2  2E17               	decfsz	___awmod@counter,f,c
  3960  0015E4  D7F1               	goto	u1740
  3961  0015E6                     l446:
  3962  0015E6  5018               	movf	___awmod@sign,w,c
  3963  0015E8  B4D8               	btfsc	status,2,c
  3964  0015EA  D004               	goto	l447
  3965  0015EC  6C13               	negf	___awmod@dividend,c
  3966  0015EE  1E14               	comf	___awmod@dividend+1,f,c
  3967  0015F0  B0D8               	btfsc	status,0,c
  3968  0015F2  2A14               	incf	___awmod@dividend+1,f,c
  3969  0015F4                     l447:
  3970  0015F4  C013  F013         	movff	___awmod@dividend,?___awmod
  3971  0015F8  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  3972  0015FC  0012               	return	
  3973  0015FE                     __end_of___awmod:
  3974                           	opt stack 0
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           prodh	equ	0xFF4
  3980                           prodl	equ	0xFF3
  3981                           postinc0	equ	0xFEE
  3982                           wreg	equ	0xFE8
  3983                           postinc2	equ	0xFDE
  3984                           postdec2	equ	0xFDD
  3985                           fsr2h	equ	0xFDA
  3986                           fsr2l	equ	0xFD9
  3987                           status	equ	0xFD8
  3988                           
  3989 ;; *************** function _initUI *****************
  3990 ;; Defined at:
  3991 ;;		line 18 in file "ui.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;		None
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;		None
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		None
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4005 ;;      Params:         0       0       0       0       0       0       0       0       0
  4006 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4007 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4008 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4009 ;;Total ram usage:        0 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:    2
  4012 ;; This function calls:
  4013 ;;		Nothing
  4014 ;; This function is called by:
  4015 ;;		_main
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text24
  4020  00184A                     __ptext24:
  4021                           	opt stack 0
  4022  00184A                     _initUI:
  4023                           	opt stack 28
  4024                           
  4025                           ;ui.c: 19: TRISBbits.RB1 = 0;
  4026                           
  4027                           ;incstack = 0
  4028  00184A  9293               	bcf	3987,1,c	;volatile
  4029                           
  4030                           ;ui.c: 20: LATBbits.LB1 = 0;
  4031  00184C  928A               	bcf	3978,1,c	;volatile
  4032                           
  4033                           ;ui.c: 22: TRISBbits.RB2 = 0;
  4034  00184E  9493               	bcf	3987,2,c	;volatile
  4035                           
  4036                           ;ui.c: 23: LATBbits.LB2 = 0;
  4037  001850  948A               	bcf	3978,2,c	;volatile
  4038                           
  4039                           ;ui.c: 25: TRISBbits.RB3 = 0;
  4040  001852  9693               	bcf	3987,3,c	;volatile
  4041                           
  4042                           ;ui.c: 26: LATBbits.LB3 = 0;
  4043  001854  968A               	bcf	3978,3,c	;volatile
  4044                           
  4045                           ;ui.c: 28: TRISBbits.RB0 = 1;
  4046  001856  8093               	bsf	3987,0,c	;volatile
  4047                           
  4048                           ;ui.c: 29: TRISBbits.RB5 = 1;
  4049  001858  8A93               	bsf	3987,5,c	;volatile
  4050  00185A  0012               	return		;funcret
  4051  00185C                     __end_of_initUI:
  4052                           	opt stack 0
  4053                           tblptru	equ	0xFF8
  4054                           tblptrh	equ	0xFF7
  4055                           tblptrl	equ	0xFF6
  4056                           tablat	equ	0xFF5
  4057                           prodh	equ	0xFF4
  4058                           prodl	equ	0xFF3
  4059                           postinc0	equ	0xFEE
  4060                           wreg	equ	0xFE8
  4061                           postinc2	equ	0xFDE
  4062                           postdec2	equ	0xFDD
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           
  4067 ;; *************** function _initTimer *****************
  4068 ;; Defined at:
  4069 ;;		line 21 in file "timer.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg, status,2
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4083 ;;      Params:         0       0       0       0       0       0       0       0       0
  4084 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4085 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4086 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4087 ;;Total ram usage:        0 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    2
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_main
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           	psect	text25
  4098  00189E                     __ptext25:
  4099                           	opt stack 0
  4100  00189E                     _initTimer:
  4101                           	opt stack 28
  4102                           
  4103                           ;timer.c: 22: INTCONbits.TMR0IF = 0;
  4104                           
  4105                           ;incstack = 0
  4106  00189E  94F2               	bcf	intcon,2,c	;volatile
  4107                           
  4108                           ;timer.c: 23: INTCONbits.TMR0IE = 1;
  4109  0018A0  8AF2               	bsf	intcon,5,c	;volatile
  4110                           
  4111                           ;timer.c: 24: T0CON = 0xC4;
  4112  0018A2  0EC4               	movlw	196
  4113  0018A4  6ED5               	movwf	4053,c	;volatile
  4114  0018A6  0012               	return		;funcret
  4115  0018A8                     __end_of_initTimer:
  4116                           	opt stack 0
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           prodh	equ	0xFF4
  4122                           prodl	equ	0xFF3
  4123                           intcon	equ	0xFF2
  4124                           postinc0	equ	0xFEE
  4125                           wreg	equ	0xFE8
  4126                           postinc2	equ	0xFDE
  4127                           postdec2	equ	0xFDD
  4128                           fsr2h	equ	0xFDA
  4129                           fsr2l	equ	0xFD9
  4130                           status	equ	0xFD8
  4131                           
  4132 ;; *************** function _initMotors *****************
  4133 ;; Defined at:
  4134 ;;		line 14 in file "motors.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;		None
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;		None
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      void 
  4141 ;; Registers used:
  4142 ;;		wreg, status,2
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4148 ;;      Params:         0       0       0       0       0       0       0       0       0
  4149 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4151 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4152 ;;Total ram usage:        0 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    2
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_main
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text26
  4163  001734                     __ptext26:
  4164                           	opt stack 0
  4165  001734                     _initMotors:
  4166                           	opt stack 28
  4167                           
  4168                           ;motors.c: 15: TRISCbits.TRISC6 = 0;
  4169                           
  4170                           ;incstack = 0
  4171  001734  9C94               	bcf	3988,6,c	;volatile
  4172                           
  4173                           ;motors.c: 16: TRISCbits.TRISC0 = 0;
  4174  001736  9094               	bcf	3988,0,c	;volatile
  4175                           
  4176                           ;motors.c: 18: LATCbits.LATC0 = 0;
  4177  001738  908B               	bcf	3979,0,c	;volatile
  4178                           
  4179                           ;motors.c: 19: LATCbits.LATC6 = 0;
  4180  00173A  9C8B               	bcf	3979,6,c	;volatile
  4181                           
  4182                           ;motors.c: 21: TRISCbits.TRISC1 = 0;
  4183  00173C  9294               	bcf	3988,1,c	;volatile
  4184                           
  4185                           ;motors.c: 22: TRISCbits.TRISC2 = 0;
  4186  00173E  9494               	bcf	3988,2,c	;volatile
  4187                           
  4188                           ;motors.c: 24: PR2 = 249;
  4189  001740  0EF9               	movlw	249
  4190  001742  6ECB               	movwf	4043,c	;volatile
  4191                           
  4192                           ;motors.c: 25: CCPR1L = 0;
  4193  001744  0E00               	movlw	0
  4194  001746  6EBE               	movwf	4030,c	;volatile
  4195                           
  4196                           ;motors.c: 26: CCPR2L = 0;
  4197  001748  0E00               	movlw	0
  4198  00174A  6EBB               	movwf	4027,c	;volatile
  4199                           
  4200                           ;motors.c: 27: CCP1CONbits.DC1B = 0;
  4201  00174C  0ECF               	movlw	-49
  4202  00174E  16BD               	andwf	4029,f,c	;volatile
  4203                           
  4204                           ;motors.c: 28: CCP2CONbits.DC2B = 0;
  4205  001750  0ECF               	movlw	-49
  4206  001752  16BA               	andwf	4026,f,c	;volatile
  4207                           
  4208                           ;motors.c: 29: T2CON = 0x05;
  4209  001754  0E05               	movlw	5
  4210  001756  6ECA               	movwf	4042,c	;volatile
  4211                           
  4212                           ;motors.c: 30: CCP1CONbits.CCP1M = 0xF;
  4213  001758  80BD               	bsf	4029,0,c	;volatile
  4214  00175A  82BD               	bsf	4029,1,c	;volatile
  4215  00175C  84BD               	bsf	4029,2,c	;volatile
  4216  00175E  86BD               	bsf	4029,3,c	;volatile
  4217                           
  4218                           ;motors.c: 31: CCP2CONbits.CCP2M = 0xF;
  4219  001760  80BA               	bsf	4026,0,c	;volatile
  4220  001762  82BA               	bsf	4026,1,c	;volatile
  4221  001764  84BA               	bsf	4026,2,c	;volatile
  4222  001766  86BA               	bsf	4026,3,c	;volatile
  4223  001768  0012               	return		;funcret
  4224  00176A                     __end_of_initMotors:
  4225                           	opt stack 0
  4226                           tblptru	equ	0xFF8
  4227                           tblptrh	equ	0xFF7
  4228                           tblptrl	equ	0xFF6
  4229                           tablat	equ	0xFF5
  4230                           prodh	equ	0xFF4
  4231                           prodl	equ	0xFF3
  4232                           intcon	equ	0xFF2
  4233                           postinc0	equ	0xFEE
  4234                           wreg	equ	0xFE8
  4235                           postinc2	equ	0xFDE
  4236                           postdec2	equ	0xFDD
  4237                           fsr2h	equ	0xFDA
  4238                           fsr2l	equ	0xFD9
  4239                           status	equ	0xFD8
  4240                           
  4241 ;; *************** function _initInterrupts *****************
  4242 ;; Defined at:
  4243 ;;		line 84 in file "main.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      void 
  4250 ;; Registers used:
  4251 ;;		None
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4257 ;;      Params:         0       0       0       0       0       0       0       0       0
  4258 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4259 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4260 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4261 ;;Total ram usage:        0 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    2
  4264 ;; This function calls:
  4265 ;;		Nothing
  4266 ;; This function is called by:
  4267 ;;		_main
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text27
  4272  0018A8                     __ptext27:
  4273                           	opt stack 0
  4274  0018A8                     _initInterrupts:
  4275                           	opt stack 28
  4276                           
  4277                           ;main.c: 85: INTCONbits.PEIE = 1;
  4278                           
  4279                           ;incstack = 0
  4280  0018A8  8CF2               	bsf	intcon,6,c	;volatile
  4281                           
  4282                           ;main.c: 86: INTCONbits.GIE = 1;
  4283  0018AA  8EF2               	bsf	intcon,7,c	;volatile
  4284  0018AC  0012               	return		;funcret
  4285  0018AE                     __end_of_initInterrupts:
  4286                           	opt stack 0
  4287                           tblptru	equ	0xFF8
  4288                           tblptrh	equ	0xFF7
  4289                           tblptrl	equ	0xFF6
  4290                           tablat	equ	0xFF5
  4291                           prodh	equ	0xFF4
  4292                           prodl	equ	0xFF3
  4293                           intcon	equ	0xFF2
  4294                           postinc0	equ	0xFEE
  4295                           wreg	equ	0xFE8
  4296                           postinc2	equ	0xFDE
  4297                           postdec2	equ	0xFDD
  4298                           fsr2h	equ	0xFDA
  4299                           fsr2l	equ	0xFD9
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function _initCal *****************
  4303 ;; Defined at:
  4304 ;;		line 11 in file "calibration.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;		None
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;  i               2   18[COMRAM] int 
  4309 ;; Return value:  Size  Location     Type
  4310 ;;                  1    wreg      void 
  4311 ;; Registers used:
  4312 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4318 ;;      Params:         0       0       0       0       0       0       0       0       0
  4319 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4320 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4321 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4322 ;;Total ram usage:        2 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:    2
  4325 ;; This function calls:
  4326 ;;		Nothing
  4327 ;; This function is called by:
  4328 ;;		_main
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text28
  4333  001656                     __ptext28:
  4334                           	opt stack 0
  4335  001656                     _initCal:
  4336                           	opt stack 28
  4337                           
  4338                           ;calibration.c: 12: for(int i = 0; i < 5; i++){
  4339                           
  4340                           ;incstack = 0
  4341  001656  0E00               	movlw	0
  4342  001658  6E14               	movwf	initCal@i+1,c
  4343  00165A  0E00               	movlw	0
  4344  00165C  6E13               	movwf	initCal@i,c
  4345  00165E                     l2065:
  4346  00165E  BE14               	btfsc	initCal@i+1,7,c
  4347  001660  D006               	goto	l233
  4348  001662  5014               	movf	initCal@i+1,w,c
  4349  001664  E121               	bnz	l235
  4350  001666  0E05               	movlw	5
  4351  001668  5C13               	subwf	initCal@i,w,c
  4352  00166A  B0D8               	btfsc	status,0,c
  4353  00166C  0012               	return	
  4354  00166E                     l233:
  4355                           
  4356                           ;calibration.c: 13: mins[i] = 1023;
  4357  00166E  90D8               	bcf	status,0,c
  4358  001670  3413               	rlcf	initCal@i,w,c
  4359  001672  6ED9               	movwf	fsr2l,c
  4360  001674  3414               	rlcf	initCal@i+1,w,c
  4361  001676  6EDA               	movwf	fsr2h,c
  4362  001678  0E3C               	movlw	low _mins
  4363  00167A  26D9               	addwf	fsr2l,f,c
  4364  00167C  0E00               	movlw	high _mins
  4365  00167E  22DA               	addwfc	fsr2h,f,c
  4366  001680  0EFF               	movlw	255
  4367  001682  6EDE               	movwf	postinc2,c
  4368  001684  0E03               	movlw	3
  4369  001686  6EDD               	movwf	postdec2,c
  4370                           
  4371                           ;calibration.c: 14: maxs[i] = 0;
  4372  001688  90D8               	bcf	status,0,c
  4373  00168A  3413               	rlcf	initCal@i,w,c
  4374  00168C  6ED9               	movwf	fsr2l,c
  4375  00168E  3414               	rlcf	initCal@i+1,w,c
  4376  001690  6EDA               	movwf	fsr2h,c
  4377  001692  0E99               	movlw	low _maxs
  4378  001694  26D9               	addwf	fsr2l,f,c
  4379  001696  0E00               	movlw	high _maxs
  4380  001698  22DA               	addwfc	fsr2h,f,c
  4381  00169A  0E00               	movlw	0
  4382  00169C  6EDE               	movwf	postinc2,c
  4383  00169E  0E00               	movlw	0
  4384  0016A0  6EDD               	movwf	postdec2,c
  4385  0016A2  4A13               	infsnz	initCal@i,f,c
  4386  0016A4  2A14               	incf	initCal@i+1,f,c
  4387  0016A6  D7DB               	goto	l2065
  4388  0016A8                     l235:
  4389  0016A8  0012               	return		;funcret
  4390  0016AA                     __end_of_initCal:
  4391                           	opt stack 0
  4392                           tblptru	equ	0xFF8
  4393                           tblptrh	equ	0xFF7
  4394                           tblptrl	equ	0xFF6
  4395                           tablat	equ	0xFF5
  4396                           prodh	equ	0xFF4
  4397                           prodl	equ	0xFF3
  4398                           intcon	equ	0xFF2
  4399                           postinc0	equ	0xFEE
  4400                           wreg	equ	0xFE8
  4401                           postinc2	equ	0xFDE
  4402                           postdec2	equ	0xFDD
  4403                           fsr2h	equ	0xFDA
  4404                           fsr2l	equ	0xFD9
  4405                           status	equ	0xFD8
  4406                           
  4407 ;; *************** function _initCNY *****************
  4408 ;; Defined at:
  4409 ;;		line 46 in file "CNY.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;		None
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;		None
  4414 ;; Return value:  Size  Location     Type
  4415 ;;                  1    wreg      void 
  4416 ;; Registers used:
  4417 ;;		wreg, status,2
  4418 ;; Tracked objects:
  4419 ;;		On entry : 0/0
  4420 ;;		On exit  : 0/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4423 ;;      Params:         0       0       0       0       0       0       0       0       0
  4424 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4425 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4426 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4427 ;;Total ram usage:        0 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; Hardware stack levels required when called:    2
  4430 ;; This function calls:
  4431 ;;		Nothing
  4432 ;; This function is called by:
  4433 ;;		_main
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           	psect	text29
  4438  001836                     __ptext29:
  4439                           	opt stack 0
  4440  001836                     _initCNY:
  4441                           	opt stack 28
  4442                           
  4443                           ;CNY.c: 47: TRISAbits.RA5 = 1;
  4444                           
  4445                           ;incstack = 0
  4446  001836  8A92               	bsf	3986,5,c	;volatile
  4447                           
  4448                           ;CNY.c: 48: TRISAbits.RA3 = 1;
  4449  001838  8692               	bsf	3986,3,c	;volatile
  4450                           
  4451                           ;CNY.c: 49: TRISAbits.RA2 = 1;
  4452  00183A  8492               	bsf	3986,2,c	;volatile
  4453                           
  4454                           ;CNY.c: 50: TRISAbits.RA1 = 1;
  4455  00183C  8292               	bsf	3986,1,c	;volatile
  4456                           
  4457                           ;CNY.c: 51: TRISAbits.RA0 = 1;
  4458  00183E  8092               	bsf	3986,0,c	;volatile
  4459                           
  4460                           ;CNY.c: 52: ADCON1 = 0x0A;
  4461  001840  0E0A               	movlw	10
  4462  001842  6EC1               	movwf	4033,c	;volatile
  4463                           
  4464                           ;CNY.c: 53: ADCON2 = 0xA5;
  4465  001844  0EA5               	movlw	165
  4466  001846  6EC0               	movwf	4032,c	;volatile
  4467  001848  0012               	return		;funcret
  4468  00184A                     __end_of_initCNY:
  4469                           	opt stack 0
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           intcon	equ	0xFF2
  4477                           postinc0	equ	0xFEE
  4478                           wreg	equ	0xFE8
  4479                           postinc2	equ	0xFDE
  4480                           postdec2	equ	0xFDD
  4481                           fsr2h	equ	0xFDA
  4482                           fsr2l	equ	0xFD9
  4483                           status	equ	0xFD8
  4484                           
  4485 ;; *************** function _ISR *****************
  4486 ;; Defined at:
  4487 ;;		line 97 in file "main.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;		None
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;		None
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  1    wreg      void 
  4494 ;; Registers used:
  4495 ;;		wreg, status,2, status,0, cstack
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4501 ;;      Params:         0       0       0       0       0       0       0       0       0
  4502 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4503 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4504 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4505 ;;Total ram usage:       18 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:    1
  4508 ;; This function calls:
  4509 ;;		_cnyInterrupt
  4510 ;;		_timerInterrupt
  4511 ;; This function is called by:
  4512 ;;		Interrupt level 2
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	intcode
  4517  000008                     __pintcode:
  4518                           	opt stack 0
  4519  000008                     _ISR:
  4520                           	opt stack 25
  4521                           
  4522                           ;incstack = 0
  4523  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4524  00000A  EDB4  F009         	call	int_func,f	;refresh shadow registers
  4525                           tblptru	equ	0xFF8
  4526                           tblptrh	equ	0xFF7
  4527                           tblptrl	equ	0xFF6
  4528                           tablat	equ	0xFF5
  4529                           prodh	equ	0xFF4
  4530                           prodl	equ	0xFF3
  4531                           intcon	equ	0xFF2
  4532                           postinc0	equ	0xFEE
  4533                           wreg	equ	0xFE8
  4534                           postinc2	equ	0xFDE
  4535                           postdec2	equ	0xFDD
  4536                           fsr2h	equ	0xFDA
  4537                           fsr2l	equ	0xFD9
  4538                           status	equ	0xFD8
  4539                           
  4540                           	psect	intcode_body
  4541  001368                     __pintcode_body:
  4542                           	opt stack 25
  4543  001368                     int_func:
  4544                           	opt stack 25
  4545  001368  0006               	pop		; remove dummy address from shadow register refresh
  4546  00136A  CFFA F001          	movff	pclath,??_ISR
  4547  00136E  CFFB F002          	movff	pclatu,??_ISR+1
  4548  001372  CFE9 F003          	movff	fsr0l,??_ISR+2
  4549  001376  CFEA F004          	movff	fsr0h,??_ISR+3
  4550  00137A  CFE1 F005          	movff	fsr1l,??_ISR+4
  4551  00137E  CFE2 F006          	movff	fsr1h,??_ISR+5
  4552  001382  CFD9 F007          	movff	fsr2l,??_ISR+6
  4553  001386  CFDA F008          	movff	fsr2h,??_ISR+7
  4554  00138A  CFF3 F009          	movff	prodl,??_ISR+8
  4555  00138E  CFF4 F00A          	movff	prodh,??_ISR+9
  4556  001392  CFF6 F00B          	movff	tblptrl,??_ISR+10
  4557  001396  CFF7 F00C          	movff	tblptrh,??_ISR+11
  4558  00139A  CFF8 F00D          	movff	tblptru,??_ISR+12
  4559  00139E  CFF5 F00E          	movff	tablat,??_ISR+13
  4560  0013A2  C04D  F00F         	movff	btemp,??_ISR+14
  4561  0013A6  C04E  F010         	movff	btemp+1,??_ISR+15
  4562  0013AA  C04F  F011         	movff	btemp+2,??_ISR+16
  4563  0013AE  C050  F012         	movff	btemp+3,??_ISR+17
  4564                           
  4565                           ;main.c: 98: timerInterrupt();
  4566  0013B2  ECB5  F00B         	call	_timerInterrupt	;wreg free
  4567                           
  4568                           ;main.c: 99: cnyInterrupt();
  4569  0013B6  EC57  F00C         	call	_cnyInterrupt	;wreg free
  4570  0013BA  C012  F050         	movff	??_ISR+17,btemp+3
  4571  0013BE  C011  F04F         	movff	??_ISR+16,btemp+2
  4572  0013C2  C010  F04E         	movff	??_ISR+15,btemp+1
  4573  0013C6  C00F  F04D         	movff	??_ISR+14,btemp
  4574  0013CA  C00E  FFF5         	movff	??_ISR+13,tablat
  4575  0013CE  C00D  FFF8         	movff	??_ISR+12,tblptru
  4576  0013D2  C00C  FFF7         	movff	??_ISR+11,tblptrh
  4577  0013D6  C00B  FFF6         	movff	??_ISR+10,tblptrl
  4578  0013DA  C00A  FFF4         	movff	??_ISR+9,prodh
  4579  0013DE  C009  FFF3         	movff	??_ISR+8,prodl
  4580  0013E2  C008  FFDA         	movff	??_ISR+7,fsr2h
  4581  0013E6  C007  FFD9         	movff	??_ISR+6,fsr2l
  4582  0013EA  C006  FFE2         	movff	??_ISR+5,fsr1h
  4583  0013EE  C005  FFE1         	movff	??_ISR+4,fsr1l
  4584  0013F2  C004  FFEA         	movff	??_ISR+3,fsr0h
  4585  0013F6  C003  FFE9         	movff	??_ISR+2,fsr0l
  4586  0013FA  C002  FFFB         	movff	??_ISR+1,pclatu
  4587  0013FE  C001  FFFA         	movff	??_ISR,pclath
  4588  001402  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4589  001404  0011               	retfie		f
  4590  001406                     __end_of_ISR:
  4591                           	opt stack 0
  4592                           pclatu	equ	0xFFB
  4593                           pclath	equ	0xFFA
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           intcon	equ	0xFF2
  4601                           postinc0	equ	0xFEE
  4602                           fsr0h	equ	0xFEA
  4603                           fsr0l	equ	0xFE9
  4604                           wreg	equ	0xFE8
  4605                           fsr1h	equ	0xFE2
  4606                           fsr1l	equ	0xFE1
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613 ;; *************** function _timerInterrupt *****************
  4614 ;; Defined at:
  4615 ;;		line 11 in file "timer.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;		None
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;		None
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  1    wreg      void 
  4622 ;; Registers used:
  4623 ;;		wreg, status,2, status,0
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4629 ;;      Params:         0       0       0       0       0       0       0       0       0
  4630 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4631 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4632 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4633 ;;Total ram usage:        0 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; This function calls:
  4636 ;;		Nothing
  4637 ;; This function is called by:
  4638 ;;		_ISR
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text31
  4643  00176A                     __ptext31:
  4644                           	opt stack 0
  4645  00176A                     _timerInterrupt:
  4646                           	opt stack 25
  4647                           
  4648                           ;timer.c: 12: if(!INTCONbits.TMR0IF) return;
  4649                           
  4650                           ;incstack = 0
  4651  00176A  A4F2               	btfss	intcon,2,c	;volatile
  4652  00176C  0012               	return	
  4653                           
  4654                           ;timer.c: 13: fractionCounter += 680;
  4655  00176E  0EA8               	movlw	168
  4656  001770  264A               	addwf	_fractionCounter,f,c
  4657  001772  0E02               	movlw	2
  4658  001774  224B               	addwfc	_fractionCounter+1,f,c
  4659                           
  4660                           ;timer.c: 14: if(1000 <= fractionCounter){
  4661  001776  0EE8               	movlw	232
  4662  001778  5C4A               	subwf	_fractionCounter,w,c
  4663  00177A  0E03               	movlw	3
  4664  00177C  584B               	subwfb	_fractionCounter+1,w,c
  4665  00177E  A0D8               	btfss	status,0,c
  4666  001780  D00A               	goto	i2l81
  4667                           
  4668                           ;timer.c: 15: fractionCounter -= 1000;
  4669  001782  0EE8               	movlw	232
  4670  001784  5E4A               	subwf	_fractionCounter,f,c
  4671  001786  0E03               	movlw	3
  4672  001788  5A4B               	subwfb	_fractionCounter+1,f,c
  4673                           
  4674                           ;timer.c: 16: millisCounter++;
  4675  00178A  0E01               	movlw	1
  4676  00178C  2646               	addwf	_millisCounter,f,c
  4677  00178E  0E00               	movlw	0
  4678  001790  2247               	addwfc	_millisCounter+1,f,c
  4679  001792  2248               	addwfc	_millisCounter+2,f,c
  4680  001794  2249               	addwfc	_millisCounter+3,f,c
  4681  001796                     i2l81:
  4682                           
  4683                           ;timer.c: 17: }
  4684                           ;timer.c: 18: INTCONbits.TMR0IF = 0;
  4685  001796  94F2               	bcf	intcon,2,c	;volatile
  4686  001798  0012               	return		;funcret
  4687  00179A                     __end_of_timerInterrupt:
  4688                           	opt stack 0
  4689                           pclatu	equ	0xFFB
  4690                           pclath	equ	0xFFA
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           prodh	equ	0xFF4
  4696                           prodl	equ	0xFF3
  4697                           intcon	equ	0xFF2
  4698                           postinc0	equ	0xFEE
  4699                           fsr0h	equ	0xFEA
  4700                           fsr0l	equ	0xFE9
  4701                           wreg	equ	0xFE8
  4702                           fsr1h	equ	0xFE2
  4703                           fsr1l	equ	0xFE1
  4704                           postinc2	equ	0xFDE
  4705                           postdec2	equ	0xFDD
  4706                           fsr2h	equ	0xFDA
  4707                           fsr2l	equ	0xFD9
  4708                           status	equ	0xFD8
  4709                           
  4710 ;; *************** function _cnyInterrupt *****************
  4711 ;; Defined at:
  4712 ;;		line 45 in file "CNY.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;		None
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;		None
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  1    wreg      void 
  4719 ;; Registers used:
  4720 ;;		None
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4726 ;;      Params:         0       0       0       0       0       0       0       0       0
  4727 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4728 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4729 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4730 ;;Total ram usage:        0 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; This function calls:
  4733 ;;		Nothing
  4734 ;; This function is called by:
  4735 ;;		_ISR
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text32
  4740  0018AE                     __ptext32:
  4741                           	opt stack 0
  4742  0018AE                     _cnyInterrupt:
  4743                           	opt stack 25
  4744                           
  4745                           ;incstack = 0
  4746  0018AE  0012               	return		;funcret
  4747  0018B0                     __end_of_cnyInterrupt:
  4748                           	opt stack 0
  4749                           pclatu	equ	0xFFB
  4750                           pclath	equ	0xFFA
  4751                           tblptru	equ	0xFF8
  4752                           tblptrh	equ	0xFF7
  4753                           tblptrl	equ	0xFF6
  4754                           tablat	equ	0xFF5
  4755                           prodh	equ	0xFF4
  4756                           prodl	equ	0xFF3
  4757                           intcon	equ	0xFF2
  4758                           postinc0	equ	0xFEE
  4759                           fsr0h	equ	0xFEA
  4760                           fsr0l	equ	0xFE9
  4761                           wreg	equ	0xFE8
  4762                           fsr1h	equ	0xFE2
  4763                           fsr1l	equ	0xFE1
  4764                           postinc2	equ	0xFDE
  4765                           postdec2	equ	0xFDD
  4766                           fsr2h	equ	0xFDA
  4767                           fsr2l	equ	0xFD9
  4768                           status	equ	0xFD8
  4769                           pclatu	equ	0xFFB
  4770                           pclath	equ	0xFFA
  4771                           tblptru	equ	0xFF8
  4772                           tblptrh	equ	0xFF7
  4773                           tblptrl	equ	0xFF6
  4774                           tablat	equ	0xFF5
  4775                           prodh	equ	0xFF4
  4776                           prodl	equ	0xFF3
  4777                           intcon	equ	0xFF2
  4778                           postinc0	equ	0xFEE
  4779                           fsr0h	equ	0xFEA
  4780                           fsr0l	equ	0xFE9
  4781                           wreg	equ	0xFE8
  4782                           fsr1h	equ	0xFE2
  4783                           fsr1l	equ	0xFE1
  4784                           postinc2	equ	0xFDE
  4785                           postdec2	equ	0xFDD
  4786                           fsr2h	equ	0xFDA
  4787                           fsr2l	equ	0xFD9
  4788                           status	equ	0xFD8
  4789                           
  4790                           	psect	rparam
  4791  0000                     pclatu	equ	0xFFB
  4792                           pclath	equ	0xFFA
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           intcon	equ	0xFF2
  4800                           postinc0	equ	0xFEE
  4801                           fsr0h	equ	0xFEA
  4802                           fsr0l	equ	0xFE9
  4803                           wreg	equ	0xFE8
  4804                           fsr1h	equ	0xFE2
  4805                           fsr1l	equ	0xFE1
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812                           	psect	temp
  4813  00004D                     btemp:
  4814                           	opt stack 0
  4815  00004D                     	ds	1
  4816  0000                     int$flags	set	btemp
  4817  0000                     wtemp6	set	btemp+1
  4818                           pclatu	equ	0xFFB
  4819                           pclath	equ	0xFFA
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           prodh	equ	0xFF4
  4825                           prodl	equ	0xFF3
  4826                           intcon	equ	0xFF2
  4827                           postinc0	equ	0xFEE
  4828                           fsr0h	equ	0xFEA
  4829                           fsr0l	equ	0xFE9
  4830                           wreg	equ	0xFE8
  4831                           fsr1h	equ	0xFE2
  4832                           fsr1l	equ	0xFE1
  4833                           postinc2	equ	0xFDE
  4834                           postdec2	equ	0xFDD
  4835                           fsr2h	equ	0xFDA
  4836                           fsr2l	equ	0xFD9
  4837                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      76
    BANK0           160     57      74
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _loop->_calcPID
    _setMotors->_setLMotor
    _setMotors->_setRMotor
    _setLEDs->_setLEDG
    _setLEDs->_setLEDR
    _setLEDs->_setLEDY
    _calibrateCNY->___awmod
    _calcPID->___ftadd
    _getCalCNY->___wmul
    ___wmul->___lwdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___ftadd->___fttol
    ___awtoft->___ftpack
    ___awtoft->___ftpack

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_loop
    _loop->_calcPID
    _calcPID->___ftadd
    ___ftadd->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19944
                            _initCNY
                            _initCal
                     _initInterrupts
                         _initMotors
                          _initTimer
                             _initUI
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                12    12      0   19854
                                             45 BANK0     12    12      0
                            ___awmod
                            _calcPID
                       _calibrateCNY
                            _getBTN1
                            _getBTN2
                            _setLEDs
                          _setMotors
 ---------------------------------------------------------------------------------
 (2) _setMotors                                            4     0      4    1682
                                             22 COMRAM     4     0      4
                          _setLMotor
                          _setRMotor
 ---------------------------------------------------------------------------------
 (3) _setRMotor                                            4     2      2     211
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _setLMotor                                            4     2      2     211
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _setLEDs                                              3     1      2     740
                                             19 COMRAM     3     1      2
                            _setLEDG
                            _setLEDR
                            _setLEDY
 ---------------------------------------------------------------------------------
 (3) _setLEDY                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _setLEDR                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _setLEDG                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getBTN2                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getBTN1                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calibrateCNY                                        10     8      2     563
                                             24 COMRAM    10     8      2
                            ___awmod (ARG)
                             _getCNY
 ---------------------------------------------------------------------------------
 (2) _calcPID                                             32    23      9   15724
                                             57 COMRAM     2     2      0
                                             15 BANK0     30    21      9
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                            ___lldiv
                             ___wmul
                          _getCalCNY
 ---------------------------------------------------------------------------------
 (3) _getCalCNY                                           14    12      2    1451
                                             31 COMRAM    14    12      2
                            ___lwdiv
                             ___wmul
                             _getCNY
 ---------------------------------------------------------------------------------
 (3) _getCNY                                               5     3      2      44
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     615
                                             25 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     551
                                             45 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4001
                                             30 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4698
                                             54 COMRAM     3     3      0
                                              6 BANK0      9     3      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3326
                                             26 COMRAM     4     1      3
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2833
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     752
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initCal                                              2     2      0      90
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initCNY                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
                       _cnyInterrupt
                     _timerInterrupt
 ---------------------------------------------------------------------------------
 (6) _timerInterrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _cnyInterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initCNY
   _initCal
   _initInterrupts
   _initMotors
   _initTimer
   _initUI
   _loop
     ___awmod
     _calcPID
       ___awtoft
         ___ftpack
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___lldiv
       ___wmul
         ___lwdiv (ARG)
       _getCalCNY
         ___lwdiv
         ___wmul
           ___lwdiv (ARG)
         _getCNY
     _calibrateCNY
       ___awmod (ARG)
       _getCNY (ARG)
     _getBTN1
     _getBTN2
     _setLEDs
       _setLEDG
       _setLEDR
       _setLEDY
     _setMotors
       _setLMotor
       _setRMotor

 _ISR (ROOT)
   _cnyInterrupt
   _timerInterrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     39      4A       5       46.3%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     3B      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      96      20        0.0%
DATA                 0      0      96       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jul 29 16:08:02 2018

                     l23 1610                       l26 1638                       l62 153C  
                     l63 1554                       l56 143A                       l64 1560  
                     l57 1452                       l58 145E                       _kd 0806  
                     _ki 0809                       _kp 080C      ___wmul@multiplicand 001C  
            __CFG_BORV$0 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000             ___ftadd@exp1 006E  
           ___ftadd@exp2 006D             ___ftadd@sign 006C      calibrateCNY@channel 0019  
                    l140 0854                      l151 0894                      l152 08D0  
                    l233 166E                      l129 0B16                      l241 1242  
                    l250 0EE8                      l138 0AC4                      l154 0926  
                    l146 0868                      l235 16A8                      l243 1296  
                    l147 088A                      l139 0814                      l252 0EF0  
                    l156 097C                      l245 129E                      l254 0F44  
                    l158 09C0                      l503 0D46                      l239 123A  
                    l159 0A78                      l512 0DD6                      l256 0F4C  
                    l441 15C4                      l169 1800                      l442 15BC  
                    l530 0E4A                      l531 0E7A                      l507 0D70  
                    l612 14EE                      l445 15DC                      l453 1710  
                    l517 0DCC                      l613 14FC                      l446 15E6  
                    l438 15A2                      l526 0E0A                      l518 0DC2  
                    l447 15F4                      l439 15AE                      l527 0E00  
                    l551 1126                      l472 12E2                      l608 14BA  
                    l473 12D8                      l529 0E2E                      l553 114E  
                    l609 14AE                      l554 1180                      l475 1316  
                    l555 1190                      l476 1300                      l580 10D0  
                    l572 1034                      l557 11A8                      l581 10C4  
                    l661 16C8                      l478 133E                      l558 11B8  
                    l574 10AC                      l662 16C0                      l479 1334  
                    l583 10EC                      l575 109C                      l665 16E8  
                    l666 16F2             __CFG_CPB$OFF 000000                      _PR2 000FCB  
           __CFG_CPD$OFF 000000                      _ISR 0008             __CFG_BOR$OFF 000000  
           ___awmod@sign 0018                      wreg 000FE8             __CFG_LVP$OFF 000000  
                   ?_ISR 0001             __CFG_WDT$OFF 000000                     l2065 165E  
                   l2323 0B88                     l2307 0B06                     l1551 189A  
                   l1547 188E           ??_cnyInterrupt 0001                     l2391 096C  
                   l2377 0916                     u1110 1410                     u2011 0D04  
                   u2021 0D18                     u2110 0DA0                     u1128 1412  
                   u1160 1518                     u2050 0D38                     u1090 16CC  
                   u1235 1874                     u1236 1876                     u2221 110E  
                   u1245 1866                     u2150 0DDE                     u2310 1052  
                   u1246 1868                     u1255 1882                     u2080 0D62  
                   u1256 1884                     u2241 1136                     u1178 151A  
                   u2315 104A                     u2180 0E12                     u2350 10D6  
                   u1630 14BE                     u2450 08F8                     u2291 1016  
                   u1740 15C8                     u2380 0B88                     u2470 094E  
                   u2390 0842                     u2490 09A4                     u1940 12CA  
                   u1980 1348                     i2l81 1796             __CFG_WDTPS$1 000000  
                   _main 17E8             ___ftpack@arg 0013                     _maxs 0099  
                   _mins 003C                     _loop 0812             ___ftpack@exp 0016  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 004D                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000             _calcPID$1250 0078  
           _calcPID$1248 007D             _calcPID$1249 007F             ___ftmul@cntr 002C  
           ___param_bank 000000             ___ftmul@sign 002D         ??_timerInterrupt 0001  
         setMotors@right 0019                    ??_ISR 0001             ___fttol@exp1 0065  
           ___fttol@lval 0061            __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0001                    ?_loop 0001          __end_of___ftadd 0EA0  
        __end_of___awmod 15FE          __end_of___lldiv 150E          __end_of___ftmul 11F2  
                  _T0CON 000FD5          __end_of___fttol 10FE                    _T2CON 000FCA  
        __end_of_calcPID 0CF2          __end_of___lwdiv 16FC            __CFG_USBDIV$2 000000  
        __end_of_getBTN1 189E          __end_of_getBTN2 1892            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initCNY 184A           __CFG_EBTRB$OFF 000000            ___awtoft@sign 001E  
        __end_of_initCal 16AA          __end_of_setLEDG 1886          __end_of_setLEDR 1878  
        __end_of_setLEDY 186A          __end_of_setLEDs 1836            ___ftpack@sign 0017  
         __pbitbssCOMRAM 0260                    pclath 000FFA                    tablat 000FF5  
                  loop@i 0093                    status 000FD8                    wtemp6 004E  
         __CFG_PBADEN$ON 000000           __CFG_MCLRE$OFF 000000          __initialization 179A  
           __end_of_main 1806             __end_of_loop 0ADC                   ??_main 003C  
          ___fttol@sign1 0060                   ??_loop 008D            __activetblptr 000002  
  __size_of_calibrateCNY 00C8                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   _CCPR1L 000FBE  
                 _CCPR2L 000FBB         __end_of___awtoft 1734         __end_of___ftpack 1368  
        _fractionCounter 004A         __end_of_channels 0806           __CFG_XINST$OFF 000000  
                 ___wmul 17C2                ??___ftadd 0037                ??___awmod 0017  
                 _getCNY 15FE                ??___lldiv 001B                ??___ftmul 0025  
              ??___fttol 0032                ??_calcPID 003A         __end_of_maxSpeed 0811  
              ??___lwdiv 0017                   _initUI 184A     __end_of_cnyInterrupt 18B0  
              ??_getBTN1 0013                ??_getBTN2 0013                   clear_0 17A0  
                 clear_1 17AE          ___awmod@divisor 0015             _calibrateCNY 11F2  
        ___awmod@counter 0017    ___ftmul@f3_as_product 0029                ??_initCNY 0013  
              ??_initCal 0013                ??_setLEDG 0013                ??_setLEDR 0013  
              ??_setLEDY 0013                ??_setLEDs 0016             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
          getCNY@channel 0017           calcPID@prevErr 00A7               __accesstop 0060  
__end_of__initialization 17B4               ___ftadd@f1 0066               ___ftadd@f2 0069  
          ___rparam_used 000001               ___awtoft@c 001B               ___ftmul@f1 001F  
             ___ftmul@f2 0022               ___fttol@f1 002E           __pcstackCOMRAM 0001  
__size_of_initInterrupts 0006       __size_of_getCalCNY 0166               __end_of_kd 0809  
             __end_of_ki 080C               __end_of_kp 080F               __pbssBANK0 0099  
     __size_of_initTimer 000A               calcPID@err 00A3               calcPID@val 0089  
             calcPID@pos 007B       __size_of_setLMotor 0086       __size_of_setRMotor 0080  
                ?___wmul 001A                  ?_getCNY 0013                  ?_initUI 0001  
     __size_of_setMotors 001A                ?___awtoft 001B                ?___ftpack 0013  
      __end_of_getCalCNY 1006          __CFG_VREGEN$OFF 000000                  __Hparam 0000  
                __Lparam 0000    __size_of_cnyInterrupt 0002                  ___ftadd 0CF2  
             _initMotors 1734                  ___awmod 158E                  ___lldiv 148C  
        __size_of___wmul 0026                  ___ftmul 10FE                  ___fttol 1006  
                _calcPID 0ADC          __size_of_getCNY 0058                  ___lwdiv 16AA  
           __psmallconst 0800                  _getBTN1 1892          __CFG_STVREN$OFF 000000  
                _getBTN2 1886          __size_of_initUI 0012                  __pcinit 179A  
             ??___awtoft 001E               ??___ftpack 0018                  __ramtop 0800  
                __ptext0 17E8                  __ptext1 0812                  __ptext2 1806  
                __ptext3 150E                  __ptext4 1406                  __ptext5 1820  
                __ptext6 185C                  __ptext7 186A                  __ptext8 1878  
                __ptext9 1886            _millisCounter 0046             __size_of_ISR 13FE  
                _initCNY 1836        __end_of_initTimer 18A8                  _initCal 1656  
                _setLEDG 1878                  _setLEDR 186A                  _setLEDY 185C  
                _setLEDs 1820         ___awmod@dividend 0013           setLMotor@speed 0013  
      __end_of_setLMotor 148C        __end_of_setRMotor 158E           __pintcode_body 1368  
   end_of_initialization 17B4        __end_of_setMotors 1820             _cnyInterrupt 18AE  
          __Lmediumconst 0000                  int_func 1368                  loop@cal 0260  
                loop@pid 0091          ___lldiv@divisor 0017          ___lldiv@counter 001F  
                postdec2 000FDD          calcPID@integral 00A5           _initInterrupts 18A8  
                postinc0 000FEE                  postinc2 000FDE         _calibrateCNY$672 001D  
       _calibrateCNY$673 001F                _PORTBbits 000F81  __size_of_timerInterrupt 0030  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISCbits 000F94  
            _CCP1CONbits 000FBD              _CCP2CONbits 000FBA   __end_of_initInterrupts 18AE  
       getCalCNY@channel 0020              ___ftmul@exp 0028            setMotors@left 0017  
            ?_initMotors 0001           __end_of___wmul 17E8           __end_of_getCNY 1656  
         __end_of_initUI 185C      start_initialization 179A          calibrateCNY@val 0021  
            __end_of_ISR 1406            _getCalCNY$677 0028            _getCalCNY$678 002A  
        ?_initInterrupts 0001                 ??___wmul 001E                 ??_getCNY 0015  
       __CFG_LPT1OSC$OFF 000000                 ??_initUI 0013        __size_of___awtoft 0038  
      __size_of___ftpack 00AE              __pbssCOMRAM 003C            __pcstackBANK0 0060  
         setRMotor@speed 0013      __size_of_initMotors 0036               loop@status 00A9  
              _getCalCNY 0EA0                calcPID@Kd 0075                calcPID@Ki 0072  
              calcPID@Kp 006F                calcPID@s1 0081                calcPID@s2 0085  
       ___lwdiv@dividend 0013                __pintcode 0008                 ?___ftadd 0066  
               ?___awmod 0013                 ?___lldiv 0013                 ?___ftmul 001F  
               ?___fttol 002E                 ?_calcPID 006F                 ?___lwdiv 0013  
               ?_getBTN1 0001                 ?_getBTN2 0001                 ?_initCNY 0001  
               ?_initCal 0001              __smallconst 0800           _timerInterrupt 176A  
               ?_setLEDG 0001                 ?_setLEDR 0001                 ?_setLEDY 0001  
               ?_setLEDs 0014                _initTimer 189E         ___lwdiv@quotient 0017  
              _setLMotor 1406           ___wmul@product 001E                _setRMotor 150E  
               _LATBbits 000F8A                 _LATCbits 000F8B             getCalCNY@val 002C  
              _setMotors 1806               ?_getCalCNY 0020            ?_calibrateCNY 0019  
 __end_of_timerInterrupt 179A               _ADCON0bits 000FC2        ___wmul@multiplier 001A  
             ?_initTimer 0001               ?_setLMotor 0013               ?_setRMotor 0013  
             ?_setMotors 0017                 __Hrparam 0000                 __Lrparam 0000  
           ??_initMotors 0013         __size_of___ftadd 01AE         __size_of___awmod 0070  
         ??_calibrateCNY 001B         __size_of___lldiv 0082         __size_of___ftmul 00F4  
       __size_of___fttol 00F8         __size_of_calcPID 0216         __size_of___lwdiv 0052  
               ___awtoft 16FC                 ___ftpack 12BA          ?_timerInterrupt 0001  
       __size_of_getBTN1 000C         __size_of_getBTN2 000C                loop@i_451 0095  
              loop@i_452 0097         __size_of_initCNY 0014         __size_of_initCal 0054  
               _channels 0801         __size_of_setLEDG 000E         __size_of_setLEDR 000E  
       __size_of_setLEDY 000E                 calcPID@i 008B         __size_of_setLEDs 0016  
        ___lwdiv@divisor 0015          ___lwdiv@counter 0019                 __ptext10 1892  
               __ptext11 11F2                 __ptext20 0CF2                 __ptext12 0ADC  
               __ptext21 16FC                 __ptext13 0EA0                 __ptext22 12BA  
               __ptext14 15FE                 __ptext31 176A                 __ptext23 158E  
               __ptext15 17C2                 __ptext32 18AE                 __ptext24 184A  
               __ptext16 16AA                 __ptext25 189E                 __ptext17 148C  
               __ptext26 1734                 __ptext18 1006                 __ptext27 18A8  
               __ptext19 10FE                 __ptext28 1656                 __ptext29 1836  
     __end_of_initMotors 176A                 _maxSpeed 080F         ??_initInterrupts 0013  
          __size_of_main 001E            __size_of_loop 02CA              ??_getCalCNY 0022  
               int$flags 004D    __CFG_CPUDIV$OSC1_PLL2 000000                 initCal@i 0013  
             _INTCONbits 000FF2                 setLEDG@v 0013                 setLEDR@v 0013  
               setLEDY@v 0013              ??_initTimer 0013                 setLEDs@g 0015  
               setLEDs@r 0016                 setLEDs@y 0014                 intlevel2 0000  
            ??_setLMotor 0015              ??_setRMotor 0015         ___lldiv@dividend 0013  
            ??_setMotors 001B         ___lldiv@quotient 001B       __CFG_FOSC$HSPLL_HS 000000  
          ?_cnyInterrupt 0001     __end_of_calibrateCNY 12BA  
